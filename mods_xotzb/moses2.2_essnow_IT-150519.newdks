*/ Ongoing development by Steve George,  Robin S Smith 
*/ and Jonathan Gregory (May, 2019)
*DECK CANCAP7A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1999, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
! Routine to calculate the heat capacity of a given PFT from its LAI
!
! Written by Richard Essery (September 1999)
! 
C**********************************************************************
      SUBROUTINE CANCAP (LAND_FIELD,VEG_PTS,VEG_INDEX,FT
     &,                  HT,LAI,CANHC,VFRAC)

      IMPLICIT NONE

       INTEGER
     & LAND_FIELD                 ! IN Total number of land points.
     &,VEG_PTS                    ! IN Number of vegetated points.
     &,VEG_INDEX(LAND_FIELD)      ! IN Index of vegetated points.

      INTEGER
     & FT                         ! IN Plant functional type.

      REAL
     & HT(LAND_FIELD)             ! IN Vegetation height (m).
     &,LAI(LAND_FIELD)            ! IN Leaf area index.
     &,CANHC(LAND_FIELD)          ! OUT Areal heat capacity of
!                                 !     vegetation canopy (J/K/m2).
     &,VFRAC(LAND_FIELD)          ! OUT Fractional canopy coverage.

      REAL
     & LAI_BAL(LAND_FIELD)        ! WORK Leaf area index in balanced
!                                 !      growth state.
     &,LEAF(LAND_FIELD)           ! WORK Leaf biomass (kg C/m2).
     &,WOOD(LAND_FIELD)           ! WORK Woody biomass (kg C/m2).

      INTEGER
     & J,L                        ! WORK Loop counters.

!-----------------------------------------------------------------------
! Parameters
!-----------------------------------------------------------------------
      REAL
     & HLEAF                      ! Specific heat capacity of leaves
!                                 ! (J / K / kg Carbon).
     &,HWOOD                      ! Specific heat capacity of wood
!                                 ! (J / K / kg Carbon).
      PARAMETER ( HLEAF=5.7E4, HWOOD=1.1E4 )

*CALL NSTYPES
*CALL PFTPARM
*CALL TRIF
*CALL MOSES_OPT

      DO J=1,VEG_PTS
        L = VEG_INDEX(J)
        CANHC(L) = 0.
        VFRAC(L) = 0.
      ENDDO

      IF (CAN_MODEL .EQ. 2) THEN
!     Radiative canopy without heat capacity
      DO J=1,VEG_PTS
        L = VEG_INDEX(J)
        CANHC(L) = 0.
        VFRAC(L) = 1. - EXP(-KEXT(FT)*LAI(L))
      ENDDO

      ELSEIF (CAN_MODEL .EQ. 3) THEN
!     Radiative canopy with heat capacity
        DO J=1,VEG_PTS
          L = VEG_INDEX(J)
          LAI_BAL(L) = ( A_WS(FT)*ETA_SL(FT)*HT(L) /
     &                   A_WL(FT) )**(1.0/(B_WL(FT)-1))
          LEAF(L) = SIGL(FT)*LAI_BAL(L)
          WOOD(L) = A_WL(FT)*(LAI_BAL(L)**B_WL(FT))
          CANHC(L) = HLEAF*LEAF(L) + HWOOD*WOOD(L)
          VFRAC(L) = 1. - EXP(-KEXT(FT)*LAI(L))
        ENDDO

      ENDIF

      RETURN
      END
*ENDIF
*DECK GAUSS7A
*IF DEF,A08_5A,OR,DEF,A08_7A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1999, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!    SUBROUTINE GAUSS--------------------------------------------------
!
! Subroutine Interface:
      SUBROUTINE GAUSS (NLEVS,NPNTS,SOIL_PTS,SOIL_INDEX,A,B,C,D
     &,                 XMIN,XMAX,X)

      IMPLICIT NONE
!
! Description:
!     Solves a tridiagnonal matrix equation of the form:
!
!             A(n) X(n-1) + B(n) X(n) + C(n) X(n+1) = D(n)
!
!     by Gausian elimination, assuming boundary conditions:
!
!             A(1) = 0.0    at the top
!             C(N) = 0.0    at the bottom.
!                                                          (Cox, 2/99)
!
!
! Documentation :
!
! Current Code Owner : Peter Cox
!
! History:
! Version   Date     Comment
! -------   ----     -------
!  4.6      2/99     New deck.  Peter Cox
!
! Code Description:
!   Language: FORTRAN 77 + common extensions.
!
! System component covered:
! System Task:
!

! Global variables:

! Subroutine arguments
!   Scalar arguments with intent(IN) :
      INTEGER
     & NLEVS                ! IN Number of levels.
     &,NPNTS                ! IN Number of gridpoints.
     &,SOIL_PTS             ! IN Number of soil points.


!   Array arguments with intent(IN) :
      INTEGER
     & SOIL_INDEX(NPNTS)    ! IN Array of soil points.

      REAL
     & A(NPNTS,NLEVS)       ! IN Matrix elements corresponding
!                           !    to the coefficients of X(n-1).
     &,B(NPNTS,NLEVS)       ! IN Matrix elements corresponding
!                           !    to the coefficients of X(n).
     &,C(NPNTS,NLEVS)       ! IN Matrix elements corresponding
!                           !    to the coefficients of X(n+1).
     &,D(NPNTS,NLEVS)       ! IN Matrix elements corresponding
!                           !    to the RHS of the equation.
     &,XMIN(NPNTS,NLEVS)    ! IN Minimum permitted value of X.
     &,XMAX(NPNTS,NLEVS)    ! IN Maximum permitted value of X.

!   Array arguments with intent(OUT) :
      REAL
     & X(NPNTS,NLEVS)       ! OUT Solution.

! Local scalars:
      INTEGER
     & I,J,N                ! WORK Loop counters.

! Local arrays:
      REAL
     & ADASH(NPNTS,NLEVS),BDASH(NPNTS,NLEVS),CDASH(NPNTS,NLEVS)
     &,DDASH(NPNTS,NLEVS)   ! WORK Transformed matrix elements

!-----------------------------------------------------------------------
! By default set the implicit increment to the explicit increment
! (for when denominators vanish).
!-----------------------------------------------------------------------
      DO N=1,NLEVS
        DO J=1,SOIL_PTS
          I=SOIL_INDEX(J)
          X(I,N)=D(I,N)
        ENDDO
      ENDDO

!-----------------------------------------------------------------------
! Upward Sweep: eliminate "C" elements by replacing nth equation with:
!                  B'(n+1)*Eq(n)-C(n)*Eq'(n+1)
! where "'" denotes a previously tranformed equation. The resulting
! equations take the form:
!                A'(n) X(n-1) + B'(n) X(n) = D'(n)
! (NB. The bottom boundary condition implies that the NLEV equation does
!  not need transforming.)
!-----------------------------------------------------------------------
      DO J=1,SOIL_PTS
        I=SOIL_INDEX(J)
        ADASH(I,NLEVS)=A(I,NLEVS)
        BDASH(I,NLEVS)=B(I,NLEVS)
        DDASH(I,NLEVS)=D(I,NLEVS)
      ENDDO

      DO N=NLEVS-1,1,-1
        DO J=1,SOIL_PTS
          I=SOIL_INDEX(J)
          ADASH(I,N)=BDASH(I,N+1)*A(I,N)
          BDASH(I,N)=BDASH(I,N+1)*B(I,N)-C(I,N)*ADASH(I,N+1)
          DDASH(I,N)=BDASH(I,N+1)*D(I,N)-C(I,N)*DDASH(I,N+1)
        ENDDO
      ENDDO

!-----------------------------------------------------------------------
! Top boundary condition: A(1) = 0.0 , allows X(1) to be diagnosed
!-----------------------------------------------------------------------
      DO J=1,SOIL_PTS
        I=SOIL_INDEX(J)
        ! seg 19/5/19 Previous test was .NE.0, but this led to instabilities
        IF (ABS(BDASH(I,1)).GT.0.1) THEN
          X(I,1)=DDASH(I,1)/BDASH(I,1)
        ELSE
          ! seg 19/5/19 - ensure value is initilaized as 0
          X(I,1)=0.
          WRITE(6,*)'Hydrology routine GAUSS : Layer 1 WARNING!'
        ENDIF
        X(I,1)=MAX(X(I,1),XMIN(I,1))
        X(I,1)=MIN(X(I,1),XMAX(I,1))
      ENDDO

!-----------------------------------------------------------------------
! Downward Sweep: calculate X(n) from X(n-1):
!                X(n) = (D'(n) - A'(n) X(n-1)) / B'(n)
!-----------------------------------------------------------------------
      DO N=2,NLEVS
        DO J=1,SOIL_PTS
          I=SOIL_INDEX(J)
          ! seg 19/5/19 Previous test was .NE.0, but this led to instabilities
          IF (ABS(BDASH(I,N)).GT.0.1) THEN
            X(I,N)=(DDASH(I,N)-ADASH(I,N)*X(I,N-1))/BDASH(I,N)
          ELSE
            ! seg 19/5/19 - ensure value is initilaized as 0
            X(I,N)=0.
            WRITE(6,*)'Hydrology routine GAUSS : Layer ',N,' WARNING!'
          ENDIF
          X(I,N)=MAX(X(I,N),XMIN(I,N))
          X(I,N)=MIN(X(I,N),XMAX(I,N))
        ENDDO
      ENDDO

      RETURN
      END
*ENDIF
*DECK RESTILE7A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1999, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
C
C*LL  SUBROUTINE RES_TILE ----------------------------------------------
CLL
CLL  Purpose: Calculate gridbox-mean resistance factor used by TR_MIX
CLL           for 7A tiled land surface.
CLL
CLL  Model           Modification history:
CLL version  Date
CLL   4.6    11/99   New deck. R. Essery
CLL
C*----------------------------------------------------------------------
      SUBROUTINE RES_TILE (P_FIELD,LAND_FIELD,LAND_INDEX,
     &                     NTILES,TILE_INDEX,TILE_PTS,SOLUBLE,
     &                     ARESIST,ARESIST_TILE,CANOPY,CATCH,GS_TILE,
     &                     RESIST_B_TILE,SNOW_TILE,TILE_FRAC,RESB,RESS,
     &                     RES_FACTOR)

      IMPLICIT NONE

      INTEGER
     & P_FIELD               ! IN Total number of P-grid points.
     &,LAND_FIELD            ! IN Total number of land points.
     &,LAND_INDEX(P_FIELD)   ! IN Index of land points.
     &,NTILES                ! IN Number of land tiles.
     &,NELEV
     &,TILE_INDEX(LAND_FIELD,NTILES)
!                            ! IN Index of tile points.
     &,TILE_PTS(NTILES)      ! IN Number of tile points.

      LOGICAL
     & SOLUBLE               ! IN .TRUE. for soluble aerosols.

      REAL
     & ARESIST(P_FIELD)      ! IN GBM aerodynamic resistance (s/m).
     &,ARESIST_TILE(LAND_FIELD,NTILES)
!                            ! IN 1/(CD_STD*VSHR) on land tiles.
     &,CANOPY(LAND_FIELD,NTILES)
!                            ! IN Surface water on land tiles (kg/m2).
     &,CATCH(LAND_FIELD,NTILES)
!                            ! IN Surface capacity (max. surface water)
!                            !    of land tiles (kg/m2).
     &,GS_TILE(LAND_FIELD,NTILES)
!                            ! IN Surface conductance for land tiles.
     &,RESIST_B_TILE(LAND_FIELD,NTILES)
!                            ! IN (1/CH-1/CD_STD)/VSHR on land tiles.
     &,SNOW_TILE(LAND_FIELD,NTILES)
!                            ! IN Snow mass on land tiles (kg/m2).
     &,TILE_FRAC(LAND_FIELD,NTILES)
                             ! IN Tile fractions.
     &,RESB                  ! IN Rb(aerosol) / Rb(H2O).
     &,RESS                  ! IN Rs(aerosol) / Rs(H2O).
     &,RES_FACTOR(P_FIELD)   ! OUT Ra/(Ra+Rb+Rs) for dry deposition.

      REAL
     & DAMP_FACTOR(LAND_FIELD,NTILES)
!                            ! Canopy moistening factor
     &,RS_TILE(LAND_FIELD,NTILES)
!                            ! Surface reistance for land tiles.
     &,STR_RESIST_B          ! Rb for aerosol.
     &,STR_RESIST_S          ! Rs for aerosol.
     &,ASNOW                 ! Parameter for snow fraction calculation.
     &,COND_LIM              ! Low limit for canopy conductance.
     &,R_SNOW                ! Resistance to dry deposition over snow.
     &,SNOW_F                ! Snow cover fraction.
      PARAMETER (ASNOW=0.2, COND_LIM=1.0E-3, R_SNOW=1.0E3)

      INTEGER
     & I           ! Loop counter (horizontal field index).
     &,J           ! Loop counter (tile field index).
     &,L           ! Loop counter (land point field index).
     &,N           ! Loop counter (tile index).


      DO N=1,NTILES
        DO J=1,TILE_PTS(N)
          L = TILE_INDEX(J,N)
          DAMP_FACTOR(L,N) = 1.0
          IF (GS_TILE(L,N) .GT. COND_LIM) THEN
            RS_TILE(L,N) = 1. / GS_TILE(L,N)
          ELSE
            RS_TILE(L,N) = 1. / COND_LIM
          ENDIF
        ENDDO
      ENDDO

      IF (SOLUBLE) THEN
        DO N=1,NTILES
          DO J=1,TILE_PTS(N)
            L = TILE_INDEX(J,N)
            IF( (CATCH(L,N) .GT. 0.01) .AND.
     &          (CANOPY(L,N) .GT. 0.0) ) THEN
              IF( CANOPY(L,N) .LE. CATCH(L,N) ) THEN
                DAMP_FACTOR(L,N) = 1. - 0.66667*CANOPY(L,N)/CATCH(L,N)
              ELSE
                DAMP_FACTOR(L,N) = 0.33333
              ENDIF
            ENDIF
          ENDDO
        ENDDO
      ENDIF

      DO L=1,LAND_FIELD
        I = LAND_INDEX(L)
        RES_FACTOR(I) = 0.
      ENDDO

      DO N=1,NTILES
        DO J=1,TILE_PTS(N)
          L = TILE_INDEX(J,N)
          I = LAND_INDEX(L)
          STR_RESIST_B = RESB*RESIST_B_TILE(L,N)
          STR_RESIST_S = RESS*RS_TILE(L,N)*DAMP_FACTOR(L,N)
          IF (SNOW_TILE(L,N).GT.0. .AND. STR_RESIST_S.GT.0) THEN
            SNOW_F = 1. - EXP(-ASNOW*SNOW_TILE(L,N))
            STR_RESIST_S = 1. /
     &      (SNOW_F/R_SNOW + (1.-SNOW_F)/STR_RESIST_S)
          ENDIF
          RES_FACTOR(I) = RES_FACTOR(I) + ARESIST(I)*TILE_FRAC(L,N) /
     &                   (ARESIST_TILE(L,N)+STR_RESIST_B+STR_RESIST_S)
        ENDDO
      ENDDO

      RETURN
      END
*ENDIF
*DECK TILEALB                                                           
C *****************************COPYRIGHT******************************  
C (c) CROWN COPYRIGHT 2000, METEOROLOGICAL OFFICE, All Rights Reserved. 
C                                                                       
C Use, duplication or disclosure of this code is subject to the         
C restrictions as set forth in the contract.                            
C                                                                       
C                Meteorological Office                                  
C                London Road                                            
C                BRACKNELL                                              
C                Berkshire UK                                           
C                RG12 2SZ                                               
C                                                                       
C If no contract has been raised with this copy of the code, the use,   
C duplication or disclosure of it is strictly prohibited.  Permission   
C to do so must first be obtained in writing from the Head of Numerical 
C Modelling at the above address.                                       
C ******************************COPYRIGHT****************************** 
! Routine to calculate albedos of land-surface tiles and gridbox-mean   
! albedo for MOSES II.                                                  
!                                                                       
! Richard Essery (March 2000)                                           
!                                                                       
C ******************************COPYRIGHT****************************** 
      SUBROUTINE TILE_ALBEDO (                                          
     & P_FIELD,LAND_FIELD,LAND1,LAND_PTS,LAND_INDEX,NTILES,TILE_PTS,    
     & TILE_INDEX,L_SNOW_ALBEDO,                                        
     & ALBSOIL,COSZ,FRAC,LAI_IN,RGRAIN,SNOW_TILE,TSTAR_TILE,Z0_TILE,    
     & ALB_TILE,LAND_ALBEDO,
     & L_ESSERY_SNOW, NSMAX, RHO_SNOW_ARRAY,
     & NSNOW,RHO_SNOW_GRND
     & )                                                                
                                                                        
      IMPLICIT NONE                                                     
                                                                        
*CALL NSTYPES                                                           
                                                                        
      INTEGER                                                           
     & P_FIELD                     ! IN Total number of grid points.    
     &,LAND_FIELD                  ! IN No. of land points.             
     &,LAND1                       ! IN First land point to be processed
     &,LAND_PTS                    ! IN No. of land pts to be processed.
     &,NTILES                      ! IN Number of surface tiles.        
     &,LAND_INDEX(P_FIELD)         ! IN Index of land points.           
     &,TILE_PTS(NTYPE)             ! IN Number of land points which     
!                                  !    include the nth surface type.   
     &,TILE_INDEX(LAND_FIELD,NTYPE)! IN Indices of land points which    
!                                  !    include the nth surface type.   
                                                                        
      LOGICAL                                                           
     & L_SNOW_ALBEDO               ! IN .TRUE. for spectral albedos     
!                                  !    and prognostic snow albedo.     
                                                                        
      REAL                                                              
     & ALBSOIL(LAND_FIELD)         ! IN Soil albedo.                    
     &,COSZ(P_FIELD)               ! IN Cosine of the zenith angle.     
     &,FRAC(LAND_FIELD,NTYPE)      ! IN Fractional cover of each        
!                                  !    surface type.                   
     &,LAI_IN(LAND_FIELD,NPFT)     ! IN Leaf area index.                
     &,RGRAIN(LAND_FIELD,NTILES)   ! IN Snow grain size on tiles        
!                                  !    (microns).                      
     &,SNOW_TILE(LAND_FIELD,NTILES)! IN Lying snow on tiles (kg/m2).    
     &,TSTAR_TILE(LAND_FIELD,NTILES)!IN Tile surface temperatures (K).  
     &,Z0_TILE(LAND_FIELD,NTILES)  ! IN Surface roughness on tiles (m). 
                                                                        
      REAL                                                              
     & ALB_TILE(LAND_FIELD,NTILES,4)!OUT Albedos for surface tiles.     
!                                  !     (*,*,1) - Direct beam visible  
!                                  !     (*,*,2) - Diffuse visible      
!                                  !     (*,*,3) - Direct beam near-IR  
!                                  !     (*,*,4) - Diffuse near-IR      
     &,LAND_ALBEDO(P_FIELD,4)      ! OUT GBM albedos.                   
                                                                        
      REAL                                                              
     & ALBSNC(LAND_FIELD,NTYPE)    ! Snow-covered albedo of surf types. 
     &,ALBSNF(LAND_FIELD,NTYPE)    ! Snow-free albedo of surf types.    
     &,ALB_TYPE(LAND_FIELD,NTYPE,4)! Albedos of surface types.          
     &,ALB_SNOW(LAND_FIELD,NTYPE,4)! Snow albedos.                      
     &,LAI(LAND_FIELD,NPFT)        ! Adjusted leaf area index.          
     &,SNOW(LAND_FIELD)            ! Copy of SNOW_TILE.                 
     &,TSTAR(LAND_FIELD)           ! Copy of TSTAR_TILE.                
     &,Z0(LAND_FIELD)              ! Copy of Z0_TILE.                   
     &,GBM_RHO_SNOW(LAND_FIELD)
     &,DSA                         ! Deep-snow albedo.                  
     &,FLIT                        ! Weighting factor for albedo.       
     &,FSNOW(LAND_FIELD)           ! Weighting factor for albedo.       
                                                                        
      INTEGER                                                           
     & BAND,I,J,L,N,N_1,K                ! Loop counters                      
                                                                        
*CALL C_SOILH                                                           
*CALL C_0_DG_C                                                          
      REAL                                                              
     & DTLAND,KLAND,TCLAND,MASKD                                        
      PARAMETER( DTLAND = 2., KLAND = 0.3/DTLAND, TCLAND = TM-DTLAND,   
ccccc Tibet Snow mod ccccc
     &           MASKD = 0.1 )
cccccccccccccccccccccccccc
      LOGICAL
     &      L_ESSERY_SNOW

      INTEGER
     &      NSMAX                ! IN: Max number of snow layers

      REAL
     &      RHO_SNOW_ARRAY(land_field, ntiles, nsmax)  
                              ! IN: Snow layer densities (kg/m3)
     &     ,RHO_SNOW_GRND(land_field, ntiles)
     &     ,NSNOW(land_field, ntiles)
                                                                        
*CALL PFTPARM                                                           
*CALL NVEGPARM                                                          

      REAL elev_frac(LAND_FIELD,NELEV)

      REAL
     &      aicemax(2),
     &      dt,
     &      daice(2)

!+seg May, 2019
      INTEGER FRAC_ERRN, FRAC_ERRP ! Error count terms

! Check for negative fractional values, and set to zero
! This should not happen, but the GLIMMER interface seems to
! be creating them ** This should be fixed elsewhere **
! Note, previously I copied frac into frac_tmp to do this
! test, buy as 'intent(in)' this is not required

      FRAC_ERRN=0
      FRAC_ERRP=0
      DO N=1,NTYPE
         DO L=1,LAND_FIELD
           IF (FRAC(L,N) < 0.0) THEN
             FRAC_ERRN=FRAC_ERRN+1
             FRAC(L,N) = 0.0
           ENDIF
           IF (FRAC(L,N) > 1.0) THEN
             FRAC_ERRP=FRAC_ERRP+1
             FRAC(L,N) = 1.0
           ENDIF
         END DO
      END DO

      IF (FRAC_ERRN > 0)
     &   write(6,*) 'TILEALB NEG FRAC ERR ',FRAC_ERRN,
     &   ' (PLEASE FIX)'
      IF (FRAC_ERRP > 0)
     &   write(6,*) 'TILEALB POS FRAC ERR ',FRAC_ERRP,
     &   ' (PLEASE FIX)'
!-seg
 
!+seg May, 2019 Bare ice albedo scheme
! 
! Old parameters led to non-physical results
! Reference, Tedesco (2016) doi:10.5194/tc-10-477-2016 
! Old parameters:
!      aicemax(1) = 0.78 
!      aicemax(2) = 0.36 
!      daice(1) = -0.075 
!      daice(2) = -0.075
! New parameters:
      aicemax(1) = 0.55
      aicemax(2) = 0.55
      daice(1) = -0.35
      daice(2) = -0.35
! Minimum albedo allowed 0.2
!-seg                                                                        
      DO N=1,NTILES                                                     
        DO BAND=1,4                                                     
          DO L=1,LAND_FIELD                                             
            ALB_TILE(L,N,BAND) = 0.                                     
          ENDDO                                                         
        ENDDO                                                           
      ENDDO                                                             
      DO N=1,NTYPE                                                      
        DO BAND=1,4                                                     
          DO L=1,LAND_FIELD                                             
            ALB_TYPE(L,N,BAND) = 0.                                     
            ALB_SNOW(L,N,BAND) = 0.                                     
          ENDDO                                                         
        ENDDO                                                           
      ENDDO                                                             
                                                                        
! Impose minimum LAI for bare vegetation                                
      DO N=1,NPFT                                                       
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          LAI(L,N) = MAX( LAI_IN(L,N), 0.5 )                            
        ENDDO                                                           
      ENDDO                                                             
                                                                        
      IF (L_SNOW_ALBEDO) THEN                                           
!---------------------------------------------------------------------- 
! Spectral albedo scheme with prognostic snow albedo                    
!---------------------------------------------------------------------- 
                                                                        
! Set albedos of vegetated surface types                                
        CALL ALBPFT(P_FIELD,LAND_FIELD,LAND_INDEX,TILE_INDEX,TILE_PTS,  
     &              ALBSOIL,COSZ,LAI,ALB_TYPE)                          
! Have found certain sunlight angles on certain types of vegetation
! just crap out (well, once - fluke?)
        DO BAND=1,4                                                     
          DO N=1,NPFT
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              if (ALB_TYPE(L,N,BAND).ne.ALB_TYPE(L,N,BAND)
     &        .OR.ALB_TYPE(L,N,BAND).gt.1
     &        .OR.ALB_TYPE(L,N,BAND).lt.0
     &           ) ALB_TYPE(L,N,BAND)=ALBSNF_MAX(N)
            ENDDO                                                       
          ENDDO                                                         
        ENDDO 
                                                                        
! Set albedos of non-vegetated surface types                            
        DO BAND=1,4                                                     
          DO N=NPFT+1,NTYPE                                             
            n_1=(n-npft-1)/nelev + 1
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              ALB_TYPE(L,N,BAND) = ALBSNF_NVG(n_1)                   
              IF ( ALBSNF_NVG(N_1).LT.0. )        ! Soil tile        
     &          ALB_TYPE(L,N,BAND) = ALBSOIL(L)                         
            ENDDO                                                       
          ENDDO                                                         
        ENDDO                                                           

! Set albedo for ice 
      DO n=ntype-nelev+1,ntype
      k=mod(n-1,nelev)+1
      DO j=1,tile_pts(n) 
        l = tile_index(j,n) 
        alb_type(l,n,1) = aicemax(1) 
        alb_type(l,n,2) = aicemax(1) 
        alb_type(l,n,3) = aicemax(2) 
        alb_type(l,n,4) = aicemax(2) 
!!
!! ...not 100% on why I commented this out. Something to do with
!! getting silly values for the bare-ice albedo in odd warm climates
!! - you can clearly get -ve albedoes out of it as written here
!! HAVE PUT IN A CAP, RATHER THAN TAKE OUT THE EFFECT ALTOGETHER
!!
        IF (tstar_tile(l,ntiles-nelev+k) .GT. (tm - 1.0)) THEN 
          dt = tstar_tile(l,ntiles-nelev+k) - (tm - 1.0)
          alb_type(l,n,1) = aicemax(1) + (dt * daice(1))
          alb_type(l,n,2) = aicemax(1) + (dt * daice(1))
          alb_type(l,n,3) = aicemax(2) + (dt * daice(2))
          alb_type(l,n,4) = aicemax(2) + (dt * daice(2))
        ENDIF 
        do band=1,4
          alb_type(l,n,band)=max(alb_type(l,n,band),0.2)
        end do
      END DO 
      END DO 
                                                                        
! Calculate snow albedos                                                
        CALL ALBSNOW(P_FIELD,LAND_FIELD,LAND1,LAND_PTS,LAND_INDEX,      
     &               NTILES,TILE_INDEX,TILE_PTS,                        
     &               COSZ,RGRAIN,SNOW_TILE,ALB_SNOW)                    
                                                                        
! Adjust surface type albedos for snow cover                            
        DO L=LAND1,LAND1+LAND_PTS-1                                     
          SNOW(L) = SNOW_TILE(L,1)                                      
          Z0(L) = Z0_TILE(L,1)                                          
          gbm_rho_snow(L)=RHO_SNOW
        ENDDO                                                           
        DO N=1,NTYPE                                                    
          k=mod(n-1,nelev)+1
          IF (NTILES.NE.1) THEN                                         
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              IF (NTILES.EQ.NELEV*2) THEN
                SNOW(L) = SNOW_TILE(L,k)
                Z0(L) = Z0_TILE(L,k)
                IF (L_ESSERY_SNOW) then
                  if (nsnow(l,k).gt.0)
     &            gbm_rho_snow(L) = rho_snow_array(l,k,1)
                  if (nsnow(l,k).eq.0)
     &            gbm_rho_snow(L) = rho_snow_grnd(l,k)
                ENDIF
                IF (N.gt.NTYPE-NELEV) SNOW(L) = SNOW_TILE(L,NELEV+k)
                IF (N.gt.NTYPE-NELEV) Z0(L) = Z0_TILE(L,NELEV+K)
                IF (N.gt.NTYPE-NELEV.and.L_ESSERY_SNOW) THEN
                  ! Bugfix June,2015 SEG
                  ! Ice points previously not accumulating snow
                  ! at high levels!
                  if (nsnow(l,nelev+k).gt.0) gbm_rho_snow(L)=
     &                                rho_snow_array(l,nelev+k,1)
                  if (nsnow(l,nelev+k).eq.0) gbm_rho_snow(L)=
     &                                rho_snow_grnd(l,nelev+k)
                ENDIF
              ELSE
                SNOW(L) = SNOW_TILE(L,N)                                  
                Z0(L) = Z0_TILE(L,N)                                      
                IF (L_ESSERY_SNOW) THEN
                  if (nsnow(l,k).gt.0) gbm_rho_snow(L)=
     &                                 rho_snow_array(l,n,1)
                  if (nsnow(l,k).eq.0) gbm_rho_snow(L)=
     &                                 rho_snow_grnd(l,n)
                ENDIF
              ENDIF
            ENDDO                                                       
          ENDIF                                                         

! Calculate weighted tile albedo.                                           
          FSNOW(:) = 0.0
          DO J=1,TILE_PTS(N)                                            
            L = TILE_INDEX(J,N)                                         
            IF ( SNOW(L) .GT. 0.) THEN                                  
              FSNOW(L) = SNOW(L)/(SNOW(L) + 10.*GBM_RHO_SNOW(L)*Z0(L))
            END IF
          END DO
! Do this differently for the ice tile
          IF (n .GE. (NTYPE-NELEV+1).AND.L_ESSERY_SNOW) THEN
            DO j=1,tile_pts(n)
              l = tile_index(j,n)
              if (fsnow(l).gt.0 ) fsnow(l) = 1.0
              IF (gbm_rho_snow(l) .GT. 600.0)
     &             fsnow(l) = 1.0 - ((gbm_rho_snow(l)
     &                                       - 600.0) / 200.0)
              fsnow(l) = MIN(fsnow(l), 1.0)
              fsnow(l) = MAX(fsnow(l), 0.0)
            ENDDO
          ENDIF

                                            
          DO J=1,TILE_PTS(N)
            L = TILE_INDEX(J,N)
              DO BAND=1,4                                               
                ALB_TYPE(L,N,BAND) = FSNOW(L)*ALB_SNOW(L,N,BAND) +         
     &                          (1. - FSNOW(L))*ALB_TYPE(L,N,BAND)    
              ENDDO                                                     
          ENDDO                                                         
        ENDDO                                                           
                                                                        
      ELSE                                                              
!---------------------------------------------------------------------- 
! Non-spectral albedo scheme with diagnosed snow albedo                 
!---------------------------------------------------------------------- 
                                                                        
! Set albedos of vegetated surface types                                
        DO N=1,NPFT                                                     
          n_1=(n-1)/nelev + 1
          DO J=1,TILE_PTS(N)                                            
            L = TILE_INDEX(J,N)                                         
            FLIT = 1.0 - EXP(-KEXT(N_1)*LAI(L,N))                         
            ALBSNC(L,N) = ALBSNC_MIN(N_1)*(1 - FLIT) 
     &                  + ALBSNC_MAX(N_1)*FLIT 
            ALBSNF(L,N) = ALBSOIL(L)*(1 - FLIT) + ALBSNF_MAX(N_1)*FLIT    
          ENDDO                                                         
        ENDDO                                                           
                                                                        
! Set albedos of non-vegetated surface types                            
        DO N=NPFT+1,NTYPE                                               
          n_1=(n-npft-1)/nelev + 1
          DO J=1,TILE_PTS(N)                                            
            L = TILE_INDEX(J,N)                                         
            ALBSNC(L,N) = ALBSNC_NVG(N_1)                            
            ALBSNF(L,N) = ALBSNF_NVG(N_1)                            
            IF ( ALBSNF_NVG(N_1).LT.0. ) ALBSNF(L,N) = ALBSOIL(L)    
          ENDDO                                                         
        ENDDO                                                           
                                                                        
! Adjust surface type albedos for snow cover                            
        DO L=LAND1,LAND1+LAND_PTS-1                                     
          TSTAR(L) = TSTAR_TILE(L,1)                                    
          SNOW(L) = SNOW_TILE(L,1)                                      
        ENDDO                                                           
        DO N=1,NTYPE                                                    
          IF (NTILES.NE.1) THEN                                         
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              IF (NTILES.EQ.NELEV*2) THEN
                k=mod(n-1,nelev)+1
                tstar(L) = tstar_TILE(L,k)
                snow(L) = snow_TILE(L,k)
                IF (N.gt.NTYPE-NELEV) tstar(L) = tstar_TILE(L,NELEV+k)
                IF (N.gt.NTYPE-NELEV) snow(L) = snow_TILE(L,NELEV+K)
              ELSE
                TSTAR(L) = TSTAR_TILE(L,N)                                
                SNOW(L) = SNOW_TILE(L,N)                                  
              ENDIF
            ENDDO                                                       
          ENDIF                                                         
          DO J=1,TILE_PTS(N)                                            
            L = TILE_INDEX(J,N)                                         
            IF ( TSTAR(L) .LT. TCLAND ) THEN                            
              DSA = ALBSNC(L,N)                                         
            ELSEIF ( TSTAR(L) .LT. TM ) THEN                            
              DSA = ALBSNC(L,N) + KLAND*(ALBSNF(L,N) - ALBSNC(L,N))     
     &                                 *(TSTAR(L) - TCLAND)             
            ELSE                                                        
              DSA = ALBSNC(L,N) + KLAND*(ALBSNF(L,N) - ALBSNC(L,N))     
     &                                 *(TM - TCLAND)                   
            ENDIF                                                       
            ALB_TYPE(L,N,1) = ALBSNF(L,N) + (DSA - ALBSNF(L,N)) *       
     &                                    ( 1. - EXP(-MASKD*SNOW(L)) )  
          ENDDO                                                         
        ENDDO                                                           
                                                                        
! Copy albedo to all bands                                              
        DO BAND=2,4                                                     
          DO N=1,NTYPE                                                  
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              ALB_TYPE(L,N,BAND) = ALB_TYPE(L,N,1)                      
            ENDDO                                                       
          ENDDO                                                         
        ENDDO                                                           
                                                                        
      ENDIF       ! Spectral or non-spectral albedo schemes             
                                                                        
!---------------------------------------------------------------------- 
! Calculate GBM surface albedo                                          
!---------------------------------------------------------------------- 
                                                                        
      DO BAND=1,4                                                       
        DO I=1,P_FIELD                                                  
          LAND_ALBEDO(I,BAND) = 0.                                      
        ENDDO                                                           
        DO N=1,NTYPE                                                    
          DO J=1,TILE_PTS(N)                                            
            L = TILE_INDEX(J,N)                                         
            I = LAND_INDEX(L)                                           
            LAND_ALBEDO(I,BAND) = LAND_ALBEDO(I,BAND) +                 
     &                            FRAC(L,N)*ALB_TYPE(L,N,BAND)          
          ENDDO                                                         
        ENDDO                                                           
      ENDDO                                                             
                                                                        
!---------------------------------------------------------------------- 
! Copy albedos as required for aggregate or distinct tiles              
!---------------------------------------------------------------------- 
                                                                        
      IF (NTILES.EQ.1) THEN                                             
        DO BAND=1,4                                                     
          DO L=LAND1,LAND1+LAND_PTS-1                                   
            I = LAND_INDEX(L)                                           
            ALB_TILE(L,1,BAND) = LAND_ALBEDO(I,BAND)                    
          ENDDO                                                         
        ENDDO                                                           

      ELSE IF (NTILES.eq.NELEV*2) THEN
        DO BAND=1,4
          DO N=NTYPE-NELEV+1,NTYPE
            k=mod(n-1,nelev)+1
            DO J=1,TILE_PTS(N)
              L = TILE_INDEX(J,N)
              ALB_TILE(L,K+NELEV,BAND)=ALB_TYPE(L,N,BAND)
            ENDDO
          ENDDO
        ENDDO

        DO L=LAND1,LAND1+LAND_PTS-1
        DO K=1,NELEV
          elev_frac(l,k)=0.
        ENDDO
        DO N=1,NTYPE-NELEV
          k=mod(n-1,nelev)+1
          elev_frac(l,k)=elev_frac(l,k)+frac(l,n)
        ENDDO
        ENDDO

        DO BAND=1,4
          DO N=1,NTYPE-NELEV
            k=mod(n-1,nelev)+1
            DO J=1,TILE_PTS(N)
              L = TILE_INDEX(J,N)
              if (elev_frac(l,k).gt.0)
     &        ALB_TILE(L,k,BAND)=ALB_TILE(L,k,BAND)+
     &                           (FRAC(L,N)/elev_frac(L,k))*
     &                           ALB_TYPE(L,N,BAND)
            ENDDO
          ENDDO
        ENDDO

      ELSE                                                              
        DO BAND=1,4                                                     
          DO N=1,NTYPE                                                  
            DO J=1,TILE_PTS(N)                                          
              L = TILE_INDEX(J,N)                                       
              ALB_TILE(L,N,BAND) = ALB_TYPE(L,N,BAND)                   
            ENDDO                                                       
          ENDDO                                                         
        ENDDO                                                           
      ENDIF                                                             
                                                                        
      RETURN                                                            
      END                                                               
*DECK ALBPFT
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 2000, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
! Routine to calculate the spectral albedo of the land surface using
! the two stream approach of Sellers, 1995.
!
! Written by Peter Cox (Mar 1999)
! Adapted for MOSES 2.2 by Richard Essery (March 2000)
!
C**********************************************************************
      SUBROUTINE ALBPFT (P_FIELD,LAND_FIELD,LAND_INDEX,TILE_INDEX,
     &                   TILE_PTS,ALBSOIL,COSZ,LAI,ALB_TYPE)

      IMPLICIT NONE

*CALL NSTYPES

      INTEGER
     & P_FIELD                     ! IN Total number of grid points.
     &,LAND_FIELD                  ! IN Number of land points.
     &,LAND_INDEX(P_FIELD)         ! IN Index of land points.
     &,TILE_PTS(NTYPE)             ! IN Number of land points which
!                                  !    include the surface type.
     &,TILE_INDEX(LAND_FIELD,NTYPE)! IN Indices of land points which
!                                  !    include the surface type.

      REAL
     & ALBSOIL(LAND_FIELD)         ! IN Soil albedo.
     &,COSZ(P_FIELD)               ! IN Cosine of the zenith angle.
     &,LAI(LAND_FIELD,NPFT)        ! IN Leaf area index.

      REAL
     & ALB_TYPE(LAND_FIELD,NTYPE,4)!OUT Albedos for surface types.
!                                  !     (*,*,1) - Direct beam visible
!                                  !     (*,*,2) - Diffuse visible
!                                  !     (*,*,3) - Direct beam near-IR
!                                  !     (*,*,4) - Diffuse near-IR

      REAL
     & ALBUDIF(LAND_FIELD,2)      ! Diffuse albedo of the underlying
!                                 ! surface.
     &,ALBUDIR(LAND_FIELD,2)      ! Direct albedo of the underlying
!                                 ! surface.
     &,ALPL(2)                    ! Leaf reflection coefficient.
     &,BETADIR                    ! Upscatter parameter for direct beam.
     &,BETADIF                    ! Upscatter parameter for diffuse beam
     &,COSZM                      ! Mean value of COSZ.
     &,K                          ! Optical depth per unit leaf area.
     &,G                          ! Relative projected leaf area in
                                  ! direction cosz.
     &,OM(2)                      ! Leaf scattering coefficient.
     &,SALB                       ! Single scattering albedo.
     &,SQCOST                     ! Cosine squared of the mean leaf angl
                                  ! to the horizontal.
     &,TAUL(2)                    ! Leaf transmission coefficient.
     &,B,C,CA,D,F,H,U1            ! Miscellaneous variables from
     &,P1,P2,P3,P4,D1             ! Sellers (1985).
     &,H1,H2,H3,H7,H8             !
     &,S1,S2,SIG                  !

      INTEGER
     & BAND,I,J,L,N,N_1           ! Loop counters.

*CALL TRIF

      DO L=1,LAND_FIELD
        ALBUDIF(L,1) = ALBSOIL(L)
        ALBUDIF(L,2) = ALBSOIL(L)
        ALBUDIR(L,1) = ALBSOIL(L)
        ALBUDIR(L,2) = ALBSOIL(L)
      ENDDO

      DO N=1,NPFT
        N_1=((N-1)/NELEV) +1

        OM(1) = OMEGA(N_1)
        OM(2) = OMNIR(N_1)
        ALPL(1) = ALPAR(N_1)
        ALPL(2) = ALNIR(N_1)

        DO BAND=1,2  ! Visible and near-IR bands
          TAUL(BAND) = OM(BAND) - ALPL(BAND)
          DO J=1,TILE_PTS(N)
            L = TILE_INDEX(J,N)
            I = LAND_INDEX(L)
            IF (ORIENT(N_1).EQ.0) THEN
              SQCOST = 1./3.
              G = 0.5
              COSZM = 1.0
              SALB = 0.5*OM(BAND)
              IF (COSZ(I).GT.0.01)
     &          SALB = 0.5*OM(BAND) *
     &                 ( 1. - COSZ(I)*LOG((COSZ(I)+1.)/COSZ(I)) )
            ELSEIF (ORIENT(N_1).EQ.1) THEN
              SQCOST = 1.
              G = COSZ(I)
              COSZM = 1.
              SALB = OM(BAND)/4.
            ENDIF
            K = G / 0.01
            IF (COSZ(I).GT.0.01) K = G / COSZ(I)
            BETADIR = (1. + COSZM*K)/(OM(BAND)*COSZM*K)*SALB
            C = 0.5*( ALPL(BAND) + TAUL(BAND) +
     &               (ALPL(BAND) - TAUL(BAND))*SQCOST )
            BETADIF = C / OM(BAND)
            B = 1. - (1. - BETADIF)*OM(BAND)
            D = OM(BAND)*COSZM*K*BETADIR
            F = OM(BAND)*COSZM*K*(1. - BETADIR)
            H = SQRT(B*B - C*C) / COSZM
            SIG = (COSZM*K)**2 + C*C - B*B
            U1 = B - C/ALBUDIF(L,BAND)
            CA = C*ALBUDIR(L,BAND)/ALBUDIF(L,BAND)
            S1 = EXP(-H*LAI(L,N))
            S2 = EXP(-K*LAI(L,N))
            P1 = B + COSZM*H
            P2 = B - COSZM*H
            P3 = B + COSZM*K
            P4 = B - COSZM*K
            D1 = P1*(U1 - COSZM*H)/S1 - P2*(U1 + COSZM*H)*S1
            H1 = -D*P4 - C*F
            H2 = ( (D - P3*H1/SIG) * (U1 - COSZM*H) / S1 -
     &             (D - CA - (U1 + COSZM*K)*H1/SIG)*P2*S2 ) / D1
            H3 = - ( (D - P3*H1/SIG) * (U1 + COSZM*H)*S1 -
     &               (D - CA - (U1 + COSZM*K)*H1/SIG)*P1*S2 ) / D1
            H7 = (C/D1)*(U1 - COSZM*H) / S1
            H8 = - (C/D1)*(U1 + COSZM*H) * S1
            ALB_TYPE(L,N,2*BAND-1) = H1/SIG + H2 + H3   ! Direct beam
            ALB_TYPE(L,N,2*BAND) = H7 + H8              ! Diffuse
          ENDDO
        ENDDO

      ENDDO

      RETURN
      END
*DECK ALBSNOW
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 2000, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
! Routine to calculate spectral snow albedos for MOSES II, based on
! the Marshall (1989) parametrization of the Wiscombe and Warren (1980)
! model. Influence of contaminants in snow has not been included - see
! UM vn4.5 deck FTSA1A.
!
! Richard Essery (March 2000)
!
C *********************************************************************
      SUBROUTINE ALBSNOW (P_FIELD,LAND_FIELD,LAND1,LAND_PTS,LAND_INDEX,
     &                    NTILES,TILE_INDEX,TILE_PTS,
     &                    COSZ,RGRAIN,SNOW_TILE,ALB_SNOW)

      IMPLICIT NONE

*CALL NSTYPES

      INTEGER
     & P_FIELD                     ! IN Total number of grid points.
     &,LAND_FIELD                  ! IN Number of land points.
     &,LAND1                       ! IN First land point to be processed
     &,LAND_PTS                    ! IN No of land pts to be processed.
     &,NTILES                      ! IN Number of surface tiles.
     &,LAND_INDEX(P_FIELD)         ! IN Index of land points.
     &,TILE_PTS(NTYPE)             ! IN Number tile points.
     &,TILE_INDEX(LAND_FIELD,NTYPE)! IN Index of tile points.

      REAL
     & COSZ(P_FIELD)               ! IN Zenith cosine.
     &,RGRAIN(LAND_FIELD,NTILES)   ! IN Snow grain size (microns).
     &,SNOW_TILE(LAND_FIELD,NTILES)! IN Lying snow (kg/m2).

      REAL
     & ALB_SNOW(LAND_FIELD,NTYPE,4)! OUT Snow albedo.
!                                  !     (*,*,1) - Direct beam visible
!                                  !     (*,*,2) - Diffuse visible
!                                  !     (*,*,3) - Direct beam near-IR
!                                  !     (*,*,4) - Diffuse near-IR

      REAL
     & REFF                        ! Zenith effective grain size.
     &,R0                          ! Grain size for fresh snow (microns)
      PARAMETER ( R0 = 50. )

      INTEGER
     & BAND,I,J,L,N,K                ! Loop counters.

      REAL
     & AMAX(2)                     ! Maximum albedo for fresh snow
!                 VIS     NIR
!+seg Dec 2017
! Change in the paramterisation of snow albedo with grain size 
! (changes to visible spectrum).

      REAL AV_GR  ! Albedo gradient wrt grain size (visible)
! Following are in range of obersvational data, and give stable
! results over Greenland
!     PARAMETER ( AV_GR = 0.006 )
      PARAMETER ( AV_GR = 0.007 )  
!     PARAMETER ( AV_GR = 0.008 )
! Reduced the upper limit
!     DATA AMAX / 0.98,   0.7   /
      DATA AMAX / 0.95,   0.7   /
!-seg
      DO N=1,NTILES
        DO L=LAND1,LAND1+LAND_PTS-1
          I = LAND_INDEX(L)
          IF (SNOW_TILE(L,N) .GT. 0.) THEN
            REFF = RGRAIN(L,N) * ( 1. + 0.77*(COSZ(I)-0.65) )**2
            ALB_SNOW(L,N,1) = AMAX(1) - AV_GR*(SQRT(REFF) - SQRT(R0))
            ALB_SNOW(L,N,2) = AMAX(1) -
     &                        AV_GR*(SQRT(RGRAIN(L,N)) - SQRT(R0))
            ALB_SNOW(L,N,3) = AMAX(2) - 0.09*ALOG(REFF/R0)
            ALB_SNOW(L,N,4) = AMAX(2) - 0.09*ALOG(RGRAIN(L,N)/R0)
          ENDIF
        ENDDO
      ENDDO

      IF (NTILES .EQ. 1) THEN
        DO BAND=1,4
          DO N=2,NTYPE
            DO J=1,TILE_PTS(N)
              L = TILE_INDEX(J,N)
              ALB_SNOW(L,N,BAND) = ALB_SNOW(L,1,BAND)
            ENDDO
          ENDDO
        ENDDO
      ELSEIF (NTILES .EQ. 2*NELEV) THEN
        ! adjust from ntiles=2 to the ntypes - so ice ntile=2 -> ntype=9
        ! and ntile=1 -> ntype 1->8
        DO BAND=1,4
          DO N=ntype-nelev+1,ntype
            k=mod(n-1,nelev)+1
!              write(6,*)"alb snow: copying",K+NELEV,N
            DO J=1,TILE_PTS(N)
              L = TILE_INDEX(J,N)
              ALB_SNOW(L,N,BAND) = ALB_SNOW(L,K+NELEV,BAND)
            END DO
          END DO
        END DO
        DO BAND=1,4
          DO N=nelev+1,ntype-nelev
            k=mod(n-1,nelev)+1
!              write(6,*)"alb snow: copying",K,N
            DO J=1,TILE_PTS(N)
              L = TILE_INDEX(J,N)
              ALB_SNOW(L,N,BAND) = ALB_SNOW(L,K,BAND)
            END DO
          END DO
        END DO

      ENDIF

      RETURN
      END
*DECK SICEHT7A                                                          
*IF DEF,A03_7A,OR,DEF,A03_8A                                            
C *****************************COPYRIGHT******************************  
C (c) CROWN COPYRIGHT 2000, METEOROLOGICAL OFFICE, All Rights Reserved. 
C                                                                       
C Use, duplication or disclosure of this code is subject to the         
C restrictions as set forth in the contract.                            
C                                                                       
C                Meteorological Office                                  
C                London Road                                            
C                BRACKNELL                                              
C                Berkshire UK                                           
C                RG12 2SZ                                               
C                                                                       
C If no contract has been raised with this copy of the code, the use,   
C duplication or disclosure of it is strictly prohibited.  Permission   
C to do so must first be obtained in writing from the Head of Numerical 
C Modelling at the above address.                                       
C ******************************COPYRIGHT****************************** 
!!!  SUBROUTINE SICE_HTF----------------------------------------------- 
!!!                                                                     
!!!  Purpose: Updates sea-ice surface layer temperature.                
!!!                                                                     
!!!  Model            Modification history                              
!!! version  date                                                       
!!!                                                                     
!!! New deck for MOSES II. R. Essery, 4/4/00.                           
!!!                                                                     
!!!  Note: At present the formulation is so simple as to make this      
!!!        routine fairly trivial; but in future the formulation may    
!!!        be revised so as to make a separate routine more obviously   
!!!        worthwhile.                                                  
!!!                                                                     
!!!  Programming standard: Unified Model Documentation Paper No.4       
!!!                        version no.2, dated 18/1/90.                 
!!!                                                                     
!!!  System component covered: P241                                     
!!!                                                                     
!!!  Documentation: ??                                                  
!!!                                                                     
                                                                        
! Arguments:---------------------------------------------------------   
      SUBROUTINE SICE_HTF (                                             
     & POINTS,P_FIELD,P1,FLANDG,SIMLT,                               
     & DI,ICE_FRACTION,SURF_HT_FLUX_SICE,
     & TSTAR_SEA,TSTAR_SICE,TIMESTEP,                 
     & TI,SICE_MLT_HTF,SEA_ICE_HTF,                                     
     & LTIMER)                                                          
                                                                        
      IMPLICIT NONE                                                     
                                                                        
      LOGICAL LTIMER                                                    
                                                                        
      INTEGER                                                           
     & POINTS               ! IN No of gridpoints to be processed.      
     &,P_FIELD              ! IN Total Number of points on p-grid       
     &,P1                   ! IN First point of p grid to be processed  
                                                                        
      LOGICAL                                                           
     & LAND_MASK(P_FIELD)   ! IN Land mask (T for land, F for sea).     
     &,SIMLT                ! IN STASH flag for sea-ice melting ht flux.
                                                                        
      REAL                                                              
     & FLANDG(P_FIELD)      ! IN Land fraction.                 
     &,DI(P_FIELD)          ! IN "Equivalent thickness" of sea-ice (m). 
     &,ICE_FRACTION(P_FIELD)! IN Fraction of gridbox covered by sea-ice.
     &,SURF_HT_FLUX_SICE(P_FIELD)                               
!                           ! IN Net downward heat flux at      
!                           !    sea-ice surface W/m2           
     &,TSTAR_SICE(P_FIELD)  ! IN Sea-ice surface                
!                           !    temperature (K).               
     &,TSTAR_SEA(P_FIELD)   ! IN Open sea surface               
!                           !    temperature (K).               
     &,TIMESTEP             ! IN Timestep (s).                          
                                                                        
      REAL                                                              
     & TI(P_FIELD)          ! INOUT Sea-ice surface layer temperature(K)
!                           !       Set to TSTAR for unfrozen sea,      
!                           !       missing data for land.              
     &,SICE_MLT_HTF(P_FIELD)! INOUT Heat flux due to melting of sea-ice 
!                           !       (W/m2).                             
     &,SEA_ICE_HTF(P_FIELD) ! OUT Heat flux through sea-ice (W per sq m,
!                                 positive downwards).                  
                                                                        
      EXTERNAL TIMER                                                    
                                                                        
!  Common and local physical constants.                                 
*CALL C_0_DG_C                                                          
*CALL C_KAPPAI                                                          
*CALL C_SICEHC                                                          
                                                                        
      REAL                                                              
     & ASURF(P_FIELD)       ! Reciprocal areal heat capacity of         
!                             sea-ice surface layer (Km2/J).            
      INTEGER I             ! Loop Counter; horizontal field index.     
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('SICEHTF ',3)                                        
      ENDIF                                                             
                                                                        
      DO I=P1,P1+POINTS-1                                               
        IF (FLANDG(I).EQ.1.0) THEN                                    
          SEA_ICE_HTF(I)=0.0                                            
          TI(I) = 1.0E30                                                
        ELSE IF (ICE_FRACTION(I).LE.0.0) THEN                           
          SEA_ICE_HTF(I)=0.0                                            
          TI(I) = TFS                                                 
          TSTAR_SICE(I) = TFS                                         
        ELSE                                                            
          ASURF(I) = AI / ICE_FRACTION(I)                               
          SEA_ICE_HTF(I) = ICE_FRACTION(I)*KAPPAI*(TI(I) - TFS)/DI(I)   
          TI(I) = TI(I) + ASURF(I)*TIMESTEP*                            
     &                    (SURF_HT_FLUX_SICE(I) - SEA_ICE_HTF(I))       
          if (ti(I).lt.150) then
            write(6,*)"sicehtf: capping stupid cold sea-ice temp",ti(i)
            write(6,*)"sicehtf: frac, equiv. thick"
            write(6,*)"sicehtf:",ICE_FRACTION(I),DI(I)
            ti(i)=150.
          endif
          IF ( TI(I) .GT. TM ) THEN                                     
            IF (SIMLT) SICE_MLT_HTF(I) = SICE_MLT_HTF(I) +              
     &                                  (TI(I) - TM)/(ASURF(I)*TIMESTEP)
            TI(I) = TM                                                  
          ENDIF                                                         
        ENDIF                                                           
      ENDDO                                                             
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('SICEHTF ',4)                                        
      ENDIF                                                             
                                                                        
      RETURN                                                            
      END                                                               
*ENDIF                                                                  
*DECK SOILEV7A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 2000, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!**********************************************************************
! Subroutine to adjust canopy conductance and soil moisture extraction
! for soil evaporation beneath vegetation.
!
! Richard Essery. 6/4/00.
!
!**********************************************************************

      SUBROUTINE SOIL_EVAP (NPNTS,NSHYD,TILE_PTS,TILE_INDEX,
     &                      GSOIL,LAI,GS,WT_EXT)

      IMPLICIT NONE

      INTEGER
     & NPNTS                ! IN Number of gridpoints.
     &,NSHYD                ! IN Number of soil moisture layers.
     &,TILE_PTS             ! IN Number of points containing the
!                           !    given surface type.
     &,TILE_INDEX(NPNTS)    ! IN Indices on the land grid of the
!                           !    points containing the given
!                           !    surface type.

       REAL
     & GSOIL(NPNTS)         ! IN Soil surface conductance (m/s).
     &,LAI(NPNTS)           ! IN Leaf area index.

      REAL
     & GS(NPNTS)            ! INOUT Surface conductance (m/s).
     &,WT_EXT(NPNTS,NSHYD)  ! INOUT Fraction of evapotranspiration
!                           !       extracted from each soil layer.

       REAL
     & FSOIL(NPNTS)         ! Fraction of ground below canopy
!                           ! contributing to evaporation.

       INTEGER
     & J,K,L                ! Loop indices

        DO J=1,TILE_PTS
          L=TILE_INDEX(J)
          FSOIL(L) = EXP(-0.5*LAI(L))
        ENDDO

        DO K=2,NSHYD
          DO J=1,TILE_PTS
            L=TILE_INDEX(J)
            WT_EXT(L,K) = GS(L)*WT_EXT(L,K)/(GS(L) + FSOIL(L)*GSOIL(L))
          ENDDO
        ENDDO

        DO J=1,TILE_PTS
          L=TILE_INDEX(J)
          WT_EXT(L,1) = (GS(L)*WT_EXT(L,1) + FSOIL(L)*GSOIL(L))
     &                   / (GS(L) + FSOIL(L)*GSOIL(L))
          GS(L) = GS(L) + FSOIL(L)*GSOIL(L)
        ENDDO

      RETURN
      END
*ENDIF
*DECK BDY_EXPL7A
*IF DEF,A03_7A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!!!  SUBROUTINE BDY_EXPL-----------------------------------------------
!!!
!!!  Purpose: Calculate explicit boundary layer fluxes of heat, moisture
!!!           and momentum. Also calculates boundary layer exchange
!!!           coefficients required for implicit update of boundary
!!!           layer fluxes
!!!
!!!
!!! F.Hewer     <- programmer of some or all of previous code or changes
!!! C.Wilson    <- programmer of some or all of previous code or changes
!!!
!!!  Model            Modification history:
!!! version  Date
!!!
!!!   4.3  7/2/97     New deck. S Jackson
!!!   4.4 25/6/97     Modified for MOSES II tile model. R Essery
!!!   4.4 25/6/97     Move grid definitions up to BL_INTCT.  R.A.Betts
!!!  4.5    Jul. 98  Kill the IBM specific lines. (JCThil)
!!!   4.5  7/5/98     Set TSTAR, SNOW_SURF_HTF and SOIL_SURF_HTF to 0
!!!                   at all land points, to avoid problems of
!!!                   non-initialised data.  R.A.Betts
!!!   4.5 21/5/98     Add optional error check for negative surface
!!!                   temperature.  R.A.Betts
!!!
!!!  Programming standard: Unified Model Documentation Paper No 4,
!!!                        Version ?, dated ?.
!!!
!!!  System component covered: P24.
!!!
!!!  Project task:
!!!
!!!  Documentation: UMDP 24.
!!!
!!!---------------------------------------------------------------------

!    Arguments :-
      SUBROUTINE BDY_EXPL (

! IN values defining field dimensions and subset to be processed :
     & P_FIELD,U_FIELD,ROW_LENGTH,
     & N_P_ROWS,N_U_ROWS,P_POINTS,P1,U_POINTS,U1,

! IN values defining vertical grid of model atmosphere :
     & BL_LEVELS,P_LEVELS,AK,BK,AKH,BKH,DELTA_AK,DELTA_BK,
     & EXNER,

! IN sea/sea-ice data :
     & U_0,V_0,

! IN cloud data :
     & CF,QCF,QCL,CCA,CCB,CCT,

! IN everything not covered so far :
     & PSTAR,RAD_HR,RADHR_DIM1,
     & FB_SURF,U_S,T1_SD,Q1_SD,TV1_SD,
     & H_BLEND_OROG,Z0M_EFF,
     & TIMESTEP,L_BL_LSPICE,L_MOM,

! INOUT data :
     & Q,T,U,V,ZH,

! OUT Diagnostic not requiring STASH flags :
     & QW,TL,FQW,FTL,
     & RHOKH,RHOKM_UV,
     & TAUX,TAUY,ZHT,
     & BL_TYPE_1,BL_TYPE_2,BL_TYPE_3,BL_TYPE_4,BL_TYPE_5,BL_TYPE_6,

! OUT data required for tracer mixing :
     & NRML,

! OUT data required for 4D-VAR :
     & RHO_KM,

! OUT data required elsewhere in UM system :
     & DTRDZ,RDZ,RDZUV,
     & DU,DV,CT_CTQ,DQW,DTL,CQ_CM,

! LOGICAL LTIMER
     & LTIMER
     & )

      IMPLICIT NONE

!  Inputs :-

! (a) Defining horizontal grid and subset thereof to be processed.
!    Checked for consistency.

      INTEGER
     & P_FIELD                     ! IN No. of P-points in whole grid
!                                  !    (for dimensioning only).
     &,U_FIELD                     ! IN No. of UV-points in whole grid.
     &,ROW_LENGTH                  ! IN No. of points in one row.
     &,N_P_ROWS   ! IN No of P-rows being processed.
     &,N_U_ROWS   ! IN No of UV-rows being processed.
     &,P_POINTS   ! IN No of P-points being processed.
     &,P1         ! IN First P-point to be processed.
     &,U_POINTS   ! IN No of UV-points being processed.
     &,U1         ! IN First UV-point to be processed.

! (b) Defining vertical grid of model atmosphere.

      INTEGER
     & BL_LEVELS                   ! IN Max. no. of "boundary" levels
!                                  !    allowed. Assumed <= 30 for dim-
!                                  !    ensioning GAMMA in common deck
!                                  !    C_GAMMA used in SF_EXCH and KMKH
     &,P_LEVELS                    ! IN Total no. of vertical levels in
!                                  !    the model atmosphere.
      REAL
     & AK(P_LEVELS)                ! IN Hybrid 'A' for all levels.
     &,BK(P_LEVELS)                ! IN Hybrid 'B' for all levels.
     &,AKH(P_LEVELS+1)             ! IN Hybrid 'A' for layer interfaces.
     &,BKH(P_LEVELS+1)             ! IN Hybrid 'B' for layer interfaces.
     &,DELTA_AK(P_LEVELS)          ! IN Difference of hybrid 'A' across
!                                  !    layers (K-1/2 to K+1/2).
!                                  !    NB: Upper minus lower.
     &,DELTA_BK(P_LEVELS)          ! IN Difference of hybrid 'B' across
!                                  !     layers (K-1/2 to K+1/2).
!                                  !     NB: Upper minus lower.
     &,EXNER(P_FIELD,BL_LEVELS+1)  ! IN Exner function.  EXNER(,K) is
!                                  !    value for LOWER BOUNDARY of
!                                  !    level K.

! (d) Sea/sea-ice data.

      REAL
     & U_0(U_FIELD)                ! IN W'ly component of surface
!                                  !    current (m/s).
     &,V_0(U_FIELD)                ! IN S'ly component of surface
!                                  !    current (m/s).

! (e) Cloud data.

      REAL
     & CF(P_FIELD,BL_LEVELS)       ! IN Cloud fraction (decimal).
     &,QCF(P_FIELD,BL_LEVELS)      ! IN Cloud ice (kg per kg air)
     &,QCL(P_FIELD,BL_LEVELS)      ! IN Cloud liquid water (kg
!                                  !    per kg air).
     &,CCA(P_FIELD)                ! IN Convective Cloud Amount
!                                  !    (decimal)

      INTEGER
     & CCB(P_FIELD)                ! IN Convective Cloud Base
     &,CCT(P_FIELD)                ! IN Convective Cloud Top

! (f) Atmospheric + any other data not covered so far, incl control.

      REAL
     & PSTAR(P_FIELD)              ! IN Surface pressure (Pascals).
     &,TIMESTEP                    ! IN Timestep (seconds).
     &,H_BLEND_OROG(P_FIELD)       ! IN Blending height used as part of
!                                  !    effective roughness scheme
     &,Z0M_EFF(P_FIELD)            ! IN Effective grid-box roughness
!                                  !    length for momentum
     &,Q(P_FIELD,BL_LEVELS)        ! IN Specific humidity ( kg/kg air).
     &,T(P_FIELD,BL_LEVELS)        ! IN Atmospheric temperature (K).
     &,U(U_FIELD,BL_LEVELS)        ! IN W'ly wind component (m/s)
     &,V(U_FIELD,BL_LEVELS)        ! IN S'ly wind component (m/s)
!                                  !       length for momentum (m).

      LOGICAL
     & LTIMER                      ! IN Logical switch for TIMER diags
     &,L_BL_LSPICE                 ! IN Use if 3A large scale precip
     &,L_MOM                       ! IN Switch for convective momentum
!                                  !    transport.

!  Outputs :-
!-1 Diagnostic (or effectively so - includes coupled model requisites):-

!  (a) Calculated anyway (use STASH space from higher level) :-
!
      REAL
     & FQW(P_FIELD,BL_LEVELS)      ! OUT Moisture flux between layers
!                                  !     (kg per square metre per sec).
!                                  !     FQW(,1) is total water flux
!                                  !     from surface, 'E'.
     &,FTL(P_FIELD,BL_LEVELS)      ! OUT FTL(,K) contains net turbulent
!                                  !     sensible heat flux into layer K
!                                  !     from below; so FTL(,1) is the
!                                  !     surface sensible heat, H.(W/m2)
     &,RHOKH(P_FIELD,BL_LEVELS)    ! OUT Exchange coeffs for moisture.
     &,RHOKM_UV(U_FIELD,BL_LEVELS) ! OUT Exchange coefficients for
!                                  !     momentum (on UV-grid, with 1st
!                                  !     and last rows undefined or, at
!                                  !     present, set to "missing data")
     &,TAUX(U_FIELD,BL_LEVELS)     ! OUT W'ly component of surface wind
!                                  !     stress (N/sq m). (On UV-grid
!                                  !     with first and last rows
!                                  !     undefined or, at present,
!                                  !     set to missing data
     &,TAUY(U_FIELD,BL_LEVELS)     ! OUT S'ly component of surface wind
!                                  !     stress (N/sq m).  On UV-grid;
!                                  !     comments as per TAUX.
     &,RHO_KM(P_FIELD,2:BL_LEVELS) ! OUT Air density * turbulent mixing
!                                  !     coefficient for momentum before
!                                  !     interpolation.
     &,QW(P_FIELD,BL_LEVELS)       ! OUT Total water content, but
!                                  !     replaced by specific humidity
!                                  !     in LS_CLD.
     &,DTRDZ(P_FIELD,BL_LEVELS)    ! OUT -g.dt/dp for model layers.
     &,RDZ(P_FIELD,BL_LEVELS)      ! OUT RDZ(,1) is the reciprocal of
!                                  !     the height of level 1, i.e. of
!                                  !     the middle of layer 1.  For
!                                  !     K > 1, RDZ(,K) is the
!                                  !     reciprocal of the vertical
!                                  !     distance from level K-1 to
!                                  !     level K.
     &,RDZUV(U_FIELD,BL_LEVELS)    ! OUT RDZ (K > 1) on UV-grid.
!                                  !     Comments as per RHOKM (RDZUV).
     &,TL(P_FIELD,BL_LEVELS)       ! OUT Ice/liquid water temperature,
!                                  !     but replaced by T in LS_CLD.

       REAL
     & CT_CTQ(P_FIELD,BL_LEVELS)   ! OUT Coefficient in T and q
!                                        tri-diagonal implicit matrix
     &,CQ_CM(U_FIELD,BL_LEVELS)    ! OUT Coefficient in U and V
!                                        tri-diagonal implicit matrix
     &,DQW(P_FIELD,BL_LEVELS)      ! OUT BL increment to q field
     &,DTL(P_FIELD,BL_LEVELS)      ! OUT BL increment to T field
     &,DU(U_FIELD,BL_LEVELS)       ! OUT BL increment to u wind field
     &,DV(U_FIELD,BL_LEVELS)       ! OUT BL increment to v wind field

      INTEGER
     & NRML(P_FIELD)               ! OUT Number of model layers in the
!                                  !     Rapidly Mixing Layer; set to
!                                  !     zero in SF_EXCH for MOSES II.

!-2 Genuinely output, needed by other atmospheric routines :-

      REAL
     & ZH(P_FIELD)                 ! OUT Height above surface of top of
!                                  !     boundary layer (metres).

      INTEGER
     & RADHR_DIM1            ! DUMMY Used in 6A boundary layer scheme

      REAL
     & RAD_HR(RADHR_DIM1,BL_LEVELS)
!                            ! DUMMY Used in 6A boundary layer scheme
     &,FB_SURF(P_FIELD)      ! DUMMY Used in 6A boundary layer scheme
     &,U_S(P_FIELD)          ! DUMMY Used in 6A boundary layer scheme
     &,T1_SD(P_FIELD)        ! DUMMY Used in 6A boundary layer scheme
     &,Q1_SD(P_FIELD)        ! DUMMY Used in 6A boundary layer scheme
     &,TV1_SD(P_FIELD)       ! DUMMY Used in 6A boundary layer scheme
     &,ZHT(P_FIELD)          ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_1(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_2(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_3(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_4(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_5(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme
     &,BL_TYPE_6(P_FIELD)    ! DUMMY Used in 6A boundary layer scheme


!---------------------------------------------------------------------
!  External routines called :-

      EXTERNAL Z,HEAT_CON,SF_EXCH,BOUY_TQ,BTQ_INT,
     & KMKH,EX_FLUX_TQ,EX_FLUX_UV,IM_CAL_TQ,SICE_HTF,SF_EVAP,SF_MELT,
     & IM_CAL_UV,SCREEN_TQ
      EXTERNAL TIMER
*IF -DEF,SCMA
      EXTERNAL UV_TO_P,P_TO_UV
*ENDIF

!-----------------------------------------------------------------------
!   Symbolic constants (parameters) reqd in top-level routine :-

*CALL C_R_CP
*CALL C_G
*CALL C_LHEAT
*CALL C_GAMMA
*CALL SOIL_THICK
*IF DEF,MPP
! MPP Common block
*CALL PARVARS
*ENDIF

! Derived local parameters.

      REAL LCRCP,LS,LSRCP

      PARAMETER (
     & LCRCP=LC/CP           ! Evaporation-to-dT conversion factor.
     &,LS=LF+LC              ! Latent heat of sublimation.
     &,LSRCP=LS/CP           ! Sublimation-to-dT conversion factor.
     &  )

!-----------------------------------------------------------------------

!  Workspace :-

      REAL
     & BF(P_FIELD,BL_LEVELS)    ! A buoyancy parameter (beta F tilde)
     &,BQ(P_FIELD,BL_LEVELS)    ! A buoyancy parameter (beta q tilde).
     &,BT(P_FIELD,BL_LEVELS)    ! A buoyancy parameter (beta T tilde).
     &,BT_CLD(P_FIELD,BL_LEVELS)
!                               ! A buoyancy parameter for cloudy air
!                               ! on p,T,q-levels (full levels).
     &,BQ_CLD(P_FIELD,BL_LEVELS)! A buoyancy parameter for cloudy air
!                               ! on p,T,q-levels (full levels).
     &,A_QS(P_FIELD,BL_LEVELS)  ! Saturated lapse rate factor
!                               ! on p,T,q-levels (full levels).
     &,A_DQSDT(P_FIELD,BL_LEVELS)
!                               ! Saturated lapse rate factor
!                               ! on p,T,q-levels (full levels).
     &,DQSDT(P_FIELD,BL_LEVELS) ! Derivative of q_SAT w.r.t. T
     &,DELTAP(P_FIELD,BL_LEVELS)! Difference in pressure between levels
     &,DELTAP_UV(P_FIELD,BL_LEVELS)
!                               ! Difference in pressure between levels
!                               ! on UV points
     &,DTRDZ_UV(U_FIELD,BL_LEVELS)
!                               ! -g.dt/dp for model wind layers.
     &,DZL(P_FIELD,BL_LEVELS)   ! DZL(,K) is depth in m of layer
!                               ! K, i.e. distance from boundary
!                               ! K-1/2 to boundary K+1/2.
     &,DU_NT(U_FIELD,BL_LEVELS) ! non-turbulent inc. to u wind field
     &,DV_NT(U_FIELD,BL_LEVELS) ! non-turbulent inc. to v wind field
     &,DTL_NT(P_FIELD,BL_LEVELS)! non-turbulent inc. to TL field
     &,DQW_NT(P_FIELD,BL_LEVELS)! non-turbulent inc. to QW field
     &,P(P_FIELD,BL_LEVELS)     ! Pressure at model levels
     &,RHO(P_FIELD,BL_LEVELS)   ! Density of model layer
     &,RHOKM(P_FIELD,BL_LEVELS) ! Exchange coefficients for
!                               ! momentum on P-grid
     &,TV(P_FIELD,BL_LEVELS)    ! Virtual temp
     &,U_P(P_FIELD,BL_LEVELS)   ! U on P-grid.
     &,V_P(P_FIELD,BL_LEVELS)   ! V on P-grid.
     &,ZLB(P_FIELD,0:BL_LEVELS) ! ZLB(,K) is the height of the
!                               ! upper boundary of layer K
!                               ! ( = 0.0 for "K=0").


!  Local scalars :-

      REAL
     & WK         ! LOCAL 0.5 * DZL(I,K) * RDZ(I,K)
     &,WKM1       ! LOCAL 0.5 * DZL(I,K-1) * RDZ(I,K)

      INTEGER
     & I          ! LOCAL Loop counter (horizontal field index).
     &,K          ! LOCAL Loop counter (vertical level index).

      IF (LTIMER) THEN
        CALL TIMER('BDY_EXPL ',3)
      ENDIF

!-----------------------------------------------------------------------
!! 1.1 Initialise ZLB(,0) (to zero, of course, this being the height
!!     of the surface above the surface).
!-----------------------------------------------------------------------

      DO I=P1,P1+P_POINTS-1
        ZLB(I,0)=0.0
      ENDDO

!-----------------------------------------------------------------------
!! 1.2 Calculate layer depths and heights, and construct wind fields on
!!     P-grid.  This involves calling subroutines Z and UV_TO_P.
!!     Virtual temperature is also calculated, as a by-product.
!-----------------------------------------------------------------------
!  NB RDZ  TEMPORARILY used to return DELTA_Z_LOWER, the lower half
!     layer thickness

      DO K=1,BL_LEVELS
        CALL Z(P_POINTS,EXNER(P1,K),EXNER(P1,K+1),PSTAR(P1),
     &    AKH(K),BKH(K),Q(P1,K),QCF(P1,K),
     &    QCL(P1,K),T(P1,K),ZLB(P1,K-1),TV(P1,K),
     &    ZLB(P1,K),DZL(P1,K),RDZ(P1,K),LTIMER)

*IF -DEF,SCMA
        CALL UV_TO_P(U(U1,K),U_P(P1,K),
     &               U_POINTS,P_POINTS,ROW_LENGTH,N_U_ROWS)
        CALL UV_TO_P(V(U1,K),V_P(P1,K),
     &               U_POINTS,P_POINTS,ROW_LENGTH,N_U_ROWS)

*IF DEF,MPP
! DZL can contain incorrect data in halos, so call SWAPBOUNDS.
      CALL SWAPBOUNDS(DZL(P1,1),ROW_LENGTH,N_U_ROWS,1,0,BL_LEVELS)

*ENDIF
! du_nt 'borrowed to store dzl on uv grid
        CALL P_TO_UV (DZL(P1,K),DU_NT(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

*ELSE
      DO I = U1, U1-1+U_POINTS
        U_P(i,K) = U(i,K)
        V_P(i,K) = V(i,K)
      END DO
*ENDIF
      ENDDO

! set pressure array.
      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          P(I,K) = AK(K) + BK(K)*PSTAR(I)

! These will be used in new dynamics scheme - currently unused
          DTL_NT(I,K)=0.0
          DQW_NT(I,K)=0.0

        ENDDO

      ENDDO  ! end of loop over bl_levels

      DO K=BL_LEVELS,2,-1

        DO I=P1,P1+P_POINTS-1
          RDZ(I,K)=1.0/(RDZ(I,K)+(DZL(I,K-1)-RDZ(I,K-1)))
          DELTAP(I,K)=DELTA_AK(K) + PSTAR(I)*DELTA_BK(K)

          DTRDZ(I,K) = -G * TIMESTEP/ DELTAP(I,K)
!     &                  (DELTA_AK(K) + PSTAR(I)*DELTA_BK(K))
        ENDDO
      ENDDO

      DO I=P1,P1+P_POINTS-1
        RDZ(I,1)=1.0/RDZ(I,1)
        DELTAP(I,1)=DELTA_AK(1) + PSTAR(I)*DELTA_BK(1)
        DTRDZ(I,1) = -G * TIMESTEP/DELTAP(I,1)
!     &                  (DELTA_AK(1) + PSTAR(I)*DELTA_BK(1))
      ENDDO

      DO K=1,BL_LEVELS

! Calculate RDZUV here

        IF(K.GE.2)THEN
*IF -DEF,SCMA

          DO I=U1+ROW_LENGTH,U1-ROW_LENGTH+U_POINTS-1
            RDZUV(I,K) = 2.0 / ( DU_NT(I,K) + DU_NT(I,K-1) )
          ENDDO

!-----------------------------------------------------------------------
! 1.3 Set first and last rows to "missing data indicator"
!-----------------------------------------------------------------------

*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          RDZUV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1 + N_U_ROWS*ROW_LENGTH-1
          RDZUV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF

*ELSE
      DO I = U1, U1-1+U_POINTS
        RDZUV(i,K) = 2.0 / ( DZL(i,K) + DZL(i,K-1) )
      ENDDO
*ENDIF
        ENDIF   ! K .ge. 2

! Calculate DTRDZ_UV here.

*IF -DEF,SCMA
!        CALL P_TO_UV (DTRDZ(P1,K),DTRDZ_UV(U1+ROW_LENGTH,K),
!     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

        CALL P_TO_UV (DELTAP(P1,K),DELTAP_UV(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

        DO I=U1+ROW_LENGTH,U1+U_POINTS-ROW_LENGTH-1
          DTRDZ_UV(I,K) = -G * TIMESTEP / DELTAP_UV(I,K)
        ENDDO

*ELSE
      DO I = P1, P1-1+P_POINTS
        DTRDZ_UV(i,K) = DTRDZ(i,K)
      ENDDO
*ENDIF

      ENDDO ! loop over bl_levels

! "borrowed" du_nt reset to zero
! Non turbulent increments for new dynamics scheme (currently not used)
        DO K=1,BL_LEVELS
          DO I=1,U_FIELD
            DU_NT(I,K) =0.0
            DV_NT(I,K) =0.0
          ENDDO
        ENDDO

!-----------------------------------------------------------------------
!! Calculate total water content, QW and Liquid water temperature, TL
!-----------------------------------------------------------------------
      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          QW(I,K) = Q(I,K) + QCL(I,K) + QCF(I,K)              ! P243.10
          TL(I,K) = T(I,K) - LCRCP*QCL(I,K) - LSRCP*QCF(I,K)  ! P243.9
        ENDDO
      ENDDO

!-----------------------------------------------------------------------
!! Calculate buoyancy parameters BT and BQ.
!-----------------------------------------------------------------------
      CALL BOUY_TQ (
     & P_FIELD,P1,P_POINTS,BL_LEVELS
     &,P,CF,T,TL,Q,QCF,QCL
     &,BT,BQ,BF,BT_CLD,BQ_CLD,A_QS,A_DQSDT,DQSDT
     &,L_BL_LSPICE,LTIMER
     & )

!-----------------------------------------------------------------------
!! 5.  Turbulent exchange coefficients and "explicit" fluxes between
!!     model layers in the boundary layer (P243b, routine KMKH).
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
!!      Interpolate BT and BQ to interface between layers.
!-----------------------------------------------------------------------

      CALL BTQ_INT (
     & P_FIELD,P1,P_POINTS,BL_LEVELS
     &,BQ,BT,BF,DZL,RDZ,QW,QCF,TL
     &,L_BL_LSPICE,LTIMER
     &  )

!-----------------------------------------------------------------------
!! 5.3  Calculate the diffusion coefficients Km and Kh.
!-----------------------------------------------------------------------

! Repeat of KMKH calculation, could be passed in from KMKH.

      DO K=2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          WKM1 = 0.5 * DZL(I,K-1) * RDZ(I,K)
          WK = 0.5 * DZL(I,K) * RDZ(I,K)

! Calculate rho at K-1/2, from P243.111 :-
          RHO(I,K) =
     &     ( AKH(K) + BKH(K)*PSTAR(I) )    ! Pressure at K-1/2, P243.112
     &     /                               ! divided by ...
     &     ( R *                           ! R times ...
     &     ( TV(I,K-1)*WK + TV(I,K)*WKM1 ) ! TV at K-1/2, from P243.113
     &     )
        ENDDO
      ENDDO

      CALL KMKH (
     & P_FIELD,P1,P_POINTS,BL_LEVELS,
     & TIMESTEP,P,CCA,BT,BQ,BF,CF,DZL,DTRDZ,
     & RDZ,U_P,V_P,FTL,FQW,
     & RHO,Z0M_EFF,ZLB(1,0),H_BLEND_OROG,
     & QW,QCF,RHOKM,RHO_KM(1,2),RHOKH,TL,ZH,
     & CCB,CCT,L_MOM,
     & NRML,L_BL_LSPICE,LTIMER
     & )

!-----------------------------------------------------------------------
!! 5.4 Interpolate RHOKM's and CDR10M to uv points ready for the
!!     calculation of the explcit fluxes TAU_X and TAU_Y at levels
!!     above the surface.
!-----------------------------------------------------------------------

*IF DEF,MPP
! RHOKM(*,1) contains duff data in halos. The P_TO_UV can interpolate
! this into the real data, so first we must update east/west halos

      CALL SWAPBOUNDS(RHOKM(1,2),ROW_LENGTH,
     &                U_FIELD/ROW_LENGTH,1,1,BL_LEVELS-1)
*ENDIF

      DO K=2,BL_LEVELS

*IF -DEF,SCMA
        CALL P_TO_UV (RHOKM(P1,K),RHOKM_UV(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)
*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          RHOKM_UV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1+N_U_ROWS*ROW_LENGTH-1
          RHOKM_UV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF

*ELSE
      DO I = P1, P1-1+P_POINTS
        RHOKM_UV(i,K) = RHOKM(i,K)
      ENDDO
*ENDIF
      ENDDO ! loop over bl_levels

!-----------------------------------------------------------------------
!! 5.5 Calculation of explicit fluxes of T,Q
!-----------------------------------------------------------------------

      CALL EX_FLUX_TQ (
     &  P_POINTS,P_FIELD,P1,BL_LEVELS
     &, TL,QW,RDZ,FTL,FQW,RHOKH
     &, LTIMER
     &  )

!-----------------------------------------------------------------------
!! 5.6 Calculation of explicit fluxes of U and V.
!-----------------------------------------------------------------------

      CALL EX_FLUX_UV ( ! For U
     &  U_POINTS,U_FIELD,ROW_LENGTH,BL_LEVELS,U1
     &, U,U_0,RDZUV(1,2),RHOKM_UV,TAUX
     &, LTIMER
     &  )

      CALL EX_FLUX_UV ( ! For V
     &  U_POINTS,U_FIELD,ROW_LENGTH,BL_LEVELS,U1
     &, V,V_0,RDZUV(1,2),RHOKM_UV,TAUY
     &, LTIMER
     &  )

*IF -DEF,SCMA
!-----------------------------------------------------------------------
!! Set first and last rows to "missing data indicator"
!-----------------------------------------------------------------------
      DO K=2,BL_LEVELS
*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          TAUX(I,K)=1.E30
          TAUY(I,K)=1.E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1 + (N_U_ROWS-1)*ROW_LENGTH, U1 + N_U_ROWS*ROW_LENGTH -1
          TAUX(I,K)=1.E30
          TAUY(I,K)=1.E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF
      ENDDO
*ENDIF

!-----------------------------------------------------------------------
!! 6.  "Implicit" calculation of increments for TL and QW
!-----------------------------------------------------------------------

      CALL IM_BL_PT1 (
     & P_FIELD,P1,U_FIELD,U1
     &,P_POINTS,U_POINTS,ROW_LENGTH,BL_LEVELS
     &,DTRDZ,DTRDZ_UV,RHOKH(1,2),RHOKM_UV(1,2)
     &,RDZ,RDZUV(1,2),GAMMA
     &,DQW_NT,DTL_NT,DU_NT,DV_NT
     &,FQW,FTL,TAUX,TAUY
     &,CT_CTQ,DQW,DTL,CQ_CM,DU,DV
     &,LTIMER
     &)

      IF (LTIMER) THEN
        CALL TIMER('BDY_EXPL ',4)
      ENDIF

      RETURN
      END
*ENDIF
*DECK BDY_EXPL8A
*IF DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!!!  SUBROUTINE BDY_EXPL-----------------------------------------------
!!!
!!!  Purpose: Calculate explicit boundary layer fluxes of heat, moisture
!!!           and momentum. Also calculates boundary layer exchange
!!!           coefficients required for implicit update of boundary
!!!           layer fluxes
!!!
!!!
!!! F.Hewer     <- programmer of some or all of previous code or changes
!!! C.Wilson    <- programmer of some or all of previous code or changes
!!!
!!!  Model            Modification history:
!!! version  Date
!!!
!!!   4.3  7/2/97     New deck. S Jackson
!!!   4.4 25/6/97     Modified for MOSES II tile model. R Essery
!!!   4.4 25/6/97     Move grid definitions up to BL_INTCT.  R.A.Betts
!!!  4.5    Jul. 98  Kill the IBM specific lines. (JCThil)
!!!   4.5  7/5/98     Set TSTAR, SNOW_SURF_HTF and SOIL_SURF_HTF to 0
!!!                   at all land points, to avoid problems of
!!!                   non-initialised data.  R.A.Betts
!!!   4.5 21/5/98     Add optional error check for negative surface
!!!                   temperature.  R.A.Betts
!!!
!!!  Programming standard: Unified Model Documentation Paper No 4,
!!!                        Version ?, dated ?.
!!!
!!!  System component covered: P24.
!!!
!!!  Project task:
!!!
!!!  Documentation: UMDP 24.
!!!
!!!---------------------------------------------------------------------

!    Arguments :-
      SUBROUTINE BDY_EXPL (

! IN values defining field dimensions and subset to be processed :
     & P_FIELD,U_FIELD,ROW_LENGTH,
     & N_P_ROWS,N_U_ROWS,P_POINTS,P1,U_POINTS,U1,

! IN values defining vertical grid of model atmosphere :
     & BL_LEVELS,P_LEVELS,AK,BK,AKH,BKH,DELTA_AK,DELTA_BK,
     & EXNER,

! IN sea/sea-ice data :
     & U_0,V_0,

! IN cloud data :
     & CF,QCF,QCL,CCA,CCB,CCT,

! IN everything not covered so far :
     & PSTAR,RAD_HR,RADHR_DIM1,
     & FB_SURF,U_S,T1_SD,Q1_SD,TV1_SD,
     & H_BLEND_OROG,Z0M_EFF_GB,
     & TIMESTEP,L_BL_LSPICE,L_MOM,

! INOUT data :
     & Q,T,U,V,ZH,

! OUT Diagnostic not requiring STASH flags :
     & QW,TL,FQW,FTL,
     & RHOKH,RHOKM_UV,
     & TAUX,TAUY,ZHT,
     & BL_TYPE_1,BL_TYPE_2,BL_TYPE_3,BL_TYPE_4,BL_TYPE_5,BL_TYPE_6,

! OUT data required for tracer mixing :
     & NRML,

! OUT data required for 4D-VAR :
     & RHO_KM,

! OUT data required elsewhere in UM system :
     & DTRDZ,RDZ,RDZUV,
     & DU,DV,CT_CTQ,DQW,DTL,CQ_CM,

! LOGICAL LTIMER
     & LTIMER
     & )

      IMPLICIT NONE

!  Inputs :-

! (a) Defining horizontal grid and subset thereof to be processed.

      INTEGER
     & P_FIELD                     ! IN No. of P-points in whole grid
!                                     (for dimensioning only).
     &,P1                          ! IN First point to be processed in
!                                       P-grid.
     &,RADHR_DIM1                  ! IN Dimension of Radiative heating
!                                  !    rate (P_FIELD but used for
!                                  !    dynamic allocation)
     &,U_FIELD                     ! IN No. of UV-points in whole grid.
!                                     (Checked for consistency with
!                                     P_FIELD and P_ROWS; there must
!                                     be 1 less UV than P row.)
     &,U1                          ! IN First point to be processed in
!                                       U_V-grid.
     &,P_POINTS                    ! IN Number of P-grid points to be
!                                       processed.
     &,U_POINTS                    ! IN Number of U_V-grid points.
     &,N_P_ROWS                    ! IN No of P-rows being processed.
     &,N_U_ROWS                    ! IN No of UV-rows being processed.
     &,ROW_LENGTH                  ! IN No. of points in one row.
!                                     (Checked for consistency with
!                                     P_FIELD and N_ROWS.)

! (b) Defining vertical grid of model atmosphere.

      INTEGER
     & BL_LEVELS                   ! IN Max. no. of "boundary" levels
!                                     allowed.Assumed <= 30 for dim-
!                                     sioning of GAMMA in common deck
!                                     C_GAMMA used in SF_EXCH and KMKH
     &,P_LEVELS                    ! IN Total no. of vertical levels in
!                                       the model atmosphere.
      REAL
     & AK(P_LEVELS)                ! IN Hybrid 'A' for all levels.
     &,BK(P_LEVELS)                ! IN Hybrid 'B' for all levels.
     &,AKH(P_LEVELS+1)             ! IN Hybrid 'A' for layer interfaces.
     &,BKH(P_LEVELS+1)             ! IN Hybrid 'B' for layer interfaces.
     &,DELTA_AK(P_LEVELS)          ! IN Difference of hybrid 'A' across
!                                     layers (K-1/2 to K+1/2).
!                                     NB: Upper minus lower.
     &,DELTA_BK(P_LEVELS)          ! IN Difference of hybrid 'B' across
!                                     layers (K-1/2 to K+1/2).
!                                     NB: Upper minus lower.
     &,EXNER(P_FIELD,BL_LEVELS+1)  ! IN Exner function.  EXNER(,K) is
!                                     value for LOWER BOUNDARY of
!                                     level K.

! (c) Soil/vegetation/land surface parameters (mostly constant).

      LOGICAL
     & L_BL_LSPICE                 ! IN True if 3A large-scale ppn
!                                       scheme is used.
     &,L_MOM                       ! IN Switch for convective momentum
!                                  !    transport.

! (d) Sea/sea-ice data.

      REAL
     & U_0(U_FIELD)                ! IN W'ly component of surface
!                                     current (m/s).
     &,V_0(U_FIELD)                ! IN S'ly component of surface
!                                     current (m/s).

! (e) Cloud data.

      REAL
     & CF(P_FIELD,BL_LEVELS)       ! IN Cloud fraction (decimal).
     &,QCF(P_FIELD,BL_LEVELS)      ! IN Cloud ice (kg per kg air)
     &,QCL(P_FIELD,BL_LEVELS)      ! IN Cloud liquid water (kg
!                                     per kg air).
     &,CCA(P_FIELD)                ! IN Convective Cloud Amount
!                                     (decimal)

      INTEGER
     & CCB(P_FIELD)                ! IN Convective Cloud Base
     &,CCT(P_FIELD)                ! IN Convective Cloud Top

! (f) Atmospheric + any other data not covered so far, incl control.

      REAL
     & PSTAR(P_FIELD)              ! IN Surface pressure (Pascals).
     &,RAD_HR(RADHR_DIM1,BL_LEVELS)! IN Radiative heating rate (K/s).
     &,FB_SURF(P_FIELD)            ! IN Surface flux buoyancy over
!                                  !  density (m^2/s^3)
     &,U_S(P_FIELD)                ! IN Surface friction velocity (m/s)
     &,T1_SD(P_FIELD)              ! IN Standard deviation of turbulent
!                                     fluctuations of layer 1
!                                     temperature; for use in initiating
!                                     convection.
     &,Q1_SD(P_FIELD)              ! IN Standard deviation of turbulent
!                                     fluctuations of layer 1 humidity;
!                                     for use in initiating convection.
     &,TV1_SD(P_FIELD)             ! IN Standard deviation of turbulent
!                                     fluctuations of surface layer
!                                  !  virtual temperature (K).
     &,H_BLEND_OROG(P_FIELD)       ! IN Blending height used as part of
!                                     effective roughness scheme
     &,Z0M_EFF_GB(P_FIELD)         ! IN Effective grid-box roughness
!                                     length for momentum
     &,TIMESTEP                    ! IN Timestep (seconds).

      LOGICAL LTIMER               ! Logical switch for TIMER diags

!  In/outs :-

      REAL
     & Q(P_FIELD,BL_LEVELS)        ! INOUT Input:specific humidity
!                                      ( kg/kg air).
!                                      Output:total water content
!                                      (Q)(kg/Kg air).
     &,T(P_FIELD,BL_LEVELS)        ! INOUT Input:atmospheric temp(K)
!                                      Output:liquid/frozen water
!                                      temperature (TL) (K)
     &,U(U_FIELD,BL_LEVELS)        ! INOUT W'ly wind component (m/s)
     &,V(U_FIELD,BL_LEVELS)        ! INOUT S'ly wind component (m/s)
     &,ZH(P_FIELD)                 ! INOUT Height above surface of top
!                                      of boundary layer (metres).

!  Outputs :-
!-1 Diagnostic (or effectively so - includes coupled model requisites):-

!  (a) Calculated anyway (use STASH space from higher level) :-
!
      REAL
     & FQW(P_FIELD,BL_LEVELS)      ! OUT Moisture flux between layers
!                                     (kg per square metre per sec).
!                                     FQW(,1) is total water flux
!                                     from surface, 'E'.
     &,FTL(P_FIELD,BL_LEVELS)      ! OUT FTL(,K) contains net turbulent
!                                     sensible heat flux into layer K
!                                     from below; so FTL(,1) is the
!                                     surface sensible heat, H. (W/m2)
     &,RHOKH(P_FIELD,BL_LEVELS)    ! OUT Exchange coeffs for moisture.
     &,RHOKM_UV(U_FIELD,BL_LEVELS) ! OUT Exchange coefficients for
!                                     momentum (on UV-grid, with 1st
!                                     and last rows undefined (or, at
!                                     present, set to "missing data"))
     &,TAUX(U_FIELD,BL_LEVELS)     ! OUT W'ly component of surface wind
!                                     stress (N/sq m).(On UV-grid with
!                                     first and last rows undefined or
!                                     at present, set to missing data
     &,TAUY(U_FIELD,BL_LEVELS)     ! OUT S'ly component of surface wind
!                                     stress (N/sq m).  On UV-grid;
!                                     comments as per TAUX.
     &,ZHT(P_FIELD)                ! OUT Height below which there may be
!                                  !     turbulent mixing (m).
     &,BL_TYPE_1(P_FIELD)          ! OUT Indicator set to 1.0 if stable
!                                  !     b.l. diagnosed, 0.0 otherwise.
     &,BL_TYPE_2(P_FIELD)          ! OUT Indicator set to 1.0 if Sc over
!                                  !     stable surface layer diagnosed,
!                                  !     0.0 otherwise.
     &,BL_TYPE_3(P_FIELD)          ! OUT Indicator set to 1.0 if well
!                                  !     mixed b.l. diagnosed,
!                                  !     0.0 otherwise.
     &,BL_TYPE_4(P_FIELD)          ! OUT Indicator set to 1.0 if
!                                  !     decoupled Sc layer (not over
!                                  !     cumulus) diagnosed,
!                                  !     0.0 otherwise.
     &,BL_TYPE_5(P_FIELD)          ! OUT Indicator set to 1.0 if
!                                  !     decoupled Sc layer over cumulus
!                                  !     diagnosed, 0.0 otherwise.
     &,BL_TYPE_6(P_FIELD)          ! OUT Indicator set to 1.0 if a
!                                  !     cumulus capped b.l. diagnosed,
!                                  !     0.0 otherwise.
     &,RHO_KM(P_FIELD,2:BL_LEVELS) ! OUT Air density * turbulent mixing
!                                     coefficient for momentum before
!                                     interpolation.

!-2 Output needed by implicit surface and boundary layer routines :-

      REAL
     & DTRDZ(P_FIELD,BL_LEVELS)    ! OUT -g.dt/dp for model layers.
     &,QW(P_FIELD,BL_LEVELS)       ! OUT Total water content, but
!                                     replaced by specific humidity
!                                     in LS_CLD.
     &,TL(P_FIELD,BL_LEVELS)       ! OUT Ice/liquid water temperature,
!                                     but replaced by T in LS_CLD.
     &,CT_CTQ(P_FIELD,BL_LEVELS)   ! OUT Coefficient in T and q
!                                        tri-diagonal implicit matrix
     &,CQ_CM(U_FIELD,BL_LEVELS)    ! OUT Coefficient in U and V
!                                        tri-diagonal implicit matrix
     &,DQW(P_FIELD,BL_LEVELS)      ! OUT BL increment to q field
     &,DTL(P_FIELD,BL_LEVELS)      ! OUT BL increment to T field
     &,DU(U_FIELD,BL_LEVELS)       ! OUT BL increment to u wind field
     &,DV(U_FIELD,BL_LEVELS)       ! OUT BL increment to v wind field
     &,RDZ(P_FIELD,BL_LEVELS)      ! OUT RDZ(,1) is the reciprocal of
!                                     the height of level 1, i.e. of
!                                     the middle of layer 1.  For K > 1,
!                                     RDZ(,K) is the reciprocal
!                                     of the vertical distance
!                                     from level K-1 to level K.
     &,RDZUV(U_FIELD,BL_LEVELS)    ! OUT  RDZ (K > 1) on UV-grid.
!                                     Comments as per RHOKM (RDZUV).


      INTEGER
     & NRML(P_FIELD)      ! DUMMY Used in 7A boundary layer scheme



!---------------------------------------------------------------------
!  External routines called :-

      EXTERNAL Z,HEAT_CON,SMC_ROOT,SF_EXCH,BOUY_TQ,BTQ_INT,
     & KMKH,EX_FLUX_TQ,EX_FLUX_UV,IM_CAL_TQ,SICE_HTF,SF_EVAP,
     & IM_CAL_UV
      EXTERNAL TIMER
*IF -DEF,SCMA
      EXTERNAL UV_TO_P,P_TO_UV
*ENDIF

!-----------------------------------------------------------------------
!   Symbolic constants (parameters) reqd in top-level routine :-

*CALL C_R_CP
*CALL C_G
*CALL C_LHEAT
*CALL C_GAMMA
*IF DEF,MPP
! MPP Common block
*CALL PARVARS
*ENDIF

! Derived local parameters.

      REAL LCRCP,LS,LSRCP

      PARAMETER (
     & LCRCP=LC/CP           ! Evaporation-to-dT conversion factor.
     &,LS=LF+LC              ! Latent heat of sublimation.
     &,LSRCP=LS/CP           ! Sublimation-to-dT conversion factor.
     &  )

!-----------------------------------------------------------------------

!  Workspace :-

      REAL
     & A_DQSDT(P_FIELD,BL_LEVELS)
!                               ! Saturated lapse rate factor
!                               ! on p,T,q-levels (full levels).
     &,A_DQSDTM(P_FIELD,BL_LEVELS)
!                               ! Saturated lapse rate factor
!                               ! on intermediate levels (half levels).
     &,A_QS(P_FIELD,BL_LEVELS)  ! Saturated lapse rate factor
!                               ! on p,T,q-levels (full levels).
     &,A_QSM(P_FIELD,BL_LEVELS)
!                               ! Saturated lapse rate factor
!                               ! on intermediate levels (half levels).
     &,BF(P_FIELD,BL_LEVELS)    ! A buoyancy parameter (beta F tilde)
     &,BQ(P_FIELD,BL_LEVELS)    ! A buoyancy parameter for clear air
!                               ! on p,T,q-levels (full levels).
     &,BQ_CLD(P_FIELD,BL_LEVELS)! A buoyancy parameter for cloudy air
!                               ! on p,T,q-levels (full levels).
     &,BQM(P_FIELD,BL_LEVELS)   ! A buoyancy parameter for clear air
!                               ! on intermediate levels (half levels).
     &,BQM_CLD(P_FIELD,BL_LEVELS)
!                               ! A buoyancy parameter for cloudy air
!                               ! on intermediate levels (half levels).
     &,BT(P_FIELD,BL_LEVELS)    ! A buoyancy parameter for clear air
!                               ! on p,T,q-levels (full levels).
     &,BT_CLD(P_FIELD,BL_LEVELS)
!                               ! A buoyancy parameter for cloudy air
!                               ! on p,T,q-levels (full levels).
     &,BTM(P_FIELD,BL_LEVELS)   ! A buoyancy parameter for clear air
!                               ! on intermediate levels (half levels).
     &,BTM_CLD(P_FIELD,BL_LEVELS)
!                               ! A buoyancy parameter for cloudy air
!                               ! on intermediate levels (half levels).
     &,DB(P_FIELD,2:BL_LEVELS)
!                               ! Buoyancy jump across layer interface.
     &,DELTAP(P_FIELD,BL_LEVELS)! Difference in pressure between levels
     &,DELTAP_UV(P_FIELD,BL_LEVELS)
!                                 Difference in pressure between levels
!                                 on UV points
     &,DQSDT(P_FIELD,BL_LEVELS) ! Derivative of q_SAT w.r.t. T
     &,DTRDZ_UV(U_FIELD,BL_LEVELS)
!                                 -g.dt/dp for model wind layers.
     &,DZL(P_FIELD,BL_LEVELS)   ! DZL(,K) is depth in m of layer
!                                 K, i.e. distance from boundary
!                                 K-1/2 to boundary K+1/2.
     &,DU_NT(U_FIELD,BL_LEVELS) ! non-turbulent inc. to u wind field
     &,DV_NT(U_FIELD,BL_LEVELS) ! non-turbulent inc. to v wind field
     &,DTL_NT(P_FIELD,BL_LEVELS)! non-turbulent inc. to TL field
     &,DQW_NT(P_FIELD,BL_LEVELS)! non-turbulent inc. to QW field
!
     &,GRAD_Q_ADJ(P_FIELD)      ! Humidity gradient adjustment
!                                 for non-local mixing in unstable
!                                 turbulent boundary layer.
     &,GRAD_T_ADJ(P_FIELD)      ! Temperature gradient adjustment
!                                 for non-local mixing in unstable
!                                 turbulent boundary layer.
     &,P(P_FIELD,BL_LEVELS)     ! P(*,K) is pressure at full level k.
     &,P_HALF(P_FIELD,BL_LEVELS)! P_HALF(*,K) is pressure at half
!                               ! level k-1/2.
     &,Z_FULL(P_FIELD,BL_LEVELS)! Z_FULL(*,K) is height of full level k.
     &,Z_HALF(P_FIELD,BL_LEVELS)! Z_HALF(*,K) is height of half level
!                               ! k-1/2.
     &,Z_UV(P_FIELD,BL_LEVELS)  ! Z_UV(*,K) is height of half level
!                               ! k-1/2.
     &,Z_TQ(P_FIELD,BL_LEVELS)  ! Z_TQ(*,K) is height of half level
!                               ! k+1/2.
     &,RHO_FULL(P_FIELD,BL_LEVELS)
!                               ! RHO_FULL(*,K) is the density at full
!                               ! model level k.
     &,RHO_HALF(P_FIELD,BL_LEVELS)
!                               ! RHO_HALF(*,K) is the density at half
!                               ! level k-1/2.
     &,RHO_UV(P_FIELD,BL_LEVELS)
!                               ! RHO_UV(*,K) is the density at half
!                               ! level k-1/2.
     &,RHO_TQ(P_FIELD,BL_LEVELS)
!                               ! RHO_TQ(*,K) is the density at half
!                               ! level k+1/2.
     &,RHOKHZ(P_FIELD,2:BL_LEVELS)
!                               ! Non-local turbulent mixing
!                                 coefficient for heat and moisture.
     &,RHOKH_TOP(P_FIELD,2:BL_LEVELS)
!                               ! Non-local turbulent mixing coefficient
!                               ! for top-down mixing of heat and
!                               ! moisture.
     &,RHOKM(P_FIELD,BL_LEVELS) ! Turbulent mixing coefficient for
!                                 momentum on P-grid.
     &,RHOKMZ(P_FIELD,2:BL_LEVELS)
!                               ! Non-local turbulent mixing
!                                 coefficient for momentum.
     &,RHOKM_TOP(P_FIELD,2:BL_LEVELS)
!                               ! Non-local turbulent mixing coefficient
!                               ! for top-down mixing of momentum.
     &,TV(P_FIELD,BL_LEVELS)    ! Virtual temp
     &,U_P(P_FIELD,BL_LEVELS)   ! U on P-grid.
     &,V_P(P_FIELD,BL_LEVELS)   ! V on P-grid.
     &,ZLB(P_FIELD,0:BL_LEVELS) ! ZLB(,K) is the height of the
!                                 upper boundary of layer K
!                                 ( = 0.0 for "K=0").
       REAL
     & Z_LCL(P_FIELD)           ! Height of lifting condensation level.
!
      INTEGER
     & NTML(P_FIELD)            ! Number of model levels in the
!                                 turbulently mixed layer.
     &,NTDSC(P_FIELD)           ! Top level for turbulent mixing in
!                               ! cloud layer.
      LOGICAL
     & CUMULUS(P_FIELD)         ! Logical switch for cumulus in the b.l.
     &,UNSTABLE(P_FIELD)        ! Logical switch for unstable
!                                 surface layer.
     &,DSC(P_FIELD)             ! Flag set if decoupled stratocumulus
!                               ! layer found.

!  Local scalars :-

      REAL
     & WK         ! LOCAL 0.5 * DZL(I,K) * RDZ(I,K)
     &,WKM1       ! LOCAL 0.5 * DZL(I,K-1) * RDZ(I,K)

      INTEGER
     & I          ! LOCAL Loop counter (horizontal field index).
     &,K          ! LOCAL Loop counter (vertical level index).

      IF (LTIMER) THEN
        CALL TIMER('BDY_EXPL ',3)
      ENDIF
!-----------------------------------------------------------------------
!! 1.  Perform calculations in what the documentation describes as
!!     subroutine Z_DZ.  In fact, a separate subroutine isn't used.
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
!! 1.1 Initialise ZLB(,0) (to zero, of course, this being the height
!!     of the surface above the surface).
!-----------------------------------------------------------------------

      DO I=P1,P1+P_POINTS-1
        ZLB(I,0)=0.0
      ENDDO

!-----------------------------------------------------------------------
!! 1.2 Calculate layer depths and heights, and construct wind fields on
!!     P-grid.  This involves calling subroutines Z and UV_TO_P.
!!     Virtual temperature is also calculated, as a by-product.
!-----------------------------------------------------------------------

!  NB RDZ  TEMPORARILY used to return DELTA_Z_LOWER, the lower half
!     layer thickness

      DO K=1,BL_LEVELS
        CALL Z(P_POINTS,EXNER(P1,K),EXNER(P1,K+1),PSTAR(P1),
     &    AKH(K),BKH(K),Q(P1,K),QCF(P1,K),
     &    QCL(P1,K),T(P1,K),ZLB(P1,K-1),TV(P1,K),
     &    ZLB(P1,K),DZL(P1,K),RDZ(P1,K),LTIMER)
      ENDDO
      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          Z_FULL(I,K) = ZLB(I,K) - 0.5 * DZL(I,K)
          Z_HALF(I,K) = ZLB(I,K-1)
          Z_UV(I,K) = ZLB(I,K-1)
          Z_TQ(I,K) = ZLB(I,K)
       ENDDO
      ENDDO
      DO K=1,BL_LEVELS

*IF -DEF,SCMA
        CALL UV_TO_P(U(U1,K),U_P(P1,K),
     &               U_POINTS,P_POINTS,ROW_LENGTH,N_U_ROWS)
        CALL UV_TO_P(V(U1,K),V_P(P1,K),
     &               U_POINTS,P_POINTS,ROW_LENGTH,N_U_ROWS)


! du_nt 'borrowed to store dzl on uv grid
        CALL P_TO_UV (DZL(P1,K),DU_NT(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

*ELSE
      DO I = P1, P1-1+P_POINTS
        U_P(i,K) = U(i,K)
        V_P(i,K) = V(i,K)
      ENDDO
*ENDIF
      ENDDO

! set pressure array.
      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          P(I,K) = AK(K) + BK(K)*PSTAR(I)
          P_HALF(I,K) = AKH(K) + BKH(K)*PSTAR(I)

! These will be used in new dynamics scheme - currently unused
          DTL_NT(I,K)=0.0
          DQW_NT(I,K)=0.0

        ENDDO

      ENDDO  ! end of loop over bl_levels

      DO K=BL_LEVELS,2,-1

        DO I=P1,P1+P_POINTS-1
          RDZ(I,K)=1.0/(RDZ(I,K)+(DZL(I,K-1)-RDZ(I,K-1)))
          DELTAP(I,K)=DELTA_AK(K) + PSTAR(I)*DELTA_BK(K)

          DTRDZ(I,K) = -G * TIMESTEP/ DELTAP(I,K)
!     &                  (DELTA_AK(K) + PSTAR(I)*DELTA_BK(K))
        ENDDO
      ENDDO

      DO I=P1,P1+P_POINTS-1
        RDZ(I,1)=1.0/RDZ(I,1)

        DELTAP(I,1)=DELTA_AK(1) + PSTAR(I)*DELTA_BK(1)
        DTRDZ(I,1) = -G * TIMESTEP/DELTAP(I,1)
!     &                  (DELTA_AK(1) + PSTAR(I)*DELTA_BK(1))
      ENDDO

      DO K=1,BL_LEVELS


! Calculate RDZUV here

        IF(K.GE.2)THEN
*IF -DEF,SCMA

          DO I=U1+ROW_LENGTH,U1-ROW_LENGTH+U_POINTS-1
            RDZUV(I,K) = 2.0 / ( DU_NT(I,K) + DU_NT(I,K-1) )
          ENDDO

!-----------------------------------------------------------------------
! 1.3 Set first and last rows to "missing data indicator"
!-----------------------------------------------------------------------

*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          RDZUV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1 + N_U_ROWS*ROW_LENGTH-1
          RDZUV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF


*ELSE
      DO I = P1, P1-1+P_POINTS
        RDZUV(i,K) = 2.0 / ( DZL(i,K) + DZL(i,K-1) )
      ENDDO
*ENDIF
        ENDIF   ! K .ge. 2

! Calculate DTRDZ_UV here.

*IF -DEF,SCMA
!        CALL P_TO_UV (DTRDZ(P1,K),DTRDZ_UV(U1+ROW_LENGTH,K),
!     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

        CALL P_TO_UV (DELTAP(P1,K),DELTAP_UV(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

        DO I=U1+ROW_LENGTH,U1+U_POINTS-ROW_LENGTH-1
          DTRDZ_UV(I,K) = -G * TIMESTEP / DELTAP_UV(I,K)
        ENDDO

*ELSE
      DO I = P1, P1-1+P_POINTS
        DTRDZ_UV(i,K) = DTRDZ(i,K)
      ENDDO
*ENDIF

      ENDDO ! loop over bl_levels

! "borrowed" du_nt reset to zero
! Non turbulent increments for new dynamics scheme (currently not used)
        DO K=1,BL_LEVELS
          DO I=1,U_FIELD
            DU_NT(I,K) =0.0
            DV_NT(I,K) =0.0
          ENDDO
        ENDDO

!-----------------------------------------------------------------------
!! Calculate total water content, QW and Liquid water temperature, TL
!-----------------------------------------------------------------------

      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          QW(I,K) = Q(I,K) + QCL(I,K) + QCF(I,K)              ! P243.10
          TL(I,K) = T(I,K) - LCRCP*QCL(I,K) - LSRCP*QCF(I,K)  ! P243.9
        ENDDO
      ENDDO


!-----------------------------------------------------------------------
!! 5.  Turbulent exchange coefficients and "explicit" fluxes between
!!     model layers in the boundary layer (P243b, routine KMKH).
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
!! 5.1  Calculate bouyancy parameters BT and BQ.
!-----------------------------------------------------------------------

      CALL BOUY_TQ (
     & P_FIELD,P1
     &,P_POINTS,BL_LEVELS
     &,P,CF,T,TL,Q,QCF,QCL
     &,BT,BQ,BF,BT_CLD,BQ_CLD,A_QS,A_DQSDT,DQSDT
     &,L_BL_LSPICE,LTIMER
     &  )


!-----------------------------------------------------------------------
!! 5.2  Interpolate BT and BQ to half levels.
!-----------------------------------------------------------------------

      CALL BTQ_INT (
     & P_FIELD,P1,P_POINTS,BL_LEVELS
     &,DZL,RDZ,BQ,BT,BQ_CLD,BT_CLD,A_QS,A_DQSDT
     &,BQM,BTM,BQM_CLD,BTM_CLD,A_QSM,A_DQSDTM
     &,LTIMER
     &  )


!-----------------------------------------------------------------------
!! 5.3  Calculate the diffusion coefficients Km and Kh.
!-----------------------------------------------------------------------

      DO K=1,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          RHO_FULL(I,K) =
     &     ( AK(K) + BK(K)*PSTAR(I) )      ! Pressure at K
     &     /                               ! divided by ...
     &     ( R * TV(I,K) )                 ! R times TV at K
        ENDDO
      ENDDO
      DO K=2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          WKM1 = 0.5 * DZL(I,K-1) * RDZ(I,K)
          WK = 0.5 * DZL(I,K) * RDZ(I,K)
          RHO_HALF(I,K) = WK*RHO_FULL(I,K-1) + WKM1*RHO_FULL(I,K)
        ENDDO
      ENDDO
      DO K=2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          RHO_UV(I,K) = RHO_HALF(I,K)
        ENDDO
      ENDDO
      DO K=1,BL_LEVELS-1
        DO I=P1,P1+P_POINTS-1
          RHO_TQ(I,K) = RHO_HALF(I,K+1)
        ENDDO
      ENDDO
      DO I=P1,P1+P_POINTS-1
        RHO_HALF(I,1) = RHO_FULL(I,1)
        RHO_UV(I,1) = RHO_FULL(I,1)
        RHO_TQ(I,BL_LEVELS) = RHO_FULL(I,BL_LEVELS)
      ENDDO

      CALL KMKHZ (
     & P_FIELD,P1,P_POINTS,BL_LEVELS,
     & P,P_HALF,T,Q,QCL,QCF,BT,BQ,CF,DZL,
     & RDZ,DELTAP,FTL,FQW,
     & Z0M_EFF_GB,Z_FULL,Z_HALF,Z_UV,Z_TQ,U_S,FB_SURF,
     & QW,RHOKMZ(1,2),DB(1,2),RHOKHZ(1,2),TL,ZH,TV1_SD,T1_SD,Q1_SD,
     & NTML,GRAD_T_ADJ,GRAD_Q_ADJ,
     & BTM,BQM,DQSDT,BTM_CLD,BQM_CLD,A_QSM,A_DQSDTM,RHO_TQ,RHO_UV,
     & RAD_HR,RADHR_DIM1,CUMULUS,Z_LCL,RHOKM_TOP(1,2),RHOKH_TOP(1,2),
     & ZHT,BL_TYPE_1,BL_TYPE_2,BL_TYPE_3,BL_TYPE_4,BL_TYPE_5,BL_TYPE_6,
     & UNSTABLE,NTDSC,DSC,
     & LTIMER
     & )

      CALL EX_COEF (
     & P_FIELD,P1,P_POINTS,BL_LEVELS
     &,CCB,CCT,NTML,L_MOM
     &,CCA,DZL,RDZ,DB(1,2),U_P,V_P
     &,RHO_HALF,ZH,Z_HALF,Z0M_EFF_GB,H_BLEND_OROG
     &,CUMULUS,Z_LCL
     &,RHOKM,RHOKH
     &,LTIMER
     & )

      CALL KMKH (
     & P_FIELD,P1,P_POINTS,BL_LEVELS
     &,RHOKM,RHO_KM(1,2),RHOKH
     &,RHOKMZ(1,2),RHOKHZ(1,2)
     &,NTML,CUMULUS,RHOKM_TOP(1,2),RHOKH_TOP(1,2)
     &,UNSTABLE,NTDSC,DSC
     &,LTIMER
     & )

!
!-----------------------------------------------------------------------
!! 5.4 Interpolate RHOKM's and CDR10M to uv points ready for the
!!     calculation of the explcit fluxes TAU_X and TAU_Y at levels
!!     above the surface.
!-----------------------------------------------------------------------

*IF DEF,MPP
! RHOKM(*,1) contains duff data in halos. The P_TO_UV can interpolate
! this into the real data, so first we must update east/west halos

      CALL SWAPBOUNDS(RHOKM(P1,1),ROW_LENGTH,N_U_ROWS,1,0,1)
      CALL SWAPBOUNDS(RHOKM(1,2),ROW_LENGTH,
     &                U_FIELD/ROW_LENGTH,1,1,BL_LEVELS-1)
*ENDIF

      DO K=2,BL_LEVELS

*IF -DEF,SCMA
        CALL P_TO_UV (RHOKM(P1,K),RHOKM_UV(U1+ROW_LENGTH,K),
     &     P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)
*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          RHOKM_UV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1+N_U_ROWS*ROW_LENGTH-1
          RHOKM_UV(I,K) = 1.0E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF

*ELSE
      DO I = P1, P1-1+P_POINTS
        RHOKM_UV(i,K) = RHOKM(i,K)
      ENDDO
*ENDIF
      ENDDO ! loop over bl_levels

      IF (L_BL_LSPICE) THEN

        DO K = 1,BL_LEVELS
          DO I = P1,P1+P_POINTS-1
            QW(I,K) = Q(I,K) + QCL(I,K)
            TL(I,K) = T(I,K) - LCRCP * QCL(I,K)
          ENDDO
        ENDDO

      ENDIF

!-----------------------------------------------------------------------
!! 5.5 Calculation of explicit fluxes of T,Q
!-----------------------------------------------------------------------


      CALL EX_FLUX_TQ (
     &  P_POINTS,P_FIELD,P1,BL_LEVELS
     &, TL,QW,RDZ,FTL,FQW,RHOKH
     &, RHOKHZ(1,2)
     &, GRAD_T_ADJ,GRAD_Q_ADJ
     &, NTML
     &, LTIMER
     &  )

!-----------------------------------------------------------------------
!! 5.6 Calculation of explicit fluxes of U and V.
!-----------------------------------------------------------------------


      CALL EX_FLUX_UV ( ! For U
     &  U_POINTS,U_FIELD,ROW_LENGTH,BL_LEVELS,U1
     &, U,U_0,RDZUV(1,2),RHOKM_UV,TAUX
     &, LTIMER
     &  )


      CALL EX_FLUX_UV ( ! For V
     &  U_POINTS,U_FIELD,ROW_LENGTH,BL_LEVELS,U1
     &, V,V_0,RDZUV(1,2),RHOKM_UV,TAUY
     &, LTIMER
     &  )


*IF -DEF,SCMA
!-----------------------------------------------------------------------
!! Set first and last rows to "missing data indicator"
!-----------------------------------------------------------------------
      DO K=2,BL_LEVELS
*IF DEF,MPP
      IF (attop) THEN
*ENDIF
        DO I=U1,U1+ROW_LENGTH-1
          TAUX(I,K)=1.E30
          TAUY(I,K)=1.E30
        ENDDO
*IF DEF,MPP
      ENDIF

      IF (atbase) THEN
*ENDIF
        DO I= U1 + (N_U_ROWS-1)*ROW_LENGTH, U1 + N_U_ROWS*ROW_LENGTH -1
          TAUX(I,K)=1.E30
          TAUY(I,K)=1.E30
        ENDDO
*IF DEF,MPP
      ENDIF
*ENDIF
      ENDDO
*ENDIF


!-----------------------------------------------------------------------
!! 6.  "Implicit" calculation of increments for TL and QW
!-----------------------------------------------------------------------

      CALL IM_BL_PT1 (
     & P_FIELD,P1,U_FIELD,U1
     &,P_POINTS,U_POINTS,ROW_LENGTH,BL_LEVELS
     &,DTRDZ,DTRDZ_UV,RHOKH(1,2),RHOKM_UV(1,2)
     &,RDZ,RDZUV(1,2),GAMMA
     &,DQW_NT,DTL_NT,DU_NT,DV_NT
     &,FQW,FTL,TAUX,TAUY
     &,CT_CTQ,DQW,DTL,CQ_CM,DU,DV
     &,LTIMER
     &)


      IF (LTIMER) THEN
        CALL TIMER('BDY_EXPL ',4)
      ENDIF

      RETURN
      END
*ENDIF
*DECK BDY_IMPL8A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!!!  SUBROUTINE BDY_IMPL-----------------------------------------------
!!!
!!!  Purpose: Calculate implicit correction to boundary layer fluxes of
!!!           heat, moisture and momentum.
!!!
!!!
!!! F.Hewer     <- programmer of some or all of previous code or changes
!!! C.Wilson    <- programmer of some or all of previous code or changes
!!!
!!!  Model            Modification history:
!!! version  Date
!!!
!!!   4.3  7/2/97     New deck. S Jackson
!!!   4.4 25/6/97     Modified for MOSES II tile model. R Essery
!!!   4.4 25/6/97     Move grid definitions up to BL_INTCT.  R.A.Betts
!!!  4.5    Jul. 98  Kill the IBM specific lines. (JCThil)
!!!   4.5  7/5/98     Set TSTAR, SNOW_SURF_HTF and SOIL_SURF_HTF to 0
!!!                   at all land points, to avoid problems of
!!!                   non-initialised data.  R.A.Betts
!!!   4.5 21/5/98     Add optional error check for negative surface
!!!                   temperature.  R.A.Betts
!!!
!!!  Programming standard: Unified Model Documentation Paper No 4,
!!!                        Version ?, dated ?.
!!!
!!!  System component covered: P24.
!!!
!!!  Project task:
!!!
!!!  Documentation: UMDP 24.
!!!
!!!---------------------------------------------------------------------

!    Arguments :-
      SUBROUTINE BDY_IMPL (

! IN values defining field dimensions and subset to be processed :
     & P_FIELD,P1,U_FIELD,U1,P_POINTS,U_POINTS,ROW_LENGTH,

! IN values defining vertical grid of model atmosphere :
     & BL_LEVELS,

! IN data :
     & RHOKH,RHOKM_UV,RDZ,RDZUV,

! INOUT data :
     & Q,T,U,V,QW,TL,FQW,FTL,TAUX,TAUY,
     & DU,DV,CT_CTQ,DQW,DTL,CQ_CM,

! LOGICAL LTIMER
     & LTIMER
     & )

      IMPLICIT NONE

!  Inputs :-

! (a) Defining horizontal grid and subset thereof to be processed.

      INTEGER
     & P_FIELD                     ! IN No. of P-points in whole grid
!                                     (for dimensioning only).
     &,P1                          ! IN First point to be processed in
!                                       P-grid.
     &,U_FIELD                     ! IN No. of UV-points in whole grid.
!                                     (Checked for consistency with
!                                     P_FIELD and P_ROWS; there must
!                                     be 1 less UV than P row.)
     &,U1                          ! IN First point to be processed in
!                                       U_V-grid.
     &,P_POINTS                    ! IN Number of P-grid points to be
!                                       processed.
     &,U_POINTS                    ! IN Number of U_V-grid points.
     &,ROW_LENGTH                  ! IN No. of points in one row.
!                                     (Checked for consistency with
!                                     P_FIELD and N_ROWS.)

! (b) Defining vertical grid of model atmosphere.

      INTEGER
     & BL_LEVELS                   ! IN Max. no. of "boundary" levels
!                                     allowed.Assumed <= 30 for dim-
!                                     sioning of GAMMA in common deck
!                                     C_GAMMA used in SF_EXCH and KMKH

!  In :-

      REAL
     & RHOKH(P_FIELD,BL_LEVELS)    ! IN Exchange coeffs for moisture.
     &,RHOKM_UV(U_FIELD,BL_LEVELS) ! IN Exchange coefficients for
!                                     momentum (on UV-grid, with 1st
!                                     and last rows undefined (or, at
!                                     present, set to "missing data"))
     &,RDZ(P_FIELD,BL_LEVELS)      ! IN RDZ(,1) is the reciprocal of the
!                                     height of level 1, i.e. of the
!                                     middle of layer 1.  For K > 1,
!                                     RDZ(,K) is the reciprocal
!                                     of the vertical distance
!                                     from level K-1 to level K.
     &,RDZUV(U_FIELD,BL_LEVELS)    ! IN  RDZ (K > 1) on UV-grid.
!                                     Comments as per RHOKM (RDZUV).

      LOGICAL LTIMER               ! Logical switch for TIMER diags

!  In/outs :-

      REAL
     & Q(P_FIELD,BL_LEVELS)        ! INOUT Input:specific humidity
!                                      ( kg/kg air).
!                                      Output:total water content
!                                      (Q)(kg/Kg air).
     &,T(P_FIELD,BL_LEVELS)        ! INOUT Input:atmospheric temp(K)
!                                      Output:liquid/frozen water
!                                      temperature (TL) (K)
     &,U(U_FIELD,BL_LEVELS)        ! INOUT W'ly wind component (m/s)
     &,V(U_FIELD,BL_LEVELS)        ! INOUT S'ly wind component (m/s)
     &,QW(P_FIELD,BL_LEVELS)       ! INOUT Total water content, but
!                                      replaced by specific humidity
!                                      in LS_CLD.
     &,TL(P_FIELD,BL_LEVELS)       ! INOUT Ice/liquid water temperature,
!                                      but replaced by T in LS_CLD.
     &,FQW(P_FIELD,BL_LEVELS)      ! INOUT Moisture flux between layers
!                                      (kg per square metre per sec).
!                                      FQW(,1) is total water flux
!                                      from surface, 'E'.
     &,FTL(P_FIELD,BL_LEVELS)      ! INOUT FTL(,K) contains net
!                                      turbulent sensible heat flux into
!                                      layer K from below; so FTL(,1) is
!                                      the surface sensible heat, H.
!                                      (W/m2)
     &,TAUX(U_FIELD,BL_LEVELS)     ! INOUT W'ly component of surface
!                                      wind stress (N/sq m).(On UV-grid
!                                      with first and last rows
!                                      undefined or at present, set to
!                                      missing data
     &,TAUY(U_FIELD,BL_LEVELS)     ! INOUT S'ly component of surface
!                                      wind stress (N/sq m).  On
!                                      UV-grid; comments as per TAUX.
     &,CT_CTQ(P_FIELD,BL_LEVELS)   ! INOUT Coefficient in T and q
!                                          tri-diagonal implicit matrix
     &,CQ_CM(U_FIELD,BL_LEVELS)    ! INOUT Coefficient in U and V
!                                          tri-diagonal implicit matrix
     &,DQW(P_FIELD,BL_LEVELS)      ! INOUT BL increment to q field
     &,DTL(P_FIELD,BL_LEVELS)      ! INOUT BL increment to T field
     &,DU(U_FIELD,BL_LEVELS)       ! INOUT BL increment to u wind field
     &,DV(U_FIELD,BL_LEVELS)       ! INOUT BL increment to v wind field

!-----------------------------------------------------------------------
!   Symbolic constants (parameters) reqd in top-level routine :-

*CALL C_R_CP
*CALL C_GAMMA
*IF DEF,MPP
! MPP Common block
*CALL PARVARS
*ENDIF

!  Local scalars :-

      INTEGER
     & I          ! LOCAL Loop counter (horizontal field index).
     &,K          ! LOCAL Loop counter (vertical level index).

      IF (LTIMER) THEN
        CALL TIMER('BDY_IMPL ',3)
      ENDIF

      CALL IM_BL_PT2 (
     & P_FIELD,P1,U_FIELD,U1
     &,P_POINTS,U_POINTS,ROW_LENGTH,BL_LEVELS
     &,RHOKH(1,2),RHOKM_UV(1,2)
     &,RDZ,RDZUV(1,2),GAMMA
     &,CT_CTQ,DQW,DTL,CQ_CM,DU,DV
     &,FQW,FTL,TAUX,TAUY
     &,QW,TL,U,V
     &,LTIMER
     &)


!-----------------------------------------------------------------------
!! 6.1 Convert FTL to sensible heat flux in Watts per square metre.
!      Also, IMPL_CAL only updates FTL_TILE(*,1) and FQW_TILE(*,1)
!      over sea points, so copy this to remaining tiles
!-----------------------------------------------------------------------

      DO K=2,BL_LEVELS
Cfpp$ Select(CONCUR)
        DO  I=P1,P1+P_POINTS-1
          FTL(I,K) = FTL(I,K)*CP
        ENDDO
      ENDDO

!7.1 Copy T and Q from workspace to INOUT space.

      DO K=1,BL_LEVELS
Cfpp$  Select(CONCUR)
        DO I=P1,P1+P_POINTS-1
          T(I,K)=TL(I,K)
          Q(I,K)=QW(I,K)
        ENDDO
      ENDDO

!-----------------------------------------------------------------------
! 10 Set RHOKH, the coefficients required for tracer mixing.
!    Required 5B and after due to change in contents of RHOKH in rest
!    of routine.
!-----------------------------------------------------------------------

      DO K = 2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1
          RHOKH(I,K) = GAMMA(K)*RHOKH(I,K)*RDZ(I,K)
        ENDDO
      ENDDO

      IF (LTIMER) THEN
        CALL TIMER('BDY_IMPL ',4)
      ENDIF

      RETURN
      END
*ENDIF
*DECK IMBLPT18A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!!!  SUBROUTINE IM_BL_PT1 ----------------------------------------------
!!!
!!!  Purpose: Calculate increments for
!!!           T and Q in the boundary layer, using an
!!!           implicit numerical scheme.  The tridiagonal matrices are
!!!           inverted using simple Gaussian elimination.
!!!
!!!
!!!  Model           Modification history
!!! version  Date
CLL  4.5    Jul. 98  Kill the IBM specific lines (JCThil)
!!!
!!!  JJ  <- Programmers of some or all of previous code or changes
!!!
!!!
!!!  Programming standard: UM Documentation Paper No 4, Version 2,
!!!                        dated 18/1/90
!!!
!!!  System component covered: P244
!!!
!!!  Project task: P24
!!!
!!!  Documentation: UM Documentation Paper No 24.
!!!
!!!---------------------------------------------------------------------
!!  Arguments :-
      SUBROUTINE IM_BL_PT1 (
     & P_FIELD,P1,U_V_FIELD,U1_V1
     &,P_POINTS,U_V_POINTS,ROW_LENGTH,BL_LEVELS
     &,DTRDZ,DTRDZ_U_V,RHOKH,RHOKM_U_V
     &,RDZ,RDZ_U_V,GAMMA
     &,DQW_NT,DTL_NT,DU_NT,DV_NT
     &,FQW,FTL,TAU_X,TAU_Y
     &,CT_CTQ,DQW,DTL,CQ_CM,DU,DV
     &,LTIMER
     &)

      IMPLICIT NONE

      LOGICAL LTIMER

      INTEGER
     & P_FIELD                     ! IN No. of points in P-grid.
     &,P1                          ! IN First point to be processed in
!                                       P-grid.
     &,U_V_FIELD                   ! IN No. of points in U_V-grid.
     &,U1_V1                       ! IN First point to be processed in
!                                       U_V-grid.
     &,P_POINTS                    ! IN Number of P-grid points to be
!                                       processed.
     &,U_V_POINTS                  ! IN Number of U_V-grid points.
     &,ROW_LENGTH                  ! IN No. of points in latitude row.
     &,BL_LEVELS                   ! IN No. of atmospheric levels for
!                                       which boundary layer fluxes are
!                                       calculated.

      REAL
     & DTRDZ(P_FIELD,BL_LEVELS)    ! IN dz for bottom BL_LEVELS
     &,DTRDZ_U_V(U_V_FIELD,BL_LEVELS)
!                                  ! IN -g.dt/dp for model wind layers
     &,RHOKH(P_FIELD,2:BL_LEVELS)  ! IN Exchange coeff for FTL above
!                                       surface.
     &,RHOKM_U_V(U_V_FIELD,2:BL_LEVELS)
!                                  ! IN Exchange coefficients for
!                                       momentum, on UV-grid with
!                                       first and last rows ignored.
!                                       for K>=2 (from KMKH).
     &,RDZ(P_FIELD,BL_LEVELS)      ! IN 1./dz
     &,RDZ_U_V(U_V_FIELD,2:BL_LEVELS)
!                                  ! IN Reciprocal of the vertical
!                                       distance from level K-1 to
!                                       level K. (K > 1) on wind levels
     &,GAMMA(BL_LEVELS)            ! IN Implicit weighting.
     &,DQW_NT(P_FIELD,BL_LEVELS)   ! IN Non-turbulent increment for QW.
     &,DTL_NT(P_FIELD,BL_LEVELS)   ! IN Non-turbulent increment for TL.
     &,DU_NT(U_V_FIELD,BL_LEVELS)
!                                  ! IN u non-turbulent increments.
     &,DV_NT(U_V_FIELD,BL_LEVELS)
!                                  ! IN v non-turbulent increments.
     &,FQW(P_FIELD,BL_LEVELS)      ! IN Flux of QW (ie., for surface,
!                                       total evaporation). Kg/sq m/s
     &,FTL(P_FIELD,BL_LEVELS)      ! IN Flux of TL (ie., for surface,
!                                       H/Cp where H is sensible heat
!                                       in W per sq m).
     &,TAU_X(U_V_FIELD,BL_LEVELS)  ! IN x-component of turbulent
!                                       stress at levels k-1/2;
!                                       eg. TAUX(,1) is surface stress.
!                                       UV-grid, 1st and last rows set
!                                       to "missing data". (N/sq m)
!                                       IN as "explicit" fluxes from
!                                       ex_flux_uv, OUT as "implicit
     &,TAU_Y(U_V_FIELD,BL_LEVELS)  ! IN y-component of turbulent
!                                       stress at levels k-1/2;
!                                       eg. TAUX(,1) is surface stress.
!                                       UV-grid, 1st and last rows set
!                                       to "missing data". (N/sq m)
!                                       IN as "explicit" fluxes from
!                                       ex_flux_uv, OUT as "implicit


      REAL
     & CT_CTQ(P_FIELD,BL_LEVELS)   ! OUT Coefficient in T and q
!                                        tri-diagonal implicit matrix
     &,CQ_CM(U_V_FIELD,BL_LEVELS)  ! OUT Coefficient in U and V
!                                        tri-diagonal implicit matrix
     &,DQW(P_FIELD,BL_LEVELS)      ! OUT BL increment to q field
     &,DTL(P_FIELD,BL_LEVELS)      ! OUT BL increment to T field
     &,DU(U_V_FIELD,BL_LEVELS)     ! OUT BL increment to u wind field
     &,DV(U_V_FIELD,BL_LEVELS)     ! OUT BL increment to v wind field

!  External references :-
      EXTERNAL TIMER

!  Local scalars :-
      REAL
     & AT       ! Matrix element in "T" row in eqn P244.79.
     &,RBT      ! Reciprocal of BT' (eqns P244.107, 110, 113).
     &,AM       ! Matrix element in eqn P244.80.
     &,RBM      ! Reciprocal of BM(') (eqns P244.81, 85, 89).

      INTEGER
     & BLM1     ! BL_LEVELS minus 1.
     &,I        ! Loop counter (horizontal field index).
     &,K        ! Loop counter (vertical index).





!-----------------------------------------------------------------------
!!  0.  Check that the scalars input to define the grid are consistent.
!       See comments to routine SF_EXCH for details.
!-----------------------------------------------------------------------

      IF (LTIMER) THEN
        CALL TIMER('IM_BL_PT1 ',3)
      ENDIF

      BLM1 = BL_LEVELS-1


      DO I=P1,P1+P_POINTS-1
! Include non-turbulent increments.
        DQW(I,BL_LEVELS) = DTRDZ(I,BL_LEVELS) * FQW(I,BL_LEVELS)
     &                     +DQW_NT(I,BL_LEVELS)
        DTL(I,BL_LEVELS) = DTRDZ(I,BL_LEVELS) * FTL(I,BL_LEVELS)
     &                     +DTL_NT(I,BL_LEVELS)

        CT_CTQ(I,BL_LEVELS) = -DTRDZ(I,BL_LEVELS) *
     &         GAMMA(BL_LEVELS)*RHOKH(I,BL_LEVELS)*
     &          RDZ(I,BL_LEVELS)

        RBT = 1.0 / ( 1.0 - CT_CTQ(I,BL_LEVELS) )

        DQW(I,BL_LEVELS) = RBT * DQW(I,BL_LEVELS)
        DTL(I,BL_LEVELS) = RBT * DTL(I,BL_LEVELS)

        CT_CTQ(I,BL_LEVELS) = RBT * CT_CTQ(I,BL_LEVELS)         ! P244.1
      ENDDO


      DO K=BLM1,2,-1
        DO I=P1,P1+P_POINTS-1

            DQW(I,K) = -DTRDZ(I,K) * ( FQW(I,K+1) - FQW(I,K) )
     &                + DQW_NT(I,K)
            DTL(I,K) = -DTRDZ(I,K) * ( FTL(I,K+1) - FTL(I,K) )
     &                + DTL_NT(I,K)

            AT = -DTRDZ(I,K) * GAMMA(K+1)*RHOKH(I,K+1)*RDZ(I,K+1)

            CT_CTQ(I,K) = -DTRDZ(I,K) * GAMMA(K)*RHOKH(I,K)*RDZ(I,K)

            RBT = 1.0 / ( 1.0 - CT_CTQ(I,K) -
     &                             AT*( 1.0 + CT_CTQ(I,K+1) ) )

            DQW(I,K) = RBT * (DQW(I,K) - AT*DQW(I,K+1) )
            DTL(I,K) = RBT * (DTL(I,K) - AT*DTL(I,K+1) )

            CT_CTQ(I,K) = RBT * CT_CTQ(I,K)                     ! P244.1
        ENDDO ! P_points
      ENDDO !blm1,2,-1

!-----------------------------------------------------------------------
!! 3.3 Bottom model layer QW row of matrix equation.
!-----------------------------------------------------------------------

       DO I=P1,P1+P_POINTS-1

            DQW(I,1) = -DTRDZ(I,1) * FQW(I,2) + DQW_NT(I,1)
            DTL(I,1) = -DTRDZ(I,1) * FTL(I,2) + DTL_NT(I,1)

            AT = -DTRDZ(I,K) * GAMMA(2)*RHOKH(I,2)*RDZ(I,2)

            RBT = 1.0 / ( 1.0 - AT*( 1.0 + CT_CTQ(I,2) ) )

            DQW(I,1) = RBT * (DQW(I,1) - AT*DQW(I,2) )
            DTL(I,1) = RBT * (DTL(I,1) - AT*DTL(I,2) )
!
! Now set CT_CTQ(1) to be BETA
            CT_CTQ(I,1) = -DTRDZ(I,1) * RBT

      ENDDO ! P_points


*IF -DEF,SCMA
        DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
        DO I=1,U_V_POINTS
*ENDIF

        DU(I,BL_LEVELS) = -DTRDZ_U_V(I,BL_LEVELS) *
     &                     TAU_X(I,BL_LEVELS)
        DV(I,BL_LEVELS) = -DTRDZ_U_V(I,BL_LEVELS) *
     &                     TAU_Y(I,BL_LEVELS)

! addition of non-turbulent increments
        DU(I,BL_LEVELS) = DU(I,BL_LEVELS)
     &                       + DU_NT(I,BL_LEVELS)
        DV(I,BL_LEVELS) = DV(I,BL_LEVELS)
     &                       + DV_NT(I,BL_LEVELS)

        CQ_CM(I,BL_LEVELS) = -DTRDZ_U_V(I,BL_LEVELS) *
     &        GAMMA(BL_LEVELS)*
     &        RHOKM_U_V(I,BL_LEVELS)*RDZ_U_V(I,BL_LEVELS)

        RBM = 1.0 / ( 1.0 - CQ_CM(I,BL_LEVELS) )

        DU(I,BL_LEVELS) = RBM * DU(I,BL_LEVELS)
        DV(I,BL_LEVELS) = RBM * DV(I,BL_LEVELS)

        CQ_CM(I,BL_LEVELS) = RBM * CQ_CM(I,BL_LEVELS)
      ENDDO


      DO K=BLM1,2,-1

*IF -DEF,SCMA
        DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
        DO I=1,U_V_POINTS
*ENDIF

          DU(I,K) = DTRDZ_U_V(I,K) *
     &                   ( TAU_X(I,K+1) - TAU_X(I,K) )
          DV(I,K) = DTRDZ_U_V(I,K) *
     &                   ( TAU_Y(I,K+1) - TAU_Y(I,K) )
! addition of non-turbulent increments
          DU(I,K) = DU(I,K) + DU_NT(I,K)
          DV(I,K) = DV(I,K) + DV_NT(I,K)

          AM = -DTRDZ_U_V(I,K) * GAMMA(K+1)*RHOKM_U_V(I,K+1)*
     &                    RDZ_U_V(I,K+1)

          CQ_CM(I,K) = -DTRDZ_U_V(I,K) * GAMMA(K)*RHOKM_U_V(I,K)*
     &          RDZ_U_V(I,K)

          RBM = 1.0 / ( 1.0 - CQ_CM(I,K) -AM*( 1.0 + CQ_CM(I,K+1) ) )

          DU(I,K) = RBM * ( DU(I,K) - AM*DU(I,K+1) )
          DV(I,K) = RBM * ( DV(I,K) - AM*DV(I,K+1) )

          CQ_CM(I,K) = RBM * CQ_CM(I,K)
        ENDDO !loop over u_v_points
      ENDDO ! loop over 2,BLM1


*IF -DEF,SCMA
        DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
        DO I=1,U_V_POINTS
*ENDIF

        DU(I,1) = DTRDZ_U_V(I,1) * TAU_X(I,2)
        DV(I,1) = DTRDZ_U_V(I,1) * TAU_Y(I,2)

! addition of non-turbulent increments
        DU(I,1) = DU(I,1) + DU_NT(I,1)
        DV(I,1) = DV(I,1) + DV_NT(I,1)

        AM = -DTRDZ_U_V(I,1) * GAMMA(2)*RHOKM_U_V(I,2)
     &               *RDZ_U_V(I,2)

        RBM = 1.0 / ( 1.0 - AM *( 1.0 + CQ_CM(I,2) ) )

        DU(I,1) = RBM * ( DU(I,1) - AM*DU(I,2) )
        DV(I,1) = RBM * ( DV(I,1) - AM*DV(I,2) )

        CQ_CM(I,1) = DTRDZ_U_V(I,1) * RBM
      ENDDO ! loop over U_V_POINTS

      IF (LTIMER) THEN
        CALL TIMER('IM_BL_PT1 ',4)
      ENDIF

      RETURN
      END
*ENDIF
*DECK IMBLPT28A
*IF DEF,A03_7A,OR,DEF,A03_8A
C *****************************COPYRIGHT******************************
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved.
C
C Use, duplication or disclosure of this code is subject to the
C restrictions as set forth in the contract.
C
C                Meteorological Office
C                London Road
C                BRACKNELL
C                Berkshire UK
C                RG12 2SZ
C
C If no contract has been raised with this copy of the code, the use,
C duplication or disclosure of it is strictly prohibited.  Permission
C to do so must first be obtained in writing from the Head of Numerical
C Modelling at the above address.
C ******************************COPYRIGHT******************************
!!!  SUBROUTINE IM_BL_PT2 ----------------------------------------------
!!!
!!!  Purpose: Calculate increments for
!!!           T and Q in the boundary layer, using an
!!!           implicit numerical scheme.  The tridiagonal matrices are
!!!           inverted using simple Gaussian elimination.
!!!
!!!
!!!  Model           Modification history
!!! version  Date
CLL  4.5    Jul. 98  Kill the IBM specific lines (JCThil)
!!!
!!!  JJ  <- Programmers of some or all of previous code or changes
!!!
!!!
!!!  Programming standard: UM Documentation Paper No 4, Version 2,
!!!                        dated 18/1/90
!!!
!!!  System component covered: P244
!!!
!!!  Project task: P24
!!!
!!!  Documentation: UM Documentation Paper No 24.
!!!
!!!---------------------------------------------------------------------
!!  Arguments :-
      SUBROUTINE IM_BL_PT2 (
     & P_FIELD,P1,U_V_FIELD,U1_V1
     &,P_POINTS,U_V_POINTS,ROW_LENGTH,BL_LEVELS
     &,RHOKH,RHOKM_U_V
     &,RDZ,RDZ_U_V,GAMMA
     &,CT_CTQ,DQW,DTL,CQ_CM,DU,DV
     &,FQW,FTL,TAU_X,TAU_Y
     &,QW,TL,U,V
     &,LTIMER
     &)

      IMPLICIT NONE

      LOGICAL LTIMER

      INTEGER
     & P_FIELD                     ! IN No. of points in P-grid.
     &,P1                          ! IN First point to be processed in
!                                       P-grid.
     &,U_V_FIELD                   ! IN No. of points in U_V-grid.
     &,U1_V1                       ! IN First point to be processed in
!                                       U_V-grid.
     &,P_POINTS                    ! IN Number of P-grid points to be
!                                       processed.
     &,U_V_POINTS                  ! IN Number of U_V-grid points.
     &,ROW_LENGTH                  ! IN No. of points in latitude row.
     &,BL_LEVELS                   ! IN No. of atmospheric levels for
!                                       which boundary layer fluxes are
!                                       calculated.

      REAL
     & RHOKH(P_FIELD,2:BL_LEVELS)  ! IN Exchange coeff for FTL above
!                                       surface.
     &,RHOKM_U_V(U_V_FIELD,2:BL_LEVELS)
!                                  ! IN Exchange coefficients for
!                                       momentum, on UV-grid with
!                                       first and last rows ignored.
!                                       for K>=2 (from KMKH).
     &,RDZ(P_FIELD,BL_LEVELS)      ! IN 1./dz
     &,RDZ_U_V(U_V_FIELD,2:BL_LEVELS)
!                                  ! IN Reciprocal of the vertical
!                                       distance from level K-1 to
!                                       level K. (K > 1) on wind levels
     &,GAMMA(BL_LEVELS)            ! IN Implicit weighting.


      REAL
     & CT_CTQ(P_FIELD,BL_LEVELS)   ! INOUT Coefficient in T and q
!                                          tri-diagonal implicit matrix
     &,CQ_CM(U_V_FIELD,BL_LEVELS)  ! INOUT Coefficient in U and V
!                                          tri-diagonal implicit matrix
     &,DQW(P_FIELD,BL_LEVELS)      ! INOUT BL increment to q field
     &,DTL(P_FIELD,BL_LEVELS)      ! INOUT BL increment to T field
     &,DU(U_V_FIELD,BL_LEVELS)     ! INOUT BL increment to u wind field
     &,DV(U_V_FIELD,BL_LEVELS)     ! INOUT BL increment to v wind field
     &,FQW(P_FIELD,BL_LEVELS)      ! INOUT Flux of QW (ie., for surface,
!                                          total evaporation). Kg/sq m/s
     &,FTL(P_FIELD,BL_LEVELS)      ! INOUT Flux of TL (ie., for surface,
!                                          H/Cp where H is sensible heat
!                                          in W per sq m).
     &,TAU_X(U_V_FIELD,BL_LEVELS)  ! INOUT x-component of turbulent
!                                          stress at levels k-1/2;
!                                          eg. TAUX(,1) is surface stres
!                                          UV-grid, 1st and last rows se
!                                          to "missing data". (N/sq m)
!                                          IN as "explicit" fluxes from
!                                          ex_flux_uv, OUT as "implicit
     &,TAU_Y(U_V_FIELD,BL_LEVELS)  ! INOUT y-component of turbulent
!                                          stress at levels k-1/2;
!                                          eg. TAUX(,1) is surface stres
!                                          UV-grid, 1st and last rows se
!                                          to "missing data". (N/sq m)
!                                          IN as "explicit" fluxes from
!                                          ex_flux_uv, OUT as "implicit
     &,QW(P_FIELD,BL_LEVELS)       ! INOUT Total water content (kg per
!                                          kg air).  From P243.
     &,TL(P_FIELD,BL_LEVELS)       ! INOUT Liquid/frozen water
!                                          temperature (K).  From P243.
     &,U(U_V_FIELD,BL_LEVELS)      ! INOUT delta (U) elements of
!                                          vector on RHS, then LHS, of
!                                          eqn P244.80.
     &,V(U_V_FIELD,BL_LEVELS)      ! INOUT delta (V) elements of
!                                          vector on RHS, then LHS, of
!                                          eqn P244.80.


*CALL C_R_CP

!  External references :-
      EXTERNAL TIMER

!  Local scalars :-
      INTEGER
     & I        ! Loop counter (horizontal field index).
     &,K        ! Loop counter (vertical index).




!-----------------------------------------------------------------------
!!  0.  Check that the scalars input to define the grid are consistent.
!       See comments to routine SF_EXCH for details.
!-----------------------------------------------------------------------

      IF (LTIMER) THEN
        CALL TIMER('IM_BL_PT2 ',3)
      ENDIF

*IF -DEF,SCMA
      DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
      DO I=1,U_V_POINTS
*ENDIF

        DU(I,1) = DU(I,1) - CQ_CM(I,1)*TAU_X(I,1)
        U(I,1) = U(I,1) + DU(I,1)
        DV(I,1) = DV(I,1) - CQ_CM(I,1)*TAU_Y(I,1)
        V(I,1) = V(I,1) + DV(I,1)

      ENDDO


      DO K=2,BL_LEVELS

*IF -DEF,SCMA
        DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
        DO I=1,U_V_POINTS
*ENDIF

          DU(I,K) = DU(I,K) - CQ_CM(I,K)*DU(I,K-1)
          U(I,K) = U(I,K) + DU(I,K)
          DV(I,K) = DV(I,K) - CQ_CM(I,K)*DV(I,K-1)
          V(I,K) = V(I,K) + DV(I,K)

        ENDDO
      ENDDO


      DO I=P1,P1+P_POINTS-1
        DTL(I,1) = DTL(I,1) - CT_CTQ(I,1)*FTL(I,1)/CP
        TL(I,1) = TL(I,1) + DTL(I,1)
        DQW(I,1) = DQW(I,1) - CT_CTQ(I,1)*FQW(I,1)
        QW(I,1) = QW(I,1) + DQW(I,1)
      ENDDO !p_points


      DO K=2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1

          DTL(I,K) = DTL(I,K) - CT_CTQ(I,K)*DTL(I,K-1)
          TL(I,K) = TL(I,K) + DTL(I,K)
          DQW(I,K) = DQW(I,K) - CT_CTQ(I,K)*DQW(I,K-1)
          QW(I,K) = QW(I,K) + DQW(I,K)

        ENDDO !p_points
      ENDDO !bl_levels


      DO K=2,BL_LEVELS
*IF -DEF,SCMA
        DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1
*ELSE
        DO I=1,U_V_POINTS
*ENDIF

          TAU_X(I,K) = TAU_X(I,K) +
     &    GAMMA(K) * RHOKM_U_V(I,K) * RDZ_U_V(I,K)
     &                        *( DU(I,K) - DU(I,K-1) )

          TAU_Y(I,K) = TAU_Y(I,K) +
     &    GAMMA(K) * RHOKM_U_V(I,K) * RDZ_U_V(I,K)
     &                        *( DV(I,K) - DV(I,K-1) )

        ENDDO !u_v_points
      ENDDO ! bl_levels


      DO K=2,BL_LEVELS
        DO I=P1,P1+P_POINTS-1

!  Calculate and store fluxes due to local mixing.
!  FTL(local mixing) stored in array AT,
!  FQW(local mixing) stored in array AQ_AM.

          FTL(I,K) = FTL(I,K) - GAMMA(K)*RHOKH(I,K)*RDZ(I,K)
     &                            * ( DTL(I,K) - DTL(I,K-1) )
          FQW(I,K) = FQW(I,K) - GAMMA(K)*RHOKH(I,K)*RDZ(I,K)
     &                            * ( DQW(I,K) - DQW(I,K-1) )

        ENDDO ! p_points
      ENDDO ! bl_levels

      IF (LTIMER) THEN
        CALL TIMER('IM_BL_PT2 ',4)
      ENDIF

      RETURN
      END
*ENDIF
*DECK IMSFPT8A                                                          
*IF DEF,A03_7A,OR,DEF,A03_8A                                            
C *****************************COPYRIGHT******************************  
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved. 
C                                                                       
C Use, duplication or disclosure of this code is subject to the         
C restrictions as set forth in the contract.                            
C                                                                       
C                Meteorological Office                                  
C                London Road                                            
C                BRACKNELL                                              
C                Berkshire UK                                           
C                RG12 2SZ                                               
C                                                                       
C If no contract has been raised with this copy of the code, the use,   
C duplication or disclosure of it is strictly prohibited.  Permission   
C to do so must first be obtained in writing from the Head of Numerical 
C Modelling at the above address.                                       
C ******************************COPYRIGHT****************************** 
!!!  SUBROUTINE IM_SF_PT ---------------------------------------------- 
!!!                                                                     
!!!  Purpose: Calculate increments for                                  
!!!           T and Q in the boundary layer, using an                   
!!!           implicit numerical scheme.  The tridiagonal matrices are  
!!!           inverted using simple Gaussian elimination.               
!!!                                                                     
!!!                                                                     
!!!  Model           Modification history                               
!!! version  Date                                                       
CLL  4.5    Jul. 98  Kill the IBM specific lines (JCThil)               
!!!                                                                     
!!!  JJ  <- Programmers of some or all of previous code or changes      
!!!                                                                     
!!!                                                                     
!!!  Programming standard: UM Documentation Paper No 4, Version 2,      
!!!                        dated 18/1/90                                
!!!                                                                     
!!!  System component covered: P244                                     
!!!                                                                     
!!!  Project task: P24                                                  
!!!                                                                     
!!!  Documentation: UM Documentation Paper No 24.                       
!!!                                                                     
!!!---------------------------------------------------------------------
!!  Arguments :-                                                        
      SUBROUTINE IM_SF_PT (                                             
     & P_FIELD,P1,U_V_FIELD,U1_V1                                       
     &,P_POINTS,U_V_POINTS,ROW_LENGTH,LAND_FIELD                        
     &,LAND_INDEX,NTILES,TILE_INDEX,TILE_PTS                            
     &,FLANDG,TILE_FRAC,SNOW_TILE,ICE_FRACT                             
     &,GAMMA_1,ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE                      
     &,RESFT,RHOKPM,RHOKPM_SICE                                         
     &,RHOKM_1_U_V,RHOKH_1,RHOKH1_SICE                                  
     &,CT_CTQ_1,DQW_1,DTL_1,CQ_CM_1,DU_1,DV_1
     &,FLANDG_UV                                                
     &,FQW_GB,FTL_GB
     &,TAUX_1,TAUX_LAND,TAUX_SSI,TAUY_1,TAUY_LAND,TAUY_SSI              
     &,FQW_TILE,FTL_TILE,FQW_ICE,FTL_ICE,E_SEA,H_SEA                    
     &,LTIMER                                                           
     &)                                                                 
                                                                        
                                                                        
      IMPLICIT NONE                                                     
                                                                        
      LOGICAL LTIMER                                                    
                                                                        
      INTEGER                                                           
     & P_FIELD                     ! IN No. of points in P-grid.        
     &,P1                          ! IN First point to be processed in  
!                                       P-grid.                         
     &,U_V_FIELD                   ! IN No. of points in U_V-grid.      
     &,U1_V1                       ! IN First point to be processed in  
!                                       U_V-grid.                       
     &,P_POINTS                    ! IN Number of P-grid points to be   
!                                       processed.                      
     &,U_V_POINTS                  ! IN Number of U_V-grid points.      
     &,ROW_LENGTH                  ! IN No. of points in latitude row.  
     &,LAND_FIELD                  ! IN Total number of land points.    
     &,LAND_INDEX(P_FIELD)         ! IN LAND_INDEX(I)=J => the Jth      
!                                       point in P_FIELD is the Ith     
!                                       land point.                     
     &,NTILES                      ! IN Number of land surface tiles.   
     &,TILE_INDEX(LAND_FIELD,NTILES)!IN Index of tile points.           
     &,TILE_PTS(NTILES)            ! IN Number of tiles.                
                                                                        
                                                                        
      REAL                                                              
     & FLANDG(P_FIELD)             ! IN Land fraction                   
     &,TILE_FRAC(LAND_FIELD,NTILES)! IN Tile fraction                   
     &,SNOW_TILE(LAND_FIELD,NTILES)! IN Lying snow on land tiles (kg/m2)
     &,ICE_FRACT(P_FIELD)          ! IN Fraction of grid-box which is   
!                                       sea-ice (decimal fraction).     
     &,GAMMA_1                     ! IN Implicit weighting.             
     &,ALPHA1(LAND_FIELD,NTILES)   ! IN Gradient of saturated specific  
!                                       humidity with respect to        
!                                       temperature between the bottom  
!                                       model layer and the surface.    
     &,ALPHA1_SICE(P_FIELD)        ! IN ALPHA1 for sea-ice              
     &,ASHTF(P_FIELD)              ! IN Coefficient to calculate surface
!                                       heat flux into soil or sea-ice  
!                                       (W/m2/K).                       
                                                                        
     &,ASHTF_TILE(LAND_FIELD,NTILES)!IN Coefficient to calculate heat   
!                                  !    flux into land tiles (W/m2/K).  
     &,RESFT(LAND_FIELD,NTILES)    ! IN Total resistance factor         
     &,RHOKPM(LAND_FIELD,NTILES)   ! IN Surface exchange coeff for tiles
     &,RHOKPM_SICE(P_FIELD)        ! IN Sea-ice surface exchange coeff. 
     &,RHOKM_1_U_V(U_V_FIELD)      ! IN Level 1 exchange coefficient for
!                                       momentum                        
     &,RHOKH_1(LAND_FIELD,NTILES)  ! IN Surface exchange coeffs for FTL 
                                                                        
     &,RHOKH1_SICE(P_FIELD)        ! IN Sea and sea-ice surface exchange
     &,CT_CTQ_1(P_FIELD)           ! IN Coefficient in T and q          
!                                        tri-diagonal implicit matrix   
     &,CQ_CM_1(U_V_FIELD)          ! IN Coefficient in U and V          
!                                        tri-diagonal implicit matrix   
     &,DQW_1(P_FIELD)              ! IN Level 1 increment to q field    
     &,DTL_1(P_FIELD)              ! IN Level 1 increment to T field    
     &,DU_1(U_V_FIELD)             ! IN Level 1 increment to u wind     
!                                       field                           
     &,DV_1(U_V_FIELD)             ! IN Level 1 increment to v wind     
!                                       field                           
     &,FLANDG_UV(U_V_FIELD)        ! IN Land fraction on UV grid.       
                                                                       
                                                                        
      REAL                                                              
     & FQW_GB(P_FIELD)             ! INOUT Grid-box value of QW flux at 
!                                          Kg/sq m/s                    
     &,FTL_GB(P_FIELD)             ! INOUT Grid-box value of TL flux at 
!                                          i.e. H/Cp where H is sensible
!                                          in W per sq m).              
     &,TAUX_1(U_V_FIELD)           ! OUT   x-component of turbulent     
!                                          stress at surface.           
     &,TAUX_LAND(U_V_FIELD)        ! INOUT x-component of turbulent     
!                                  !       stress at land surface.      
     &,TAUX_SSI(U_V_FIELD)         ! INOUT x-component of turbulent     
!                                  !       stress at sea surface.       
     &,TAUY_1(U_V_FIELD)           ! OUT   y-component of turbulent     
!                                          stress at surface.           
     &,TAUY_LAND(U_V_FIELD)        ! INOUT y-component of turbulent     
!                                  !       stress at land surface.      
     &,TAUY_SSI(U_V_FIELD)         ! INOUT y-component of turbulent     
!                                  !       stress at sea surface.       
     &,FQW_TILE(LAND_FIELD,NTILES) ! INOUT Tile flux of QW. Kg/sq m/s   
     &,FTL_TILE(LAND_FIELD,NTILES) ! INOUT Tile flux of TL              
     &,E_SEA(P_FIELD)              ! INOUT Evaporation from sea times   
!                                          leads fraction (kg/m2/s).    
!                                          Zero over land.              
     &,H_SEA(P_FIELD)              ! INOUT Surface sensible heat flux ov
!                                          sea times leads fraction (W/m
!                                          Zero over land.              
                                                                        
                                                                        
                                                                        
!  External references :-                                               
      EXTERNAL TIMER                                                    
                                                                        
                                                                        
!  Local and other symbolic constants :-                                
*CALL C_LHEAT                                                           
*CALL C_R_CP                                                            
                                                                        
                                                                        
      REAL LS                                                           
      PARAMETER (                                                       
     & LS=LC+LF     ! Latent heat of sublimation (J per kg).            
     &)                                                                 
                                                                        
! Workspace :-                                                          
      REAL                                                              
     & FQW_ICE(P_FIELD)            ! "Explicit" surface flux of QW for  
!                                     sea-ice fraction of gridsquare.   
     &,FTL_ICE(P_FIELD)            ! "Explicit" surface flux of TL for  
!                                     sea-ice fraction of gridsquare.   
     &,LAT_HT   ! Latent heat of evaporation for snow-free land         
!               ! or sublimation for snow-covered land and ice.         
     &,APART(P_FIELD,2)            ! Tempary array                      
     &,BPART(P_FIELD,2)            ! Tempary array                      
     &,RECIP(P_FIELD)              ! Tempary array                      
     &,FTL_LAND(P_FIELD)           ! Tempary array                   
     &,FQW_LAND(P_FIELD)           ! Tempary array                   
                                                                        
!  Local scalars :-                                                     
      INTEGER                                                           
     & I        ! Loop counter (horizontal field index).                
     &,J        ! Loop counter (tile index).                            
     &,L        ! Loop counter (horizontal land index).                 
     &,N        ! Loop counter (tile counter).                          
                                                                        
      REAL                                                              
     & FTL_OLD  ! Used to hold current value of FTL_GB before updating  
                                                                        
                                                                        
!-----------------------------------------------------------------------
!!  0.  Check that the scalars input to define the grid are consistent. 
!       See comments to routine SF_EXCH for details.                    
!-----------------------------------------------------------------------
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('IM_SF_PT ',3)                                       
      ENDIF                                                             
                                                                        
! Initialise APART and BPART to zero                                    
      DO I=P1,P1+P_POINTS-1                                             
        APART(I,1)=0.0                                                  
        APART(I,2)=0.0                                                  
        BPART(I,1)=0.0                                                  
        BPART(I,2)=0.0                                                  
        FTL_LAND(I)=0.0                                               
        FQW_LAND(I)=0.0                                               
      ENDDO                                                             
                                                                        
                                                                        
! Land tiles                                                            
      DO N=1,NTILES                                                     
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          I = LAND_INDEX(L)                                             
          LAT_HT = LC                                                   
          IF (SNOW_TILE(L,N).GT.0.) LAT_HT = LS                         
                                                                        
          APART(I,1)=APART(I,1) - TILE_FRAC(L,N) *                      
     &               GAMMA_1 * RHOKPM(L,N) *                            
     &            ( LAT_HT*RESFT(L,N)*RHOKH_1(L,N)*ALPHA1(L,N) +        
     &                         ASHTF_TILE(L,N) )                        
          APART(I,2)=APART(I,2) + TILE_FRAC(L,N) *                      
     &               GAMMA_1 * RHOKPM(L,N) *                            
     &               LAT_HT*RESFT(L,N)*RHOKH_1(L,N)                     
          BPART(I,1)=BPART(I,1) + TILE_FRAC(L,N) *                      
     &               GAMMA_1 * RESFT(L,N)*RHOKPM(L,N) *                 
     &               CP*RHOKH_1(L,N)*ALPHA1(L,N)                        
          BPART(I,2)=BPART(I,2) - TILE_FRAC(L,N) *                      
     &               GAMMA_1 * RESFT(L,N)*RHOKPM(L,N) *                 
     &               ( CP*RHOKH_1(L,N) + ASHTF_TILE(L,N) )              
                                                                        
        ENDDO                                                           
      ENDDO                                                             
                                                                        
                                                                        
                                                                        
! Sea points                                                            
      DO I=P1,P1+P_POINTS-1                                             
                                                                        
        IF(FLANDG(I).LT.1.0 .AND. ICE_FRACT(I).GT.0.0) THEN         
! Sea ice point                                                         
          APART(I,1)=FLANDG(I)*APART(I,1)                         
     &       - GAMMA_1 * (1.0-FLANDG(I)) * ICE_FRACT(I)             
     &      * RHOKPM_SICE(I) *                                        
     &      ( LS*RHOKH1_SICE(I)*ALPHA1_SICE(I) + ASHTF(I) )       
     &       - GAMMA_1 * (1.0-FLANDG(I)) * ( 1.0 - ICE_FRACT(I) )   
     &      * RHOKH1_SICE(I)                                          
                                                                        
          APART(I,2)=FLANDG(I)*APART(I,2)                         
     &       + GAMMA_1 * (1.0-FLANDG(I)) *ICE_FRACT(I)              
     &       * RHOKPM_SICE(I) * LS*RHOKH1_SICE(I)                   
                                                                        
          BPART(I,1)=FLANDG(I)*BPART(I,1)                         
     &       + GAMMA_1 * ICE_FRACT(I) * ( 1.0 - FLANDG(I) )         
     &       * RHOKPM_SICE(I) *CP*RHOKH1_SICE(I)*ALPHA1_SICE(I)   
                                                                        
          BPART(I,2)=FLANDG(I)*BPART(I,2)                         
     &       - GAMMA_1 * ICE_FRACT(I) * ( 1.0 - FLANDG(I) )         
     &       * RHOKPM_SICE(I) * ( CP*RHOKH1_SICE(I) + ASHTF(I) )  
     &       - GAMMA_1 * ( 1.0 - ICE_FRACT(I) )                       
     &       * ( 1.0 - FLANDG(I) ) * RHOKH1_SICE(I)                 
                                                                        
        ELSEIF(FLANDG(I).LT.1.0 .AND. .NOT.ICE_FRACT(I).GT.0.0) THEN   
! Ordinary sea point                                                    
          APART(I,1)= FLANDG(I)*APART(I,1)                        
     &       - GAMMA_1 * ( 1.0 - FLANDG(I) ) * RHOKH1_SICE(I)       
          APART(I,2)= FLANDG(I)*APART(I,2)                        
                                                                        
          BPART(I,1)= FLANDG(I)*BPART(I,1)                        
          BPART(I,2)= FLANDG(I)*BPART(I,2)                        
     &       - GAMMA_1 * ( 1.0 - FLANDG(I) ) * RHOKH1_SICE(I)       
                                                                        
        ENDIF                                                           
      ENDDO                                                             
                                                                        
                                                                        
                                                                        
! Calculate grid-box fluxes of heat and moisture                        
      DO I=P1,P1+P_POINTS-1                                             
        RECIP(I)=( 1.0 + CT_CTQ_1(I)*APART(I,1) ) *                     
     &           ( 1.0 + CT_CTQ_1(I)*BPART(I,2) ) -                     
     &             CT_CTQ_1(I)*APART(I,2)*CT_CTQ_1(I)*BPART(I,1)        
                                                                        
        FTL_OLD=FTL_GB(I)                                               
                                                                        
        FTL_GB(I) = ( ( 1.0 + CT_CTQ_1(I)*BPART(I,2) ) * ( FTL_OLD +    
     &                APART(I,1)*DTL_1(I) + APART(I,2)*DQW_1(I)) -      
     &                  CT_CTQ_1(I)*APART(I,2) * ( FQW_GB(I) +          
     &                  BPART(I,1)*DTL_1(I) + BPART(I,2)*DQW_1(I)) ) /  
     &                  RECIP(I)                                        
                                                                        
        FQW_GB(I) = ( ( 1.0 + CT_CTQ_1(I)*APART(I,1) ) * ( FQW_GB(I) +  
     &                  BPART(I,1)*DTL_1(I) + BPART(I,2)*DQW_1(I)) -    
     &                  CT_CTQ_1(I)*BPART(I,1) * ( FTL_OLD +            
     &                APART(I,1)*DTL_1(I) + APART(I,2)*DQW_1(I)) ) /    
     &                  RECIP(I)                                        
                                                                        
      ENDDO                                                             
                                                                        
                                                                        
! Make implicit correction to tile fluxes                               
                                                                        
! Land tiles                                                            
      DO N=1,NTILES                                                     
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          I = LAND_INDEX(L)                                             
          LAT_HT = LC                                                   
          IF (SNOW_TILE(L,N).GT.0.) LAT_HT = LS                         
                                                                        
          FTL_TILE(L,N)=FTL_TILE(L,N) -                                 
     &               GAMMA_1 * RHOKPM(L,N) *                            
     &            ( LAT_HT*RESFT(L,N)*RHOKH_1(L,N)*ALPHA1(L,N) +        
     &                       ASHTF_TILE(L,N) ) *                        
     &         ( DTL_1(I) - CT_CTQ_1(I)*FTL_GB(I) ) +                   
     &               GAMMA_1 * RHOKPM(L,N) *                            
     &               LAT_HT*RESFT(L,N)*RHOKH_1(L,N) *                   
     &         ( DQW_1(I) - CT_CTQ_1(I)*FQW_GB(I) )                     
                                                                        
          FQW_TILE(L,N)=FQW_TILE(L,N) +                                 
     &               GAMMA_1 * RESFT(L,N)*RHOKPM(L,N) *                 
     &               CP*RHOKH_1(L,N)*ALPHA1(L,N) *                      
     &         ( DTL_1(I) - CT_CTQ_1(I)*FTL_GB(I) ) -                   
     &               GAMMA_1 * RESFT(L,N)*RHOKPM(L,N) *                 
     &               ( CP*RHOKH_1(L,N) + ASHTF_TILE(L,N) ) *            
     &         ( DQW_1(I) - CT_CTQ_1(I)*FQW_GB(I) )                     
                                                                        
          FQW_LAND(I)=FQW_LAND(I)+FQW_TILE(L,N)*TILE_FRAC(L,N)      
          FTL_LAND(I)=FTL_LAND(I)+FTL_TILE(L,N)*TILE_FRAC(L,N)      
                                                                        
        ENDDO                                                           
      ENDDO                                                             
                                                                        
                                                                        
                                                                        
! Sea points                                                            
      DO I=P1,P1+P_POINTS-1                                             
                                                                        
        IF(FLANDG(I).LT.1.0 .AND. ICE_FRACT(I).GT.0.0) THEN         
! Sea ice point                                                         
          H_SEA(I)=H_SEA(I) - GAMMA_1 * (1.0 - ICE_FRACT(I)) * CP *     
     &       RHOKH1_SICE(I) * ( DTL_1(I) - CT_CTQ_1(I) * FTL_GB(I) )    
          E_SEA(I)=E_SEA(I) - GAMMA_1 * (1.0 - ICE_FRACT(I)) *          
     &       RHOKH1_SICE(I) * ( DQW_1(I) - CT_CTQ_1(I) * FQW_GB(I) )    
          FTL_ICE(I)=(FTL_GB(I)                                     
     &       - FTL_LAND(I)*FLANDG(I))/(1.-FLANDG(I))              
     &       - H_SEA(I)/CP                                            
          FQW_ICE(I)=(FQW_GB(I)                                     
     &       - FQW_LAND(I)*FLANDG(I))/(1.-FLANDG(I))              
     &        - E_SEA(I)                                              
                                                                        
        ELSEIF(FLANDG(I).LT.1.0 .AND. .NOT.ICE_FRACT(I).GT.0.0) THEN    
! Ordinary sea point                                                    
          H_SEA(I)=CP * (FTL_GB(I)                                  
     &       - FTL_LAND(I)*FLANDG(I))/(1.-FLANDG(I))              
          E_SEA(I)=(FQW_GB(I)                                       
     &       - FQW_LAND(I)*FLANDG(I))/(1.-FLANDG(I))              
          FTL_ICE(I)=0.0                                                
          FQW_ICE(I)=0.0                                                
                                                                        
        ENDIF                                                           
      ENDDO                                                             
                                                                        
                                                                        
*IF -DEF,SCMA                                                           
      DO I=U1_V1+ROW_LENGTH,U1_V1+U_V_POINTS-ROW_LENGTH-1             
*ELSE                                                                   
      DO I=1,U_V_POINTS                                               
*ENDIF                                                                  
                                                                        
        IF(FLANDG_UV(I).GT.0.0)THEN                                    
          TAUX_LAND(I) = ( TAUX_LAND(I) +                           
     &                 GAMMA_1*RHOKM_1_U_V(I)*DU_1(I) ) /             
     &                ( 1.0 + GAMMA_1*RHOKM_1_U_V(I)*CQ_CM_1(I) )   
        ELSE                                                            
          TAUX_LAND(I) = 0.0                                          
        ENDIF                                                           
                                                                        
        IF(FLANDG_UV(I).LT.1.0)THEN                                    
          TAUX_SSI(I) = ( TAUX_SSI(I) +                             
     &                 GAMMA_1*RHOKM_1_U_V(I)*DU_1(I) ) /             
     &                ( 1.0 + GAMMA_1*RHOKM_1_U_V(I)*CQ_CM_1(I) )   
        ELSE                                                            
          TAUX_SSI(I) = 0.0                                           
        ENDIF                                                           
                                                                        
        TAUX_1(I) = FLANDG_UV(I)*TAUX_LAND(I)                      
     &                + ( 1.0-FLANDG_UV(I))*TAUX_SSI(I)       

        IF(FLANDG_UV(I).GT.0.0)THEN                                    
          TAUY_LAND(I) = ( TAUY_LAND(I) +                           
     &                 GAMMA_1*RHOKM_1_U_V(I)*DV_1(I) ) /             
     &                ( 1.0 + GAMMA_1*RHOKM_1_U_V(I)*CQ_CM_1(I) )   
        ELSE                                                            
          TAUY_LAND(I) = 0.0                                          
        ENDIF                                                           
                                                                        
        IF(FLANDG_UV(I).LT.1.0)THEN                                    
          TAUY_SSI(I) = ( TAUY_SSI(I) +                             
     &                 GAMMA_1*RHOKM_1_U_V(I)*DV_1(I) ) /             
     &                ( 1.0 + GAMMA_1*RHOKM_1_U_V(I)*CQ_CM_1(I) )   
        ELSE                                                            
          TAUY_SSI(I) = 0.0                                           
        ENDIF                                                           
                                                                        
        TAUY_1(I) = FLANDG_UV(I)*TAUY_LAND(I)                      
     &                + ( 1.0-FLANDG_UV(I))*TAUY_SSI(I)              

      ENDDO  !u_v_points                                                
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('IM_SF_PT ',4)                                       
      ENDIF                                                             
                                                                        
      RETURN                                                            
      END                                                               
*ENDIF                                                                  
*DECK SFEXPL8A                                                          
*IF DEF,A03_7A,OR,DEF,A03_8A                                            
C *****************************COPYRIGHT******************************  
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved. 
C                                                                       
C Use, duplication or disclosure of this code is subject to the         
C restrictions as set forth in the contract.                            
C                                                                       
C                Meteorological Office                                  
C                London Road                                            
C                BRACKNELL                                              
C                Berkshire UK                                           
C                RG12 2SZ                                               
C                                                                       
C If no contract has been raised with this copy of the code, the use,   
C duplication or disclosure of it is strictly prohibited.  Permission   
C to do so must first be obtained in writing from the Head of Numerical 
C Modelling at the above address.                                       
C ******************************COPYRIGHT****************************** 
!!!  SUBROUTINE SF_EXPL------------------------------------------------ 
!!!                                                                     
!!!  Purpose: Calculate explicit surface fluxes of heat, moisture and   
!!!           momentum. Also calculates surface exchange coefficients   
!!!           required for implicit update of surface fluxes and surface
!!!           information required by the explicit boundary layer routin
!!!                                                                     
!!!                                                                     
!!! F.Hewer     <- programmer of some or all of previous code or changes
!!! C.Wilson    <- programmer of some or all of previous code or changes
!!!                                                                     
!!!  Model            Modification history:                             
!!! version  Date                                                       
!!!                                                                     
!!!                                                                     
!!!  Programming standard: Unified Model Documentation Paper No 4,      
!!!                        Version ?, dated ?.                          
!!!                                                                     
!!!  System component covered: P24.                                     
!!!                                                                     
!!!  Project task:                                                      
!!!                                                                     
!!!  Documentation: UMDP 24.                                            
!!!                                                                     
!!!---------------------------------------------------------------------
                                                                        
!    Arguments :-                                                       
      SUBROUTINE SF_EXPL (                                              
                                                                        
! IN values defining field dimensions and subset to be processed :      
     & P_FIELD,U_FIELD,LAND_FIELD,ROW_LENGTH,                           
     & N_P_ROWS,N_U_ROWS,P_POINTS,P1,LAND1,LAND_PTS,U_POINTS,U1,        
                                                                        
! IN values defining vertical grid of model atmosphere :                
     & AK_1,BK_1,AKH_1,BKH_1,DELTA_AK_1,DELTA_BK_1,                     
     & EXNER,                                                           
                                                                        
! IN soil/vegetation/land surface data :                                
     & LAND_INDEX,                                                      
     & LAND_MASK,L_Z0_OROG,                                             
     & NTILES,NELEV,TILE_INDEX,TILE_PTS,SM_LEVELS,                            
     & CANHC_TILE,CANOPY,CATCH,FLAKE,GC,HCON,HO2R2_OROG,                
     & FLAND,FLANDG,                                                    
     & SNOW_TILE,SIL_OROG_LAND,SMVCST,STHF,STHU,                        
     & TILE_FRAC,VFRAC_TILE,Z0_TILE,                                    
                                                                        
! IN sea/sea-ice data :                                                 
     & ICE_FRACT,U_0,V_0,                                               
                                                                        
! IN cloud data :                                                       
     & CF_1,QCF_1,QCL_1,                                                
                                                                        
! IN everything not covered so far :                                    
     & PSTAR,LW_DOWN,RAD_SICE,SW_TILE,TIMESTEP,
     & VSHR,VSHR_LAND,VSHR_SSI,ZH,                 
     & Q_1,T_1,T_SOIL,TI,                                               
     & TSTAR,TSTAR_LAND,TSTAR_SEA,TSTAR_SICE,TSTAR_SSI,
     & TSTAR_TILE,U_1,V_1,                                        
     & L_BL_LSPICE,                                                     

! IN SUBGRID ELEVATION CORRECTIONS
     & t_elev,q_elev,cf_elev,qcl_elev,qcf_elev,
     & p_elev,tsoil_elev,tice_elev,exner_elev,lwdown_elev,
! OUT SUBGRID ELEVATION CORRECTIONS
     & tl_elev,qw_elev,z1_elev,
                                                                        
! IN STASH flags :-                                                     
     & SFME,SQ1P5,ST1P5,SU10,SV10,                                      
                                                                        
! INOUT data :                                                          
     & Z0MSEA,                                                          
                                                                        
! OUT Diagnostic not requiring STASH flags :                            
     & CD,CH,E_SEA,QW_1,TL_1,FQW_1,                                     
     & FTL_1,FTL_TILE,LE_TILE,H_SEA,RADNET_SICE,RADNET_TILE,            
     & RHOKM_UV_1,RIB,RIB_TILE,TAUX_1,TAUY_1,                           
     & TAUX_LAND,TAUX_SSI,TAUY_LAND,TAUY_SSI,                           
                                                                        
! OUT diagnostic requiring STASH flags :                                
     & FME,                                                             
                                                                        
! OUT data required for tracer mixing :                                 
     & RHO_ARESIST,ARESIST,RESIST_B,                                    
     & RHO_ARESIST_TILE,ARESIST_TILE,RESIST_B_TILE,                     
     & NRML,                                                            
                                                                        
! OUT data required for 4D-VAR :                                        
     & RHO_CD_MODV1,                                                    
                                                                        
! OUT data required elsewhere in UM system :                            
     & FB_SURF,U_S,T1_SD,Q1_SD,TV1_SD,                                  
                                                                        
! OUT data required elsewhere in boundary layer or surface code         
     & ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE,DTRDZ_1,FQW_TILE,            
     & FQW_ICE,FTL_ICE,TSTAR_TILE_OLD,FRACA,RESFS,RESFT,                
     & RHOKH,RHOKH_TILE,RHOKH_SICE,RHOKPM,RHOKPM_SICE,                  
     & Z1,H_BLEND_OROG,Z0H,Z0H_TILE,Z0M,Z0M_TILE,Z0M_EFF,               
     & CDR10M_UV,CHR1P5M,CHR1P5M_SICE,                                  
! IN for calculation of surface-atmosphere heat flux:
     & TSURFSNOW, NSNOW, SNOW_DEPTH,
     & SNOW_SICE_1,SNOW_SLIQ_1,snow_depth_1,L_ESSERY_SNOW,
     & T_ICE,
     & FLANDG_UV,                                               
                                                                        
! LOGICAL LTIMER                                                        
     & LTIMER                                                           
     & )                                                                
                                                                        
      IMPLICIT NONE                                                     
                                                                        
!  Inputs :-                                                            
                                                                        
! (a) Defining horizontal grid and subset thereof to be processed.      
!    Checked for consistency.                                           
                                                                        
      INTEGER                                                           
     & P_FIELD                     ! IN No. of P-points in whole grid   
!                                  !    (for dimensioning only).        
     &,U_FIELD                     ! IN No. of UV-points in whole grid. 
     &,LAND_FIELD                  ! IN No.of land points in whole grid.
     &,ROW_LENGTH                  ! IN No. of points in one row.       
     &,N_P_ROWS   ! IN No of P-rows being processed.                    
     &,N_U_ROWS   ! IN No of UV-rows being processed.                   
     &,P_POINTS   ! IN No of P-points being processed.                  
     &,P1         ! IN First P-point to be processed.                   
     &,LAND1      ! IN First land-point to be processed.                
!                 !       1 <= LAND1 <= LAND_FIELD                      
     &,LAND_PTS   ! IN No of land points being processed.               
     &,U_POINTS   ! IN No of UV-points being processed.                 
     &,U1         ! IN First UV-point to be processed.                  
                                                                        
! (b) Defining vertical grid of model atmosphere.                       
                                                                        
      REAL                                                              
     & AK_1                        ! IN Hybrid 'A' for all levels.      
     &,BK_1                        ! IN Hybrid 'B' for all levels.      
     &,AKH_1                       ! IN Hybrid 'A' for layer interfaces.
     &,BKH_1                       ! IN Hybrid 'B' for layer interfaces.
     &,EXNER(P_FIELD,2)            ! IN Exner function.  EXNER(,K) is   
!                                  !    value for LOWER BOUNDARY of     
!                                  !    level K.                        
     &,DELTA_AK_1               ! IN Difference of hybrid 'A' across    
!                               !    layers (K-1/2 to K+1/2).           
!                               !    NB: Upper minus lower.             
     &,DELTA_BK_1               ! IN Difference of hybrid 'B' across    
!                               !     layers (K-1/2 to K+1/2).          
!                               !     NB: Upper minus lower.            
                                                                        
! (c) Soil/vegetation/land surface parameters (mostly constant).        
                                                                        
      LOGICAL                                                           
     & LAND_MASK(P_FIELD)          ! IN T if land, F elsewhere.         
     &,L_ESSERY_SNOW
     &,L_Z0_OROG                   ! IN T to use orog.roughness         
!                                  !    treatment in SF_EXCH            
                                                                        
      INTEGER                                                           
     & LAND_INDEX(P_FIELD)         ! IN LAND_INDEX(I)=J => the Jth      
!                                  !    point in P_FIELD is the Ith     
!                                  !    land point.                     
                                                                        
      INTEGER                                                           
     & SM_LEVELS                   ! IN No. of soil moisture levels     
     &,NTILES                      ! IN No. of land-surface tiles       
     &,NELEV
     &,TILE_INDEX(LAND_FIELD,NTILES)!IN Index of tile points            
     &,TILE_PTS(NTILES)            ! IN Number of tile points           
                                                                        
      REAL                                                              
     & CANHC_TILE(LAND_FIELD,NTILES)!IN Areal heat capacity of canopy   
!                                  !    for land tiles (J/K/m2).        
     &,CANOPY(LAND_FIELD,NTILES)   ! IN Surface/canopy water for        
!                                  !    snow-free land tiles (kg/m2)    
     &,CATCH(LAND_FIELD,NTILES)    ! IN Surface/canopy water capacity   
!                                  !    of snow-free land tiles (kg/m2).
     &,FLAKE(LAND_FIELD,NTILES)    ! IN Lake fraction.                  
     &,GC(LAND_FIELD,NTILES)       ! IN "Stomatal" conductance to       
!                                  !     evaporation for land tiles     
!                                  !     (m/s).                         
     &,HCON(LAND_FIELD)            ! IN Soil thermal conductivity       
!                                  !    (W/m/K).                        
     &,SNOW_TILE(LAND_FIELD,NTILES)! IN Lying snow on tiles (kg/m2)     
     &,SMVCST(LAND_FIELD)          ! IN Volumetric saturation point     
!                                  !    (m3/m3 of soil).                
     &,STHF(LAND_FIELD,SM_LEVELS)  ! IN Frozen soil moisture content of 
!                                  !    each layer as a fraction of     
!                                  !    saturation.                     
     &,STHU(LAND_FIELD,SM_LEVELS)  ! IN Unfrozen soil moisture content  
!                                  !    of each layer as a fraction of  
!                                  !    saturation.                     
     &,TILE_FRAC(LAND_FIELD,NTILES)! IN Tile fractions including        
!                                  ! snow cover in the ice tile.        
     &,VFRAC_TILE(LAND_FIELD,NTILES)!IN Fractional canopy coverage for  
!                                  !    land tiles.                     
     &,Z0_TILE(LAND_FIELD,NTILES)  ! IN Tile roughness lengths (m).     
     &,SIL_OROG_LAND(LAND_FIELD)   ! IN Silhouette area of unresolved   
!                                  !    orography per unit horizontal   
!                                  !    area on land points only.       
     &,HO2R2_OROG(LAND_FIELD)      ! IN Standard Deviation of orography.
!                                  !    equivilent to peak to trough    
!                                  !    height of unresolved orography  
!                                  !    divided by 2SQRT(2) on land     
!                                  !    points only (m)                 
     &,FLAND(LAND_FIELD)           ! IN Land fraction on land tiles.    
     &,FLANDG(P_FIELD)             ! IN Land fraction on all tiles.     
                                                                        
! (d) Sea/sea-ice data.                                                 
                                                                        
      REAL                                                              
     & ICE_FRACT(P_FIELD)          ! IN Fraction of gridbox covered by  
!                                  !     sea-ice (decimal fraction).    
     &,U_0(U_FIELD)                ! IN W'ly component of surface       
!                                  !    current (m/s).                  
     &,V_0(U_FIELD)                ! IN S'ly component of surface       
!                                  !    current (m/s).                  
                                                                        
! (e) Cloud data.                                                       
                                                                        
      REAL                                                              
     & CF_1(P_FIELD)               ! IN Cloud fraction (decimal).       
     &,QCF_1(P_FIELD)              ! IN Cloud ice (kg per kg air)       
     &,QCL_1(P_FIELD)              ! IN Cloud liquid water (kg          
!                                  !    per kg air).                    
                                                                        
! (f) Atmospheric + any other data not covered so far, incl control.    
                                                                        
      REAL                                                              
     & PSTAR(P_FIELD)              ! IN Surface pressure (Pascals).     
     &,LW_DOWN(P_FIELD)            ! IN Surface downward LW radiation   
!                                  !    (W/m2).                         
     &,RAD_SICE(P_FIELD)           ! IN Surface net shortwave and       
!                                  !    downward LWradiation for        
!                                  !    sea-ice (W/sq m).               
     &,SW_TILE(LAND_FIELD,NTILES)  ! IN Surface net SW radiation on     
!                                  !    land tiles (W/m2).              
     &,TIMESTEP                    ! IN Timestep (seconds).             
     &,VSHR(P_FIELD)               ! IN Magnitude of surface-to-lowest  
!                                  !    atm level wind shear (m per s). 
     &,VSHR_LAND(P_FIELD)          ! IN Magnitude of surface-to-lowest 
!                                  !    atm level wind shear (m per s).
     &,VSHR_SSI(P_FIELD)           ! IN Magnitude of surface-to-lowest 
!                                  !    atm level wind shear (m per s).
     &,ZH(P_FIELD)                 ! IN Height above surface of top of  
!                                  !    boundary layer (metres).        
     &,Q_1(P_FIELD)                ! IN  Specific humidity ( kg/kg air).
     &,T_1(P_FIELD)                ! IN  Atmospheric temperature (K).   
     &,T_SOIL(LAND_FIELD,SM_LEVELS)! IN Soil temperatures (K).          
     &,T_ICE(LAND_FIELD,SM_LEVELS) ! IN Bare land-ice temperatures (K).          
     &,TI(P_FIELD)                 ! IN Sea-ice surface layer           
!                                  !    temperature (K).                
     &,TSTAR(P_FIELD)              ! IN GBM surface temperature (K).    
     &,TSTAR_LAND(P_FIELD)         ! IN Land mean surface temperature (K
     &,TSTAR_SEA(P_FIELD)          ! IN Open sea surface temperature (K)
     &,TSTAR_SICE(P_FIELD)         ! IN Sea-ice surface temperature (K).
     &,TSTAR_SSI(P_FIELD)          ! IN mean sea surface temperature (K)
     &,TSTAR_TILE(LAND_FIELD,NTILES)!IN Surface tile temperatures       
     &,U_1(U_FIELD)                ! IN W'ly wind component (m/s)       
     &,V_1(U_FIELD)                ! IN S'ly wind component (m/s)       
     &,TSURFSNOW(LAND_FIELD,NTILES)
     &,TS1(LAND_FIELD,NTILES) ! T of surface layer,whether soil or snow
     &,SNOW_DEPTH(LAND_FIELD,NTILES)
     &,SNOW_SICE_1(LAND_FIELD,NTILES)
     &,SNOW_SLIQ_1(LAND_FIELD,NTILES)
     &,SNOW_DEPTH_1(LAND_FIELD,NTILES)
     &,NSNOW(LAND_FIELD,NTILES)
     &,KSNOW(LAND_FIELD,1)
     &,CSNOW(LAND_FIELD,1)
     &,HCONS_SNOW(LAND_FIELD,NTILES)

! SUBGRID ELEVATION CORRECTIONS
      REAL
     & t_elev(land_field,nelev),q_elev(land_field,nelev),
     & cf_elev(land_field,nelev),qcl_elev(land_field,nelev),
     & qcf_elev(land_field,nelev),
     & tsoil_elev(land_field,nelev),tice_elev(land_field,nelev),
     & p_elev(land_field,nelev),exner_elev(land_field,nelev),
     & lwdown_elev(land_field,nelev)

      REAL
     & tl_elev(land_field,nelev),qw_elev(land_field,nelev),
     & bt_elev(land_field,nelev),bq_elev(land_field,nelev),
     & exner_l2(land_field),z1_elev(land_field,nelev)

       REAL
     & p_1_elev(land_field)
                                                                        
      LOGICAL                                                           
     & LTIMER                      ! IN Logical switch for TIMER diags  
     &,L_BL_LSPICE                 ! IN Use if 3A large scale precip    
                                                                        
!  STASH flags :-                                                       
                                                                        
      LOGICAL                                                           
     & SFME    ! IN Flag for FME (q.v.).                                
     &,SQ1P5   ! IN Flag for Q1P5M (q.v.)                               
     &,ST1P5   ! IN Flag for T1P5M (q.v.)                               
     &,SU10    ! IN Flag for U10M (q.v.)                                
     &,SV10    ! IN Flag for V10M (q.v.)                                
                                                                        
!  In/outs :-                                                           
                                                                        
      REAL                                                              
     & Z0MSEA(P_FIELD)             ! INOUT Sea-surface roughness        
!                                  !       length for momentum (m).     
                                                                        
!  Outputs :-                                                           
!-1 Diagnostic (or effectively so - includes coupled model requisites):-
                                                                        
!  (a) Calculated anyway (use STASH space from higher level) :-         
!                                                                       
      REAL                                                              
     & CD(P_FIELD)                 ! OUT Turbulent surface exchange     
!                                  !     (bulk transfer) coefficient for
!                                  !     momentum.                      
     &,CH(P_FIELD)                 ! OUT Turbulent surface exchange     
!                                  !     (bulk transfer) coefficient for
!                                  !     heat and/or moisture.          
     &,E_SEA(P_FIELD)              ! OUT Evaporation from sea times     
!                                  !     leads fraction. Zero over land.
!                                  !     (kg per square metre per sec). 
     &,QW_1(P_FIELD)               ! OUT Total water content            
     &,TL_1(P_FIELD)               ! OUT Ice/liquid water temperature   
     &,FQW_1(P_FIELD)              ! OUT Moisture flux between layers   
!                                  !     (kg per square metre per sec). 
!                                  !     FQW(,1) is total water flux    
!                                  !     from surface, 'E'.             
     &,FTL_1(P_FIELD)              ! OUT FTL(,K) contains net turbulent 
!                                  !     sensible heat flux into layer K
!                                  !     from below; so FTL(,1) is the  
!                                  !     surface sensible heat, H.(W/m2)
     &,FTL_TILE(LAND_FIELD,NTILES) ! OUT Surface FTL for land tiles     
     &,LE_TILE(LAND_FIELD,NTILES)  ! OUT Surface latent heat flux for   
!                                  !     land tiles                     
     &,H_SEA(P_FIELD)              ! OUT Surface sensible heat flux over
!                                  !     sea times leads fraction (W/m2)
     &,RADNET_SICE(P_FIELD)        ! OUT Surface net radiation on       
!                                  !     sea-ice (W/m2)                 
     &,RADNET_TILE(LAND_FIELD,NTILES)                                   
!                                  ! OUT Surface net radiation on       
!                                  !     land tiles (W/m2)              
     &,RHOKM_LAND(P_FIELD)         ! OUT Exchange coefficients for      
!                                  !     momentum on P-grid             
     &,RHOKM_SSI(P_FIELD)          ! OUT Exchange coefficients for      
!                                  !     momentum on P-grid             
     &,RHOKM_UV_LAND(U_FIELD)      ! OUT Exchange coefficients for   
!                                  !     momentum (on UV-grid, with 1st 
!                                  !     and last rows undefined or, at 
!                                  !     present, set to "missing data")
     &,RHOKM_UV_SSI(U_FIELD)       ! OUT Exchange coefficients for    
!                                  !     momentum (on UV-grid, with 1st 
!                                  !     and last rows undefined or, at 
!                                  !     present, set to "missing data")
     &,FLANDG_UV(U_FIELD)          ! OUT Land frac (on UV-grid, with 1st
!                                  !     and last rows undefined or, at 
!                                  !     present, set to "missing data")
     &,RHOKM_UV_1(U_FIELD)         ! OUT Exchange coefficients for      
!                                  !     momentum (on UV-grid, with 1st 
!                                  !     and last rows undefined or, at 
!                                  !     present, set to "missing data")
     &,RIB(P_FIELD)                ! OUT Mean bulk Richardson number for
!                                  !     lowest layer.                  
     &,RIB_TILE(LAND_FIELD,NTILES) ! OUT RIB for land tiles.            
     &,TAUX_LAND(U_FIELD)          ! OUT W'ly component of sfc wind     
!                                  !     stress (N/sq m). (On UV-grid   
!                                  !     with first and last rows       
!                                  !     undefined or, at present,      
!                                  !     set to missing data            
     &,TAUX_SSI(U_FIELD)           ! OUT W'ly component of sfc wind     
!                                  !     stress (N/sq m). (On UV-grid   
!                                  !     with first and last rows       
!                                  !     undefined or, at present,      
!                                  !     set to missing data            
     &,TAUX_1(U_FIELD)             ! OUT W'ly component of surface wind 
!                                  !     stress (N/sq m). (On UV-grid   
!                                  !     with first and last rows       
!                                  !     undefined or, at present,      
!                                  !     set to missing data            
     &,TAUY_LAND(U_FIELD)          ! OUT S'ly component of sfc wind     
!                                  !     stress (N/sq m).  On UV-grid;  
!                                  !     comments as per TAUY.          
     &,TAUY_SSI(U_FIELD)           ! OUT S'ly component of sfc wind     
!                                  !     stress (N/sq m).  On UV-grid;  
!                                  !     comments as per TAUY.          
     &,TAUY_1(U_FIELD)             ! OUT S'ly component of surface wind 
!                                  !     stress (N/sq m).  On UV-grid;  
!                                  !     comments as per TAUX.          
     &,RHO_CD_MODV1(P_FIELD)       ! OUT Surface air density * drag coef
!                                  !     *mod(v1 - v0) before interp    
     &,RHO_ARESIST(P_FIELD)        ! OUT RHOSTAR*CD_STD*VSHR for Sulphur
!                                  !     cycle                          
     &,ARESIST(P_FIELD)            ! OUT 1/(CD_STD*VSHR) for Sulphur    
!                                  !     cycle                          
     &,RESIST_B(P_FIELD)           ! OUT (1/CH-1/(CD_STD)/VSHR for      
!                                  !     Sulphur cycle                  
     &,RHO_ARESIST_TILE(LAND_FIELD,NTILES)                              
!                                  ! OUT RHOSTAR*CD_STD*VSHR on land    
!                                  !     tiles                          
     &,ARESIST_TILE(LAND_FIELD,NTILES)                                  
!                                  ! OUT 1/(CD_STD*VSHR) on land tiles  
     &,RESIST_B_TILE(LAND_FIELD,NTILES)                                 
!                                  ! OUT (1/CH-1/CD_STD)/VSHR on land   
!                                  !     tiles                          
                                                                        
      INTEGER                                                           
     & NRML(P_FIELD)               ! OUT Number of model layers in the  
!                                  !     Rapidly Mixing Layer; set to   
!                                  !     zero in SF_EXCH for MOSES II.  
                                                                        
!  (b) Not passed between lower-level routines (not in workspace at this
!      level) :-                                                        
                                                                        
      REAL                                                              
     & FME(P_FIELD)                ! OUT Wind mixing "power" (W/m2).    
                                                                        
!-2 Genuinely output, needed by other atmospheric routines :-           
                                                                        
      REAL                                                              
     & FB_SURF(P_FIELD)            ! OUT Surface flux buoyancy over     
!                                  !     density (m^2/s^3)              
     &,U_S(P_FIELD)                ! OUT Surface friction velocity (m/s)
     &,T1_SD(P_FIELD)              ! OUT Standard deviation of turbulent
!                                  !     fluctuations of layer 1 temp;  
!                                  !     used in initiating convection. 
     &,Q1_SD(P_FIELD)              ! OUT Standard deviation of turbulent
!                                  !     flucs of layer 1 humidity;     
!                                  !     used in initiating convection. 
     &,TV1_SD(P_FIELD)             ! OUT Standard deviation of turbulent
!                                  !     fluctuations of surface layer  
!                                  !     virtual temperature (K).       
                                                                        
      REAL                                                              
     & ALPHA1(LAND_FIELD,NTILES)   ! OUT Mean gradient of saturated     
!                                  !     specific humidity with respect 
!                                  !     to temperature between the     
!                                  !     bottom model layer and tile    
!                                  !     surfaces                       
     &,ALPHA1_SICE(P_FIELD)        ! OUT ALPHA1 for sea-ice.            
     &,ASHTF(P_FIELD)              ! OUT Coefficient to calculate       
!                                  !     surface heat flux into soil or 
!                                  !     sea-ice.                       
     &,ASHTF_TILE(LAND_FIELD,NTILES)!OUT Coefficient to calculate       
!                                  !     surface heat flux into land    
!                                  !     tiles.                         
     &,DTRDZ_1(P_FIELD)            ! OUT -g.dt/dp for model layers.     
     &,FQW_TILE(LAND_FIELD,NTILES) ! OUT Surface FQW for land tiles     
     &,FQW_ICE(P_FIELD)            ! OUT Surface FQW for sea-ice        
     &,FTL_ICE(P_FIELD)            ! OUT Surface FTL for sea-ice        
     &,TSTAR_TILE_OLD(LAND_FIELD,NTILES)                                
!                                  ! OUT Tile surface temperatures at   
!                                  !     beginning of timestep.         
     &,FRACA(LAND_FIELD,NTILES)    ! OUT Fraction of surface moisture   
!                                  !     flux with only aerodynamic     
!                                  !     resistance for snow-free land  
!                                  !     tiles.                         
     &,RESFS(LAND_FIELD,NTILES)    ! OUT Combined soil, stomatal        
!                                  !     and aerodynamic resistance     
!                                  !     factor for fraction (1-FRACA)  
!                                  !     of snow-free land tiles.       
     &,RESFT(LAND_FIELD,NTILES)    ! OUT Total resistance factor.       
!                                  !     FRACA+(1-FRACA)*RESFS for      
!                                  !     snow-free land, 1 for snow.    
     &,RHOKH(P_FIELD)              ! OUT Grid-box surface exchange      
!                                  !     coefficients                   
     &,RHOKH_TILE(LAND_FIELD,NTILES)                                    
!                                  ! OUT Surface exchange coefficients  
!                                  !     for land tiles                 
     &,RHOKH_SICE(P_FIELD)         ! OUT Surface exchange coefficients  
!                                  !     for sea and sea-ice            
     &,RHOKPM(LAND_FIELD,NTILES)   ! OUT Land surface exchange coeff.   
     &,RHOKPM_SICE(P_FIELD)        ! OUT Sea-ice surface exchange coeff.
     &,Z1(P_FIELD)                 ! OUT Height of lowest level (i.e.   
!                                  !     height of middle of lowest     
!                                  !     layer).                        
     &,H_BLEND_OROG(P_FIELD)       ! OUT Blending height used as part of
!                                  !     effective roughness scheme     
     &,Z0H(P_FIELD)                ! OUT Roughness length for heat and  
!                                  !     moisture (m).                  
     &,Z0H_TILE(LAND_FIELD,NTILES)                                      
!                                  ! OUT Tile roughness lengths for heat
!                                  !     and moisture (m).              
     &,Z0M(P_FIELD)                ! OUT Roughness length for           
!                                  !     momentum (m).                  
     &,Z0M_TILE(LAND_FIELD,NTILES)                                      
!                                  ! OUT Tile roughness lengths for     
!                                  !     momentum.                      
     &,Z0M_EFF(P_FIELD)            ! OUT Effective grid-box roughness   
!                                  !     length for momentum            
     &,CDR10M_UV(U_FIELD)          ! OUT Ratio of CD's reqd for         
!                                  !     calculation of 10 m wind. On   
!                                  !     UV-grid; comments as per RHOKM.
     &,CHR1P5M(LAND_FIELD,NTILES)  ! OUT Ratio of coefffs for           
!                                  !     calculation of 1.5m temp for   
!                                  !     land tiles.                    
     &,CHR1P5M_SICE(P_FIELD)       ! OUT CHR1P5M for sea and sea-ice    
!                                  !     (leads ignored).               
                                                                        
                                                                        
!---------------------------------------------------------------------  
!  External routines called :-                                          
                                                                        
      EXTERNAL Z,HEAT_CON,SF_EXCH,BOUY_TQ,BTQ_INT,                      
     & KMKH,EX_FLUX_TQ,EX_FLUX_UV,IM_CAL_TQ,SICE_HTF,SF_EVAP,SF_MELT,   
     & IM_CAL_UV,SCREEN_TQ                                              
      EXTERNAL TIMER                                                    
*IF -DEF,SCMA                                                           
      EXTERNAL UV_TO_P,P_TO_UV                                          
*ENDIF                                                                  
                                                                        
!-----------------------------------------------------------------------
!   Symbolic constants (parameters) reqd in top-level routine :-        
                                                                        
*CALL C_R_CP                                                            
*CALL C_G                                                               
*CALL C_LHEAT                                                           
*CALL C_GAMMA                                                           
*CALL CSIGMA                                                            
*CALL SOIL_THICK                                                        
*IF DEF,MPP                                                             
! MPP Common block                                                      
*CALL PARVARS                                                           
*ENDIF                                                                  
                                                                        
! Derived local parameters.                                             
                                                                        
      REAL LCRCP,LS,LSRCP                                               
                                                                        
      PARAMETER (                                                       
     & LCRCP=LC/CP           ! Evaporation-to-dT conversion factor.     
     &,LS=LF+LC              ! Latent heat of sublimation.              
     &,LSRCP=LS/CP           ! Sublimation-to-dT conversion factor.     
     &  )                                                               
                                                                        
!-----------------------------------------------------------------------
                                                                        
!  Workspace :-                                                         
                                                                        
      REAL                                                              
     & BF_1(P_FIELD)            ! A buoyancy parameter (beta F tilde)   
     &,BQ_1(P_FIELD)            ! A buoyancy parameter (beta q tilde).  
     &,BT_1(P_FIELD)            ! A buoyancy parameter (beta T tilde).  
     &,BT_CLD_1(P_FIELD)        ! A buoyancy parameter for cloudy air   
     &,BQ_CLD_1(P_FIELD)        ! A buoyancy parameter for cloudy air   
     &,A_QS_1(P_FIELD)          ! Saturated lapse rate factor           
     &,A_DQSDT_1(P_FIELD)       ! Saturated lapse rate factor           
     &,DQSDT_1(P_FIELD)         ! Derivative of q_SAT w.r.t. T          
     &,DZL_1(P_FIELD)           ! DZL(,K) is depth in m of layer        
!                               ! K, i.e. distance from boundary        
!                               ! K-1/2 to boundary K+1/2.              
     &,HCONS(LAND_FIELD)        ! Soil thermal conductivity including   
!                               ! the effects of water and ice (W/m2)   
     &,P_1(P_FIELD)             ! Pressure at model levels              
     &,RDZ_1(P_FIELD)           ! RDZ(,1) is the reciprocal of the      
!                               ! height of level 1, i.e. of the        
!                               ! middle of layer 1.  For K > 1,        
!                               ! RDZ(,K) is the reciprocal             
!                               ! of the vertical distance              
!                               ! from level K-1 to level K.            
     &,RHOKM_1(P_FIELD)         ! Exchange coefficients for             
!                               ! momentum on P-grid                    
     &,DELTAP_1(P_FIELD)        ! Difference in pressure between levels 
     &,TV_1(P_FIELD)            ! Virtual temp                          
     &,ZLB(P_FIELD,0:1)         ! ZLB(,K) is the height of the          
!                               ! upper boundary of layer K             
!                               ! ( = 0.0 for "K=0").                   
     &,CDR10M(P_FIELD)          ! Ratio of CD's reqd for calculation    
!                               ! of 10 m wind. On P-grid               
     &,FLANDG_TMP(P_FIELD)      ! Land fraction on P-grid               
                                                                        
                                                                        
!  Local scalars :-                                                     
                                                                        
      INTEGER                                                           
     & I,J,L      ! LOCAL Loop counter (horizontal field index).        
     &,N,K          ! LOCAL Loop counter (tile index).                    
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('SF_EXPL ',3)                                        
      ENDIF                                                             
                                                                       
!-----------------------------------------------------------------------
!! 1.  Perform calculations in what the documentation describes as      
!!     subroutine Z_DZ.  In fact, a separate subroutine isn't used.     
!-----------------------------------------------------------------------
                                                                        
!-----------------------------------------------------------------------
!! 1.1 Initialise ZLB(,0) (to zero, of course, this being the height    
!!     of the surface above the surface).                               
!-----------------------------------------------------------------------
                                                                        
      DO I=P1,P1+P_POINTS-1                                             
        ZLB(I,0)=0.0                                                    
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
!! 1.2 Calculate layer depths and heights, and construct wind fields on 
!!     P-grid.  This involves calling subroutines Z and UV_TO_P.        
!!     Virtual temperature is also calculated, as a by-product.         
!-----------------------------------------------------------------------
!  NB RDZ  TEMPORARILY used to return DELTA_Z_LOWER, the lower half     
!     layer thickness                                                   
                                                                        
      CALL Z(P_POINTS,EXNER(P1,1),EXNER(P1,2),PSTAR(P1),                
     &  AKH_1,BKH_1,Q_1(P1),QCF_1(P1),                                  
     &  QCL_1(P1),T_1(P1),ZLB(P1,0),TV_1(P1),                           
     &  ZLB(P1,1),DZL_1(P1),RDZ_1(P1),LTIMER)                           
                                                                        
                                                                        
! set pressure array.                                                   
      DO I=P1,P1+P_POINTS-1                                             
        P_1(I) = AK_1 + BK_1*PSTAR(I)                                   
      ENDDO                                                             
                                                                        
      DO I=P1,P1+P_POINTS-1                                             
        Z1(I)=RDZ_1(I)                                                  
        RDZ_1(I)=1.0/RDZ_1(I)                                           
        DELTAP_1(I)=DELTA_AK_1 + PSTAR(I)*DELTA_BK_1                    
        DTRDZ_1(I) = -G * TIMESTEP/DELTAP_1(I)                          
!     &                  (DELTA_AK_1 + PSTAR(I)*DELTA_BK_1)             
      ENDDO                                                             

      DO L=1,LAND_FIELD
        I=LAND_INDEX(L)
        EXNER_L2(L)=EXNER(I,2)
      enddo
      do k=1,nelev
      DO L=1,LAND_FIELD
        P_1_ELEV(L)=AK_1 + BK_1*P_ELEV(L,K)
      ENDDO
      CALL Z(LAND_PTS,EXNER_ELEV(land1,k),EXNER_L2(LAND1),
     &  P_ELEV(LAND1,K),AKH_1,BKH_1,
     &  Q_ELEV(LAND1,K),QCF_ELEV(LAND1,K),
     &  QCL_ELEV(LAND1,K),T_ELEV(LAND1,K),ZLB(P1,0),TV_1(P1),
     &  ZLB(P1,1),DZL_1(P1),Z1_ELEV(LAND1,K),LTIMER)
      enddo

                                                                        
      IF (LAND_FIELD.GT.0) THEN    ! Omit if no land points             
                                                                        
!-----------------------------------------------------------------------
! Calculate the thermal conductivity of the top soil layer.             
!-----------------------------------------------------------------------
        CALL HEAT_CON (LAND_FIELD,HCON,STHU,STHF,SMVCST,HCONS,LTIMER)   
                                                                        
      ENDIF                     ! End test on land points               

      IF (L_ESSERY_SNOW) THEN
      DO N=1,NTILES
      CALL snowtherm(1,LAND_FIELD,TILE_PTS(n),int(min(NSNOW(:,n),1.)),
     &                tile_index(:,n),SNOW_DEPTH_1(:,n)
     &                ,SNOW_SICE_1(:,n),SNOW_SLIQ_1(:,n)
     &                ,csnow,ksnow)
         DO L=1,LAND_FIELD
           hcons_snow(l,n) = ksnow(l,1)
         END DO
      ENDDO
      ENDIF
                                                                        
!-----------------------------------------------------------------------
!! Calculate total water content, QW and Liquid water temperature, TL   
!-----------------------------------------------------------------------
      DO I=P1,P1+P_POINTS-1                                             
        QW_1(I) = Q_1(I) + QCL_1(I) + QCF_1(I)              ! P243.10   
        TL_1(I) = T_1(I) - LCRCP*QCL_1(I) - LSRCP*QCF_1(I)  ! P243.9    
      ENDDO                                                             
      DO K=1,NELEV
      DO L=1,LAND_FIELD
        QW_ELEV(L,K)=Q_ELEV(L,K)+QCL_ELEV(L,K)+QCF_ELEV(L,K)
        TL_ELEV(L,K)=T_ELEV(L,K)-LCRCP*QCL_ELEV(L,K)-LSRCP*QCF_ELEV(L,K)
      ENDDO
      ENDDO
                                                                        
!-----------------------------------------------------------------------
!! Calculate net radiation on land tiles and sea-ice                    
!-----------------------------------------------------------------------
      DO N=1,NTILES                                                     
        DO L=1,LAND_FIELD
            k=mod(n-1,nelev)+1
            TS1(L,N) = tsoil_elev(l,k)
            IF (N.Gt.(ntiles-NELEV)) TS1(L,N)=tice_elev(l,k)
            IF(L_ESSERY_SNOW) THEN
              if (NSNOW(L,N) .GT. 0) TS1(L,N) = TSURFSNOW(L,N)
            ENDIF
        ENDDO 
      ENDDO 
!
      DO N=1,NTILES
        DO L=1,LAND_FIELD                                               
          RADNET_TILE(L,N) = 0.                                         
          LE_TILE(L,N) = 0.                                             
        ENDDO                                                           
      ENDDO                                                             
      DO N=1,NTILES                                                     
        k=mod(n-1,nelev)+1
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          I = LAND_INDEX(L)                                             
          RADNET_TILE(L,N) = SW_TILE(L,N) +                             
     &                       LWDOWN_ELEV(L,K) - SBCON*TS1(L,N)**4          
          TSTAR_TILE_OLD(L,N) = TSTAR_TILE(L,N)                         
        ENDDO                                                           
      ENDDO                                                             
                                                                        
      DO I=P1,P1+P_POINTS-1                                             
        RADNET_SICE(I) = 0.                                             
        IF (FLANDG(I).LT.1.0 .AND. ICE_FRACT(I).GT.0.)                 
     &    RADNET_SICE(I) = RAD_SICE(I) - ICE_FRACT(I)*SBCON*TI(I)**4    
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
!! Calculate buoyancy parameters BT and BQ.                             
!-----------------------------------------------------------------------
      CALL BOUY_TQ (                                                    
     & P_FIELD,P1,P_POINTS,1                                            
     &,P_1,CF_1,T_1,TL_1,Q_1,QCF_1,QCL_1                                
     &,BT_1,BQ_1,BF_1,BT_CLD_1,BQ_CLD_1                                 
     &,A_QS_1,A_DQSDT_1,DQSDT_1                                         
     &,L_BL_LSPICE,LTIMER                                               
     & )                                                                

      DO K=1,NELEV
        CALL BOUY_TQ (
     &   LAND_FIELD,LAND1,LAND_PTS,1
     &  ,P_1_ELEV,CF_ELEV(1,K),T_ELEV(1,K),TL_ELEV(1,K)
     &  ,Q_ELEV(1,K),QCF_ELEV(1,K),QCL_ELEV(1,K)
     &  ,BT_ELEV(1,K),BQ_ELEV(1,K),BF_1
     !!DUMMY ARGUMENTS FOR 6A
     &  ,BT_CLD_1,BQ_CLD_1,A_QS_1,A_DQSDT_1,DQSDT_1
     !!
     &  ,L_BL_LSPICE,LTIMER
     &  )
      ENDDO
                                                                        
!-----------------------------------------------------------------------
!! 4.  Surface turbulent exchange coefficients and "explicit" fluxes    
!!     (P243a, routine SF_EXCH).                                        
!!     Wind mixing "power" and some values required for other, later,   
!!     diagnostic calculations, are also evaluated if requested.        
!-----------------------------------------------------------------------
                                                                        
      CALL SF_EXCH (                                                    
     & P_POINTS,P_FIELD,P1,LAND1,LAND_PTS,LAND_FIELD,NTILES,NELEV,
     & LAND_INDEX,TILE_INDEX,TILE_PTS,FLAND,FLANDG,                                
     & BQ_1,BT_1,CANHC_TILE,CANOPY,CATCH,DZSOIL(1),FLAKE,GC,HCONS,      
     & HO2R2_OROG,ICE_FRACT,SNOW_TILE,PSTAR,QW_1,RADNET_SICE,           
     & RADNET_TILE,SIL_OROG_LAND,SMVCST,TILE_FRAC,TIMESTEP,             
     & T_1,Q_1,QCF_1,QCL_1,TL_1,TI,
     & TS1,snow_depth,nsnow,hcons_snow,snow_depth_1,l_essery_snow,
     & TSTAR_TILE,TSTAR_LAND,TSTAR_SEA,TSTAR_SICE,TSTAR_SSI,
     & VFRAC_TILE,VSHR_LAND,VSHR_SSI,                 
     & ZH,Z0_TILE,Z1,Z1,                                           
     & LAND_MASK,SU10,SV10,SQ1P5,ST1P5,SFME,LTIMER,L_Z0_OROG,Z0MSEA,    
     & ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE,CD,CH,CDR10M,CHR1P5M,        
     & CHR1P5M_SICE,E_SEA,FME,FQW_1,FQW_TILE,FQW_ICE,                   
     & FTL_1,FTL_TILE,FTL_ICE,FRACA,H_BLEND_OROG,H_SEA,                 
     & RESFS,RESFT,RIB,RIB_TILE,                                        
     & FB_SURF,U_S,Q1_SD,T1_SD,TV1_SD,Z0M_EFF,                          
     & Z0H,Z0H_TILE,Z0M,Z0M_TILE,RHO_ARESIST,ARESIST,RESIST_B,          
     & RHO_ARESIST_TILE,ARESIST_TILE,RESIST_B_TILE,                     
     & RHO_CD_MODV1,RHOKH_TILE,RHOKH_SICE,RHOKM_1,RHOKM_LAND,RHOKM_SSI,
     & RHOKPM,RHOKPM_SICE,   
     & NRML                                                             
     & ,T_ELEV,Q_ELEV,QCF_ELEV,QCL_ELEV,P_ELEV
     & ,TL_ELEV,QW_ELEV,BQ_ELEV,BT_ELEV,Z1_ELEV
     & )                                                                
                                                                        
*IF DEF,MPP                                                             
! RHOKM(*,1) contains duff data in halos. The P_TO_UV can interpolate   
! this into the real data, so first we must update east/west halos      
                                                                        
! Call fixed to swap north/south halos as well 
      CALL SWAPBOUNDS(RHOKM_1(U1),ROW_LENGTH,N_U_ROWS,1,1,1)
      CALL SWAPBOUNDS(RHOKM_LAND(U1),ROW_LENGTH,N_U_ROWS,1,1,1)
      CALL SWAPBOUNDS(RHOKM_SSI(U1),ROW_LENGTH,N_U_ROWS,1,1,1)          
*ENDIF                                                                  

      DO I=P1,P1-1+P_POINTS                                          
        FLANDG_TMP(I)=FLANDG(I)                                         
      ENDDO                                                             
                                                                        
*IF -DEF,SCMA                                                           
      CALL P_TO_UV (RHOKM_1(P1),RHOKM_UV_1(U1+ROW_LENGTH),              
     &   P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)

      CALL P_TO_UV_LAND (RHOKM_LAND(P1),RHOKM_UV_LAND(U1+ROW_LENGTH),   
     &   P_POINTS,U_POINTS,FLANDG(P1),ROW_LENGTH,N_P_ROWS)
      CALL P_TO_UV_SEA (RHOKM_SSI(P1),RHOKM_UV_SSI(U1+ROW_LENGTH),      
     &   P_POINTS,U_POINTS,FLANDG(P1),ROW_LENGTH,N_P_ROWS)

      CALL P_TO_UV (FLANDG_TMP(P1),FLANDG_UV(U1+ROW_LENGTH),            
     &   P_POINTS,U_POINTS,ROW_LENGTH,N_P_ROWS)                         
*IF DEF,MPP                                                             
      IF (attop) THEN                                                   
*ENDIF                                                                  
      DO I=U1,U1+ROW_LENGTH-1                                           
        RHOKM_UV_1(I) = 1.0E30
        RHOKM_UV_LAND(I) = 1.0E30
        RHOKM_UV_SSI(I) = 1.0E30
        FLANDG_UV(I) = 1.0E30                              
      ENDDO                                                             
*IF DEF,MPP                                                             
      ENDIF                                                             
                                                                        
      IF (atbase) THEN                                                  
*ENDIF                                                                  
      DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1+N_U_ROWS*ROW_LENGTH-1        
        RHOKM_UV_1(I) = 1.0E30                                          
        RHOKM_UV_LAND(I) = 1.0E30
        RHOKM_UV_SSI(I) = 1.0E30
        FLANDG_UV(I) = 1.0E30
      ENDDO                                                             
*IF DEF,MPP                                                             
      ENDIF                                                             
*ENDIF                                                                  
                                                                        
*ELSE                                                                   
      DO I = P1, P1-1+P_POINTS                                          
        RHOKM_UV_1(I) = RHOKM_1(I)
        RHOKM_UV_LAND(I) = RHOKM_LAND(I)
        RHOKM_UV_SSI(I) = RHOKM_SSI(I)                                  
        FLANDG_UV(I) = FLANDG(I)
      ENDDO                    
*ENDIF                                                                  
                                                                        
*IF -DEF,SCMA                                                           
        DO I=U1+ROW_LENGTH,U1+U_POINTS-ROW_LENGTH-1                     
*ELSE                                                                   
        DO I=1,U_POINTS                                                 
*ENDIF                                                                  
          TAUX_LAND(I) = RHOKM_UV_LAND(I) * U_1(I)                  
          TAUX_SSI(I) = RHOKM_UV_SSI(I) * ( U_1(I) - U_0(I) )           
          TAUX_1(I) = FLANDG_UV(I)*TAUX_LAND(I)                     
     &            +(1.-FLANDG_UV(I))*TAUX_SSI(I)

          TAUY_LAND(I) = RHOKM_UV_LAND(I) * V_1(I)                  
          TAUY_SSI(I) = RHOKM_UV_SSI(I) * ( V_1(I) - V_0(I) )           
          TAUY_1(I) = FLANDG_UV(I)*TAUY_LAND(I)                     
     &            +(1.-FLANDG_UV(I))*TAUY_SSI(I)                        
        ENDDO                                                           
                                                                        
*IF -DEF,SCMA                                                           
!-----------------------------------------------------------------------
!! Set first and last rows to "missing data indicator"                  
!-----------------------------------------------------------------------
*IF DEF,MPP                                                             
      IF (attop) THEN                                                   
*ENDIF                                                                  
      DO I=U1,U1+ROW_LENGTH-1 
        TAUX_LAND(I)=1.E30
        TAUX_SSI(I)=1.E30                                        
        TAUX_1(I)=1.E30
        
        TAUY_LAND(I)=1.E30
        TAUY_SSI(I) =1.E30                                              
        TAUY_1(I)=1.E30                                                 
      ENDDO                                                             
*IF DEF,MPP                                                             
      ENDIF                                                             
                                                                        
      IF (atbase) THEN                                                  
*ENDIF                                                                  
      DO I= U1 + (N_U_ROWS-1)*ROW_LENGTH, U1 + N_U_ROWS*ROW_LENGTH -1   
        TAUX_LAND(I)=1.E30
        TAUX_SSI(I)=1.E30                                        
        TAUX_1(I)=1.E30
        
        TAUY_LAND(I)=1.E30
        TAUY_SSI(I) =1.E30                                              
        TAUY_1(I)=1.E30                                                 
      ENDDO                                                             
*IF DEF,MPP                                                             
      ENDIF                                                             
*ENDIF                                                                  
*ENDIF                                                                  
                                                                        
        IF (SU10. OR. SV10)THEN                                         

*IF DEF,MPP
! Fix diags by swapping halos
        CALL SWAPBOUNDS(CDR10M(U1),ROW_LENGTH,N_U_ROWS,1,1,1)
*ENDIF

*IF -DEF,SCMA                                                           
        CALL P_TO_UV (CDR10M(P1),CDR10M_UV(U1+ROW_LENGTH),P_POINTS,     
     &     U_POINTS,ROW_LENGTH,N_P_ROWS)                                
!-----------------------------------------------------------------------
!! Set first and last rows to "missing data indicator"                  
!-----------------------------------------------------------------------
*IF DEF,MPP                                                             
        IF (attop) THEN                                                 
*ENDIF                                                                  
          DO I=U1,U1+ROW_LENGTH-1                                       
            CDR10M_UV(I) = 1.0E30                                       
          ENDDO                                                         
*IF DEF,MPP                                                             
        ENDIF                                                           
                                                                        
        IF (atbase) THEN                                                
*ENDIF                                                                  
          DO I= U1+(N_U_ROWS-1)*ROW_LENGTH, U1+N_U_ROWS*ROW_LENGTH-1    
            CDR10M_UV(I) = 1.0E30                                       
          ENDDO                                                         
*IF DEF,MPP                                                             
        ENDIF                                                           
*ENDIF                                                                  
                                                                        
*ELSE                                                                   
      DO I = P1, P1-1+P_POINTS                                          
        CDR10M_UV(I) = CDR10M(I)                                        
      ENDDO                                                             
*ENDIF                                                                  
        ENDIF                                                           
                                                                        
                                                                        
!-----------------------------------------------------------------------
!! Set grid-box surface exchange coefficients                           
!-----------------------------------------------------------------------
      DO I=P1,P1+P_POINTS-1                                             
        IF( FLANDG(I).LT.1.0 ) THEN                                   
          RHOKH(I) = (1.0 - FLANDG(I))*RHOKH_SICE(I)                    
        ELSE                                                            
          RHOKH(I) = 0.0                                                
        ENDIF                                                           
      ENDDO                                                             
                                                                        
      DO N=1,NTILES                                                     
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          I = LAND_INDEX(L)                                             
          RHOKH(I) = RHOKH(I) 
     &      + FLANDG(I)*TILE_FRAC(L,N)*RHOKH_TILE(L,N)          
        ENDDO                                                           
      ENDDO                                                             
                                                                        
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('SF_EXPL ',4)                                        
      ENDIF                                                             
                                                                        
      RETURN                                                            
      END                                                               
*ENDIF                                                                  
*DECK SFIMPL8A                                                          
*IF DEF,A03_7A,OR,DEF,A03_8A                                            
C *****************************COPYRIGHT******************************  
C (c) CROWN COPYRIGHT 1997, METEOROLOGICAL OFFICE, All Rights Reserved. 
C                                                                       
C Use, duplication or disclosure of this code is subject to the         
C restrictions as set forth in the contract.                            
C                                                                       
C                Meteorological Office                                  
C                London Road                                            
C                BRACKNELL                                              
C                Berkshire UK                                           
C                RG12 2SZ                                               
C                                                                       
C If no contract has been raised with this copy of the code, the use,   
C duplication or disclosure of it is strictly prohibited.  Permission   
C to do so must first be obtained in writing from the Head of Numerical 
C Modelling at the above address.                                       
C ******************************COPYRIGHT****************************** 
!!!  SUBROUTINE SF_IMPL-----------------------------------------------  
!!!                                                                     
!!!  Purpose: Calculate implicit correction to surface fluxes of heat,  
!!!           moisture and momentum. Also calculates screen level       
!!!           temperature and humidity as well as 10 m winds.           
!!!                                                                     
!!!                                                                     
!!! F.Hewer     <- programmer of some or all of previous code or changes
!!! C.Wilson    <- programmer of some or all of previous code or changes
!!!                                                                     
!!!  Model            Modification history:                             
!!! version  Date                                                       
!!!                                                                     
!!!   4.3  7/2/97     New deck. S Jackson                               
!!!   4.4 25/6/97     Modified for MOSES II tile model. R Essery        
!!!   4.4 25/6/97     Move grid definitions up to BL_INTCT.  R.A.Betts  
!!!  4.5    Jul. 98  Kill the IBM specific lines. (JCThil)              
!!!   4.5  7/5/98     Set TSTAR, SNOW_SURF_HTF and SOIL_SURF_HTF to 0   
!!!                   at all land points, to avoid problems of          
!!!                   non-initialised data.  R.A.Betts                  
!!!   4.5 21/5/98     Add optional error check for negative surface     
!!!                   temperature.  R.A.Betts                           
!!!                                                                     
!!!  Programming standard: Unified Model Documentation Paper No 4,      
!!!                        Version ?, dated ?.                          
!!!                                                                     
!!!  System component covered: P24.                                     
!!!                                                                     
!!!  Project task:                                                      
!!!                                                                     
!!!  Documentation: UMDP 24.                                            
!!!                                                                     
!!!---------------------------------------------------------------------
                                                                        
!    Arguments :-                                                       
      SUBROUTINE SF_IMPL (                                              
                                                                        
! IN values defining field dimensions and subset to be processed :      
     & P_FIELD,U_FIELD,LAND_FIELD,ROW_LENGTH,                           
     & P_POINTS,P1,LAND1,LAND_PTS,U_POINTS,U1,                          
                                                                        
! IN soil/vegetation/land surface data :                                
     & LAND_INDEX,LAND_MASK,                                            
     & NTILES,NELEV,TILE_INDEX,TILE_PTS,SM_LEVELS,                            
     & CANHC_TILE,CANOPY,FLAKE,SMC,                                     
     & TILE_FRAC,WT_EXT_TILE,                                           
     & FLAND,FLANDG,                                                    
                                                                        
! IN sea/sea-ice data :                                                 
     & DI,ICE_FRACT,U_0,V_0,                                            
                                                                        
! IN everything not covered so far :                                    
     & PSTAR,LW_DOWN,RAD_SICE,SW_TILE,TIMESTEP,                         
     & T_SOIL,QW_1,TL_1,U_1,V_1,RHOKM_UV_1,                             
     & ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE,                             
     & DTRDZ_1,DU_1,DV_1,FQW_TILE,FQW_ICE,FTL_ICE,TSTAR_TILE_OLD,       
     & FRACA,RESFS,RESFT,RHOKH_TILE,RHOKH_SICE,RHOKPM,RHOKPM_SICE,      
     & Z1,Z0H,Z0H_TILE,Z0M,Z0M_TILE,CDR10M_UV,CHR1P5M,CHR1P5M_SICE,     
     & CT_CTQ_1,DQW_1,DTL_1,CQ_CM_1,                                    
     & L_NEG_TSTAR,                                                     
     & FLANDG_UV,                                               

! IN SUBGRID ELEVATION CORRECTIONS
     & tl_elev,qw_elev,z1_elev,lwdown_elev,
     & p_elev,tsoil_elev,tice_elev,
                                                                        
! IN STASH flags :-                                                     
     & SIMLT,SMLT,SLH,SQ1P5,ST1P5,SU10,SV10,                            
                                                                        
! INOUT data :                                                          
     & TI,TSTAR,                                                        
     & TSTAR_LAND,TSTAR_SEA,TSTAR_SICE,TSTAR_SSI,                       
     & TSTAR_TILE,SNOW_TILE,                                            
     & LE_TILE,RADNET_SICE,RADNET_TILE,                                 
     & E_SEA,FQW_1,FTL_1,FTL_TILE,H_SEA,OLR,TAUX_1,TAUY_1,              
     & TAUX_LAND,TAUX_SSI,TAUY_LAND,TAUY_SSI,                           
                                                                        
! OUT Diagnostic not requiring STASH flags :                            
     & ECAN,EI_TILE,ESOIL_TILE,                                         
     & SEA_ICE_HTF,SURF_HT_FLUX,SURF_HT_FLUX_LAND,SURF_HT_FLUX_SICE,    
     & SURF_HTF_TILE,
                                                                        
! OUT diagnostic requiring STASH flags :                                
     & SICE_MLT_HTF,SNOMLT_SURF_HTF,LATENT_HEAT,                        
     & Q1P5M,Q1P5M_TILE,T1P5M,T1P5M_TILE,U10M,V10M,                     
                                                                        
! OUT data required elsewhere in UM system :                            
     & ECAN_TILE,EI,ESOIL,EXT,SNOWMELT,MELT_TILE,                       
     & ERROR,                                                           
! LOGICAL FOR NEW SNOW SCHEME
     & L_ESSERY_SNOW,T_ICE,
!
     & TSURFSNOW, NSNOW,
!
                                                                        
! LOGICAL LTIMER                                                        
     & LTIMER                                                           
     & )                                                                
                                                                        
      IMPLICIT NONE                                                     
                                                                        
!  Inputs :-                                                            
                                                                        
! (a) Defining horizontal grid and subset thereof to be processed.      
!    Checked for consistency.                                           
                                                                        
      INTEGER                                                           
     & P_FIELD                     ! IN No. of P-points in whole grid   
!                                  !    (for dimensioning only).        
     &,U_FIELD                     ! IN No. of UV-points in whole grid. 
     &,LAND_FIELD                  ! IN No.of land points in whole grid.
     &,ROW_LENGTH                  ! IN No. of points in one row.       
     &,P_POINTS   ! IN No of P-points being processed.                  
     &,P1         ! IN First P-point to be processed.                   
     &,LAND1      ! IN First land-point to be processed.                
!                 !       1 <= LAND1 <= LAND_FIELD                      
     &,LAND_PTS   ! IN No of land points being processed.               
     &,U_POINTS   ! IN No of UV-points being processed.                 
     &,U1         ! IN First UV-point to be processed.                  
                                                                        
! (c) Soil/vegetation/land surface parameters (mostly constant).        
                                                                        
      LOGICAL                                                           
     & LAND_MASK(P_FIELD)          ! IN T if land, F elsewhere.         
                                                                        
      INTEGER                                                           
     & LAND_INDEX(P_FIELD)         ! IN LAND_INDEX(I)=J => the Jth      
!                                  !    point in P_FIELD is the Ith     
!                                  !    land point.                     
                                                                        
      INTEGER                                                           
     & SM_LEVELS                   ! IN No. of soil moisture levels     
     &,NTILES                      ! IN No. of land tiles               
     &,NELEV
     &,TILE_INDEX(LAND_FIELD,NTILES)!IN Index of tile points            
     &,TILE_PTS(NTILES)            ! IN Number of tile points           
                                                                        
      REAL                                                              
     & CANHC_TILE(LAND_FIELD,NTILES)!IN Areal heat capacity of canopy   
!                                  !    for land tiles (J/K/m2).        
     &,CANOPY(LAND_FIELD,NTILES)   ! IN Surface/canopy water for        
!                                  !    snow-free land tiles (kg/m2)    
     &,FLAKE(LAND_FIELD,NTILES)    ! IN Lake fraction.                  
     &,SMC(LAND_FIELD)             ! IN Available soil moisture (kg/m2).
     &,TILE_FRAC(LAND_FIELD,NTILES)! IN Tile fractions including        
!                                  ! snow cover in the ice tile.        
     &,WT_EXT_TILE(LAND_FIELD,SM_LEVELS,NTILES)                         
!                                  ! IN Fraction of evapotranspiration  
!                                  !    extracted from each soil layer  
!                                  !    by each tile.                   
     &,FLAND(LAND_FIELD)           ! IN Land fraction on land pts.      
     &,FLANDG(P_FIELD)             ! IN Land fraction on all pts.       
     &,FLANDG_UV(U_FIELD)          ! IN Land fraction on UV grid.       
                                                                        
! (d) Sea/sea-ice data.                                                 
                                                                        
      REAL                                                              
     & DI(P_FIELD)                 ! IN "Equivalent thickness" of       
!                                  !     sea-ice(m).                    
     &,ICE_FRACT(P_FIELD)          ! IN Fraction of gridbox covered by  
!                                  !     sea-ice (decimal fraction).    
     &,U_0(U_FIELD)                ! IN W'ly component of surface       
!                                  !    current (m/s).                  
     &,V_0(U_FIELD)                ! IN S'ly component of surface       
!                                  !    current (m/s).                  
                                                                        
! (f) Atmospheric + any other data not covered so far, incl control.    
                                                                        
      REAL                                                              
     & PSTAR(P_FIELD)              ! IN Surface pressure (Pascals).     
     &,LW_DOWN(P_FIELD)            ! IN Surface downward LW radiation   
!                                  !    (W/m2).                         
     &,RAD_SICE(P_FIELD)           ! IN Surface net SW and downward LW  
!                                  !    radiation for sea-ice (W/sq m). 
     &,SW_TILE(LAND_FIELD,NTILES)  ! IN Surface net SW radiation on     
!                                  !    land tiles (W/m2).              
     &,TIMESTEP                    ! IN Timestep (seconds).             
     &,T_SOIL(LAND_FIELD,SM_LEVELS)! IN Soil temperatures (K).          
     &,T_ICE(LAND_FIELD,SM_LEVELS)! IN Bare land-ice temperatures (K).          
     &,QW_1(P_FIELD)               ! IN Total water content             
     &,TL_1(P_FIELD)               ! IN Ice/liquid water temperature    
     &,U_1(U_FIELD)                ! IN W'ly wind component (m/s)       
     &,V_1(U_FIELD)                ! IN S'ly wind component (m/s)       
     &,RHOKM_UV_1(U_FIELD)         ! IN Exchange coefficients for       
!                                  !    momentum (on UV-grid, with 1st  
!                                  !    and last rows undefined or, at  
!                                  !    present, set to "missing data") 
                                                                        
      REAL                                                              
     & ALPHA1(LAND_FIELD,NTILES)   ! IN Mean gradient of saturated      
!                                  !    specific humidity with respect  
!                                  !    to temperature between the      
!                                  !    bottom model layer and tile     
!                                  !    surfaces                        
     &,ALPHA1_SICE(P_FIELD)        ! IN ALPHA1 for sea-ice.             
     &,ASHTF(P_FIELD)              ! IN Coefficient to calculate surface
!                                  !    heat flux into soil or sea-ice. 
     &,ASHTF_TILE(LAND_FIELD,NTILES)!IN Coefficient to calculate        
!                                  !    surface heat flux into land     
!                                  !    tiles.                          
     &,DTRDZ_1(P_FIELD)            ! IN -g.dt/dp for model layers.      
     &,FQW_TILE(LAND_FIELD,NTILES) ! IN Surface FQW for land tiles      
     &,FQW_ICE(P_FIELD)            ! IN Surface FQW for sea-ice         
     &,FTL_ICE(P_FIELD)            ! IN Surface FTL for sea-ice         
     &,TSTAR_TILE_OLD(LAND_FIELD,NTILES)                                
!                                  ! IN Tile surface temperatures at    
!                                  !    beginning of timestep.          
     &,FRACA(LAND_FIELD,NTILES)    ! IN Fraction of surface moisture    
!                                  !    flux with only aerodynamic      
!                                  !    resistance for snow-free land   
!                                  !    tiles.                          
     &,RESFS(LAND_FIELD,NTILES)    ! IN Combined soil, stomatal         
!                                  !    and aerodynamic resistance      
!                                  !    factor for fraction (1-FRACA) of
!                                  !    snow-free land tiles.           
     &,RESFT(LAND_FIELD,NTILES)    ! IN Total resistance factor.        
!                                  !    FRACA+(1-FRACA)*RESFS for       
!                                  !    snow-free land, 1 for snow.     
     &,RHOKH_TILE(LAND_FIELD,NTILES)!IN Surface exchange coefficients   
!                                  !    for land tiles                  
     &,RHOKH_SICE(P_FIELD)         ! IN Surface exchange coefficients   
!                                  !    for sea and sea-ice             
     &,RHOKPM(LAND_FIELD,NTILES)   ! IN Land surface exchange coeff.    
     &,RHOKPM_SICE(P_FIELD)        ! IN Sea-ice surface exchange coeff. 
                                                                        
       REAL                                                             
     & Z1(P_FIELD)                 ! IN Height of lowest level (i.e.    
!                                  !    height of middle of lowest      
!                                  !    layer).                         
     &,Z0H(P_FIELD)                ! IN Roughness length for heat and   
!                                  !    moisture (m).                   
     &,Z0H_TILE(LAND_FIELD,NTILES) ! IN Tile roughness lengths for heat 
!                                  !    and moisture (m).               
     &,Z0M(P_FIELD)                ! IN Roughness length for momentum   
!                                  !    (m).                            
     &,Z0M_TILE(LAND_FIELD,NTILES) ! IN Tile roughness lengths for      
!                                  !    momentum.                       
     &,CDR10M_UV(U_FIELD)          ! IN Ratio of CD's reqd for          
!                                  !    calculation of 10 m wind. On    
!                                  !    UV-grid; comments as per RHOKM. 
     &,CHR1P5M(LAND_FIELD,NTILES)  ! IN Ratio of coefffs for calculation
!                                  !    of 1.5m temp for land tiles.    
     &,CHR1P5M_SICE(P_FIELD)       ! IN CHR1P5M for sea and sea-ice     
!                                  !    (leads ignored).                
     &,CT_CTQ_1(P_FIELD)           ! IN Coefficient in T and q          
!                                       tri-diagonal implicit matrix    
     &,CQ_CM_1(U_FIELD)            ! IN Coefficient in U and V          
!                                       tri-diagonal implicit matrix    
     &,DQW_1(P_FIELD)              ! IN Level 1 increment to q field    
     &,DTL_1(P_FIELD)              ! IN Level 1 increment to T field    
     &,DU_1(U_FIELD)               ! IN Level 1 increment to u wind     
!                                       field                           
     &,DV_1(U_FIELD)               ! IN Level 1 increment to v wind     
!                                       field                           
     &,TSURFSNOW(LAND_FIELD,NTILES)
     &,TS1(LAND_FIELD,NTILES) ! T of surface layer,whether soil or snow
     &,NSNOW(LAND_FIELD,NTILES)
!                                                                        
                                                                        
      LOGICAL                                                           
     & LTIMER                      ! IN Logical switch for TIMER diags  
     &,L_NEG_TSTAR                ! IN Switch for -ve TSTAR error check 
     &,L_ESSERY_SNOW
                                                                        
!  STASH flags :-                                                       
                                                                        
      LOGICAL                                                           
     & SIMLT   ! IN Flag for SICE_MLT_HTF (q.v.)                        
     &,SMLT    ! IN Flag for SNOMLT_SURF_HTF (q.v.)                     
     &,SLH     ! IN Flag for LATENT_HEAT (q.v.)                         
     &,SQ1P5   ! IN Flag for Q1P5M (q.v.)                               
     &,ST1P5   ! IN Flag for T1P5M (q.v.)                               
     &,SU10    ! IN Flag for U10M (q.v.)                                
     &,SV10    ! IN Flag for V10M (q.v.)                                
                                                                        
!  In/outs :-                                                           
                                                                        
      REAL                                                              
     & TI(P_FIELD)                 ! INOUT Sea-ice surface layer        
!                                  !       temperature (K).             
     &,TSTAR(P_FIELD)              ! OUT   GBM surface temperature (K). 
     &,TSTAR_LAND(P_FIELD)         ! OUT   Land mean sfc temperature (K)
     &,TSTAR_SEA(P_FIELD)          ! IN    Open sea sfc temperature (K).
     &,TSTAR_SICE(P_FIELD)         ! OUT   Sea-ice sfc temperature (K). 
     &,TSTAR_SSI(P_FIELD)          ! INOUT Sea mean sfc temperature (K).
     &,TSTAR_TILE(LAND_FIELD,NTILES)!INOUT Surface tile temperatures    
     &,SNOW_TILE(LAND_FIELD,NTILES)! INOUT Lying snow on tiles (kg/m2)  
     &,LE_TILE(LAND_FIELD,NTILES)  ! INOUT Surface latent heat flux for 
!                                  !     land tiles                     
     &,RADNET_SICE(P_FIELD)        ! INOUT Surface net radiation on     
!                                  !       sea-ice (W/m2)               
     &,RADNET_TILE(LAND_FIELD,NTILES)                                   
!                                  ! INOUT Surface net radiation on     
!                                  !     land tiles (W/m2)              
     &,E_SEA(P_FIELD)              ! INOUT Evaporation from sea times   
!                                  !       leads fraction. Zero over    
!                                  !       land. (kg per square metre   
!                                  !       per sec).                    
     &,FQW_1(P_FIELD)              ! INOUT Moisture flux between layers 
!                                  !       (kg per square metre per sec)
!                                  !       FQW(,1) is total water flux  
!                                  !       from surface, 'E'.           
     &,FTL_1(P_FIELD)              ! INOUT FTL(,K) contains net         
!                                  !       turbulent sensible heat flux 
!                                  !       into layer K from below; so  
!                                  !       FTL(,1) is the surface       
!                                  !       sensible heat, H.(W/m2)      
     &,FTL_TILE(LAND_FIELD,NTILES) ! INOUT Surface FTL for land tiles   
     &,H_SEA(P_FIELD)              ! INOUT Surface sensible heat flux   
!                                  !       over sea times leads fraction
!                                  !       (W/m2)                       
     &,OLR(P_FIELD)                ! IN    TOA - surface upward LW on   
!                                  !       last radiation timestep      
!                                  ! OUT   Corrected TOA outward LW     
     &,TAUX_1(U_FIELD)             ! OUT   W'ly component of surface    
!                                  !       wind stress (N/sq m). (On    
!                                  !       UV-grid with first and last  
!                                  !       rows undefined or, at        
!                                  !       present, set to missing data 
     &,TAUX_LAND(U_FIELD)          ! INOUT W'ly component of surface    
!                                  !       wind stress over land        
!                                  !       (N/sq m). (On                
!                                  !       UV-grid with first and last  
!                                  !       rows undefined or, at        
!                                  !       present, set to missing data 
     &,TAUX_SSI(U_FIELD)           ! INOUT W'ly component of surface    
!                                  !       wind stress over mean sea    
!                                  !       (N/sq m). (On                
!                                  !       UV-grid with first and last  
!                                  !       rows undefined or, at        
!                                  !       present, set to missing data 
     &,TAUY_1(U_FIELD)             ! OUT   S'ly component of surface    
!                                  !       wind stress (N/sq m).  On    
!                                  !       UV-grid; comments as per TAUX
     &,TAUY_LAND(U_FIELD)          ! INOUT S'ly component of land sfc   
!                                  !       wind stress (N/sq m).  On    
!                                  !       UV-grid; comments as per TAUX
     &,TAUY_SSI(U_FIELD)           ! INOUT S'ly compt of mean sea sfc   
!                                  !       wind stress (N/sq m).  On    
!                                  !       UV-grid; comments as per TAUX
                                                                        
!  Outputs :-                                                           
!-1 Diagnostic (or effectively so - includes coupled model requisites):-
                                                                        
!  (a) Calculated anyway (use STASH space from higher level) :-         
!                                                                       
      REAL                                                              
     & ECAN(P_FIELD)               ! OUT Gridbox mean evaporation from  
!                                  !     canopy/surface store (kg/m2/s).
!                                  !     Zero over sea.                 
     &,ESOIL_TILE(LAND_FIELD,NTILES)                                    
!                                  ! OUT ESOIL for snow-free land tiles 
     &,SURF_HTF_TILE(LAND_FIELD,NTILES)
     &,SEA_ICE_HTF(P_FIELD)        ! OUT Heat flux through sea-ice      
!                                  !     (W/m2, positive downwards).    
     &,SURF_HT_FLUX(P_FIELD)       ! OUT Net downward heat flux at      
!                                  !     surface over land and sea-ice  
!                                  !     fraction of gridbox (W/m2).    
     &,SURF_HT_FLUX_LAND(P_FIELD)  ! OUT Net downward heat flux at      
!                                  !     surface over land              
!                                  !     fraction of gridbox (W/m2).    
     &,SURF_HT_FLUX_SICE(P_FIELD)  ! OUT Net downward heat flux at      
!                                  !     surface over sea-ice           
!                                  !     fraction of gridbox (W/m2).    
                                                                        
!  (b) Not passed between lower-level routines (not in workspace at this
!      level) :-                                                        
                                                                        
      REAL                                                              
     & SICE_MLT_HTF(P_FIELD)       ! OUT Heat flux due to melting of    
!                                  !     sea-ice (Watts per sq metre).  
     &,SNOMLT_SURF_HTF(P_FIELD)    ! OUT Heat flux required for surface 
!                                  !     melting of snow (W/m2).        
     &,LATENT_HEAT(P_FIELD)        ! OUT Surface latent heat flux, +ve  
!                                  !     upwards (Watts per sq m).      
     &,Q1P5M(P_FIELD)              ! OUT Q at 1.5 m (kg water / kg air).
     &,Q1P5M_TILE(LAND_FIELD,NTILES)!OUT Q1P5M over land tiles.         
     &,T1P5M(P_FIELD)              ! OUT T at 1.5 m (K).                
     &,U10M(U_FIELD)               ! OUT U at 10 m (m per s).           
     &,T1P5M_TILE(LAND_FIELD,NTILES)!OUT T1P5M over land tiles.         
     &,V10M(U_FIELD)               ! OUT V at 10 m (m per s).           
                                                                        
!-2 Genuinely output, needed by other atmospheric routines :-           
                                                                        
      REAL                                                              
     & EI(P_FIELD)                 ! OUT Sublimation from lying snow or 
!                                  !     sea-ice (kg/m2/s).             
     &,EI_LAND(P_FIELD)            ! OUT Sublimation from lying snow    
!                                  !     (kg/m2/s).                     
     &,EI_SICE(P_FIELD)            ! OUT Sublimation from sea-ice       
!                                  !     (kg/m2/s).                     
     &,EI_TILE(LAND_FIELD,NTILES)  ! OUT EI for land tiles.             
     &,ECAN_TILE(LAND_FIELD,NTILES)! OUT ECAN for snow-free land tiles  
     &,ESOIL(P_FIELD)              ! OUT Surface evapotranspiration     
!                                  !     from soil moisture store       
!                                  !     (kg/m2/s).                     
     &,EXT(LAND_FIELD,SM_LEVELS)   ! OUT Extraction of water from each  
!                                  !     soil layer (kg/m2/s).          
     &,SNOWMELT(P_FIELD)           ! OUT Snowmelt (kg/m2/s).            
     &,MELT_TILE(LAND_FIELD,NTILES)! OUT Snowmelt on land tiles (kg/m2/s
                                                                        
      INTEGER                                                           
     & ERROR          ! OUT 0 - AOK;                                    
!                     !     1 to 7  - bad grid definition detected;     
                                                                        
      REAL
     & tl_elev(LAND_FIELD,NELEV),qw_elev(LAND_FIELD,NELEV),        
     & z1_elev(LAND_FIELD,NELEV),
     & dtrdz_elev(LAND_FIELD,NELEV),
     & tsoil_elev(LAND_FIELD,NELEV),tice_elev(LAND_FIELD,NELEV),
     & p_elev(LAND_FIELD,NELEV),
     & lwdown_elev(LAND_FIELD,NELEV) 

      REAL
     & qim_elev(LAND_FIELD,NELEV),tim_elev(LAND_FIELD,NELEV)
!---------------------------------------------------------------------  
!  External routines called :-                                          
                                                                        
      EXTERNAL Z,HEAT_CON,SF_EXCH,BOUY_TQ,BTQ_INT,                      
     & KMKH,EX_FLUX_TQ,EX_FLUX_UV,IM_CAL_TQ,SICE_HTF,SF_EVAP,SF_MELT,   
     & IM_CAL_UV,SCREEN_TQ                                              
      EXTERNAL TIMER                                                    
*IF -DEF,SCMA                                                           
      EXTERNAL UV_TO_P,P_TO_UV                                          
*ENDIF                                                                  
                                                                        
!-----------------------------------------------------------------------
!   Symbolic constants (parameters) reqd in top-level routine :-        
                                                                        
*CALL C_0_DG_C                                                          
*CALL C_R_CP                                                            
*CALL C_G                                                               
*CALL C_LHEAT                                                           
*CALL C_GAMMA                                                           
*CALL CSIGMA                                                            
*CALL SOIL_THICK                                                        
*IF DEF,MPP                                                             
! MPP Common block                                                      
*CALL PARVARS                                                           
*ENDIF                                                                  
                                                                        
! Derived local parameters.                                             
                                                                        
      REAL LS                                                           
                                                                        
      PARAMETER (                                                       
     & LS=LF+LC              ! Latent heat of sublimation.              
     &  )                                                               
                                                                        
!-----------------------------------------------------------------------
                                                                        
!  Workspace :-                                                         
                                                                        
      REAL                                                              
     & ELAKE_TILE(LAND_FIELD,NTILES) ! Lake evaporation.                
     &,QIM_1(P_FIELD)  ! Implicit value of first model level humidity   
     &,TIM_1(P_FIELD)  ! Implicit value of first model level temperature
     &,TSTAR_RAD4(P_FIELD)! Effective surface radiative temperature for 
!                         ! land and sea-ice                            
                                                                        
!  Local scalars :-                                                     
                                                                        
      REAL                                                              
     & LAT_HT     ! Latent heat of evaporation for snow-free land       
!                 ! or sublimation for snow-covered land and ice.       
                                                                        
      INTEGER                                                           
     & I,J,L      ! LOCAL Loop counter (horizontal field index).        
     &,N,K        ! LOCAL Loop counter (tile index).                    
                                                                        
      IF (LTIMER) THEN                                                  
        CALL TIMER('SF_IMPL ',3)                                        
      ENDIF                                                             
      ERROR = 0                                                         
                                                                        
      CALL IM_SF_PT (                                                   
     & P_FIELD,P1,U_FIELD,U1                                            
     &,P_POINTS,U_POINTS,ROW_LENGTH,LAND_FIELD                          
     &,LAND_INDEX,NTILES,TILE_INDEX,TILE_PTS                            
     &,FLANDG,TILE_FRAC,SNOW_TILE,ICE_FRACT                             
     &,GAMMA(1),ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE                     
     &,RESFT,RHOKPM,RHOKPM_SICE                                         
     &,RHOKM_UV_1,RHOKH_TILE,RHOKH_SICE                                 
     &,CT_CTQ_1,DQW_1,DTL_1,CQ_CM_1,DU_1,DV_1
     &,FLANDG_UV                                                
     &,FQW_1,FTL_1                                                      
     &,TAUX_1,TAUX_LAND,TAUX_SSI,TAUY_1,TAUY_LAND,TAUY_SSI              
     &,FQW_TILE,FTL_TILE,FQW_ICE,FTL_ICE,E_SEA,H_SEA                    
     &,LTIMER                                                           
     &)                                                                 
                                                                        
!-----------------------------------------------------------------------
!! 6.1 Convert FTL to sensible heat flux in Watts per square metre.     
!-----------------------------------------------------------------------
                                                                        
Cfpp$ Select(CONCUR)                                                    
      DO  I=P1,P1+P_POINTS-1                                            
        FTL_1(I) = FTL_1(I)*CP                                          
      ENDDO                                                             
                                                                        
      DO I=P1,P1+P_POINTS-1                                             
        FTL_ICE(I) = CP*FTL_ICE(I)                                      
      ENDDO                                                             
                                                                        
      DO N=1,NTILES                                                     
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          FTL_TILE(L,N) = CP*FTL_TILE(L,N)                              
        ENDDO                                                           
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
! Diagnose the GBM surface temperature for points with sea-ice          
!-----------------------------------------------------------------------
      DO I=P1,P1+P_POINTS-1                                             
        IF ( FLANDG(I).LT.1.0 .and. ICE_FRACT(I).GT.0. ) THEN       
          SURF_HT_FLUX_SICE(I) = RADNET_SICE(I) - LS*FQW_ICE(I) - 
     &                        FTL_ICE(I)                              
                                                                        
          TSTAR_SSI(I) = (1. - ICE_FRACT(I))*TSTAR_SEA(I) +       
     &                   ICE_FRACT(I)*TI(I) +                       
     &                    SURF_HT_FLUX_SICE(I) / ASHTF(I)           
        ENDIF                                                           
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
! Optional error check : test for negative top soil layer temperature   
!-----------------------------------------------------------------------
      IF (L_NEG_TSTAR) THEN                                             
        DO L=LAND1,LAND1+LAND_PTS-1                                     
          IF (T_SOIL(L,1).LT.0) THEN                                    
            ERROR = 1                                                   
            WRITE(6,*) '*** ERROR DETECTED BY ROUTINE BDY_LAYR ***'     
            WRITE(6,*) 'NEGATIVE TEMPERATURE IN TOP SOIL LAYER AT '     
            WRITE(6,*) 'LAND POINT ',L                                  
          ENDIF                                                         
        ENDDO                                                           
      ENDIF                                                             
                                                                        
!-----------------------------------------------------------------------
!!   Diagnose the land surface temperature                              
!-----------------------------------------------------------------------
!
      DO N=1,NTILES
        !DO L=1,LAND1,LAND1+LAND_PTS-1
        DO L=1,LAND_FIELD

          SURF_HTF_TILE(L,N)=0.

            k=mod(n-1,nelev)+1
            TS1(L,N) = TSOIL_ELEV(L,K)
            IF (N.gt.(ntiles-nelev)) TS1(L,N) = TICE_ELEV(L,K)

          IF(L_ESSERY_SNOW) THEN
            if (NSNOW(L,N) .GT. 0) TS1(L,N) = TSURFSNOW(L,N)
          ENDIF
        ENDDO 
      ENDDO 
!
                                                                        
      DO N=1,NTILES                                                     
        DO L=LAND1,LAND1+LAND_PTS-1                                     
          TSTAR_TILE(L,N) = TS1(L,N)                                 
          IF (SNOW_TILE(L,N).GT.0.)                                     
     &      TSTAR_TILE(L,N) =  MIN( TS1(L,N), TM )                   
        ENDDO                                                           
      ENDDO                                                             
                                                                        
      DO N=1,NTILES                                                     
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          LAT_HT = LC                                                   
          IF (SNOW_TILE(L,N).GT.0.) LAT_HT = LS                         
          TSTAR_TILE(L,N) = TS1(L,N) + ( RADNET_TILE(L,N)            
     &                          - LAT_HT*FQW_TILE(L,N) - FTL_TILE(L,N)  
     &                          + (CANHC_TILE(L,N)/TIMESTEP) *          
     &                            (TSTAR_TILE_OLD(L,N) - TS1(L,N)) ) 
     &                                                 / ASHTF_TILE(L,N)
        ENDDO                                                           
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
!! 7.  Surface evaporation components and updating of surface           
!!     temperature (P245, routine SF_EVAP).                             
!-----------------------------------------------------------------------
      CALL SF_EVAP (                                                    
     & P_POINTS,P_FIELD,P1,LAND1,LAND_PTS,LAND_FIELD,NTILES,            
     & LAND_INDEX,TILE_INDEX,TILE_PTS,SM_LEVELS,LTIMER,FLAND,           
     & ASHTF_TILE,CANOPY,DTRDZ_1,FLAKE,FRACA,SNOW_TILE,RESFS,           
     & RESFT,RHOKH_TILE,TILE_FRAC,SMC,WT_EXT_TILE,TIMESTEP,             
     & FQW_1,FQW_TILE,FTL_1,FTL_TILE,TSTAR_TILE,                        
     & ECAN,ECAN_TILE,ELAKE_TILE,ESOIL,ESOIL_TILE,EI_TILE,EXT           
     & )                                                                
                                                                        
!-----------------------------------------------------------------------
!!     Surface melting of sea-ice and snow on land tiles.               
!-----------------------------------------------------------------------
                                                                        
      CALL SF_MELT (                                                    
     & P_POINTS,P_FIELD,P1,LAND_FIELD,NTILES,LAND_INDEX,                
     & TILE_INDEX,TILE_PTS,LAND_MASK,LTIMER,SIMLT,SMLT,FLANDG,          
     & ALPHA1,ALPHA1_SICE,ASHTF,ASHTF_TILE,DTRDZ_1,ICE_FRACT,           
     & RHOKH_TILE,RHOKH_SICE,TILE_FRAC,TIMESTEP,                        
     & EI_TILE,FQW_1,FQW_ICE,FTL_1,FTL_ICE,FTL_TILE,                    
     & TSTAR_SEA,TSTAR_SSI,TSTAR_TILE,SNOW_TILE,                        
     & EI_LAND,EI_SICE,                                                 
     & SICE_MLT_HTF,SNOMLT_SURF_HTF,SNOWMELT,MELT_TILE,
     & L_ESSERY_SNOW
     & )                                                                
                                                                        
*IF -DEF,SCMA                                                           
      DO I=P1,P1+P_POINTS-1                                             
*ELSE                                                                   
      DO I=1,P_POINTS                                                   
*ENDIF                                                                  
        QIM_1(I)=QW_1(I) + DQW_1(I)-CT_CTQ_1(I)*FQW_1(I)                
        TIM_1(I)=TL_1(I) + DTL_1(I)-CT_CTQ_1(I)*FTL_1(I)/CP             
      ENDDO                                                             
      DO L=1,LAND_FIELD
      DO K=1,NELEV
        I = LAND_INDEX(L)
        QIM_ELEV(L,K)=QW_ELEV(L,K) + 
     &                DQW_1(I)-CT_CTQ_1(I)*FQW_TILE(L,K)
        TIM_ELEV(L,K)=TL_ELEV(L,K) + 
     &                DTL_1(I)-CT_CTQ_1(I)*FTL_TILE(L,K)/CP
      ENDDO
      ENDDO
                                                                        
!-----------------------------------------------------------------------
!!     Specific humidity and temperature at 1.5 metres.                 
!-----------------------------------------------------------------------
      CALL SCREEN_TQ (                                                  
     & P_POINTS,P_FIELD,P1,LAND1,LAND_PTS,LAND_FIELD,NTILES,            
     & LAND_INDEX,TILE_INDEX,TILE_PTS,FLANDG,                        
     & SQ1P5,ST1P5,CHR1P5M,CHR1P5M_SICE,PSTAR,QIM_1,RESFT,              
     & TILE_FRAC,TIM_1,TSTAR_SSI,TSTAR_TILE,                            
     & Z0H,Z0H_TILE,Z0M,Z0M_TILE,Z1,                                    
     & Q1P5M,Q1P5M_TILE,T1P5M,T1P5M_TILE                                
     & ,nelev,p_elev,QIM_ELEV,TIM_ELEV,z1_elev
     & )                                                                
                                                                        
!-----------------------------------------------------------------------
!!     Gridbox-mean surface temperature and net surface heat fluxes     
!-----------------------------------------------------------------------
      DO I=P1,P1+P_POINTS-1                                             
        SURF_HT_FLUX_LAND(I) = 0.                                     
        SURF_HT_FLUX_SICE(I) = 0.                                     
        TSTAR_RAD4(I) = 0.                                            
        IF (FLANDG(I).LT.1.0 .AND. ICE_FRACT(I).GT.0.) THEN         
          TSTAR_SICE(I) = (TSTAR_SSI(I) -                           
     &              (1.-ICE_FRACT(I))*TSTAR_SEA(I))/ICE_FRACT(I)  
          TSTAR_RAD4(I) = (1.0-FLANDG(I))                           
     &              *ICE_FRACT(I)*TSTAR_SICE(I)**4                  
          RADNET_SICE(I) = RAD_SICE(I) -                            
     &                     ICE_FRACT(I)*SBCON*TSTAR_SICE(I)**4      
          SURF_HT_FLUX_SICE(I) = RADNET_SICE(I) - LS*FQW_ICE(I) - 
     &                        FTL_ICE(I)                              
        ENDIF                                                           
      ENDDO                                                             
                                                                        
      DO L=1,LAND_FIELD                                                 
        I = LAND_INDEX(L)                                               
        TSTAR_LAND(I) = 0.                                              
      ENDDO                                                             
                                                                        
      DO N=1,NTILES                                                     
        k=mod(n-1,nelev)+1
        DO J=1,TILE_PTS(N)                                              
          L = TILE_INDEX(J,N)                                           
          I = LAND_INDEX(L)                                             
          SURF_HTF_TILE(L,N)=0.
          RADNET_TILE(L,N) = SW_TILE(L,N) +                             
     &                   LWDOWN_ELEV(L,K) - SBCON*TSTAR_TILE(L,N)**4
          LE_TILE(L,N) = LC*ECAN_TILE(L,N) + LC*ESOIL_TILE(L,N) +       
     &                   LC*ELAKE_TILE(L,N) + LS*EI_TILE(L,N)           
         SURF_HTF_TILE(L,N) = RADNET_TILE(L,N) - FTL_TILE(L,N) -
     &                        LE_TILE(L,N) - LF*MELT_TILE(L,N) -
     &                       (CANHC_TILE(L,N)/TIMESTEP) *
     &                       (TSTAR_TILE(L,N) - TSTAR_TILE_OLD(L,N))
          SURF_HT_FLUX_LAND(I) = SURF_HT_FLUX_LAND(I)
     &                      + TILE_FRAC(L,N) * SURF_HTF_TILE(L,N)
          TSTAR_LAND(I) = TSTAR_LAND(I)                             
     &               + TILE_FRAC(L,N)*TSTAR_TILE(L,N)                   
          TSTAR_RAD4(I) = TSTAR_RAD4(I) + FLANDG(I)*              
     &                    TILE_FRAC(L,N)*TSTAR_TILE(L,N)**4             
        ENDDO                                                           
      ENDDO                                                             
                                                                        
! TOA outward LW radiation after boundary layer                         
      DO I=P1,P1+P_POINTS-1                                             
        OLR(I) = OLR(I) + SBCON*TSTAR_RAD4(I)                           
      ENDDO                                                             
                                                                        
!-----------------------------------------------------------------------
! Optional error check : test for negative surface temperature          
!-----------------------------------------------------------------------
      IF (L_NEG_TSTAR) THEN                                             
        DO L=LAND1,LAND1+LAND_PTS-1                                     
          I = LAND_INDEX(L)                                             
          IF (TSTAR_LAND(I).LT.0) THEN                                  
            ERROR = 1                                                   
            WRITE(6,*) '*** ERROR DETECTED BY ROUTINE BDY_LAYR ***'     
            WRITE(6,*) 'NEGATIVE SURFACE TEMPERATURE AT LAND POINT ',L  
          ENDIF                                                         
        ENDDO                                                           
      ENDIF                                                             
                                                                        
!-----------------------------------------------------------------------
! Update sea-ice surface layer temperature.                             
!-----------------------------------------------------------------------
                                                                        
      CALL SICE_HTF(                                                    
     & P_POINTS,P_FIELD,P1,FLANDG,SIMLT,                             
     & DI,ICE_FRACT,SURF_HT_FLUX_SICE,                                  
     & TSTAR_SEA,TSTAR_SICE,TIMESTEP,                                   
     & TI,SICE_MLT_HTF,SEA_ICE_HTF,                                     
     & LTIMER)                                                          
                                                                        
!---------------------------------------------------------------------- 
!! 8.1 Update U_V.                                                      
!---------------------------------------------------------------------- 
                                                                        
! U component of 10m wind                                               
      IF (SU10)THEN                                                     
*IF -DEF,SCMA                                                           
        DO I=U1+ROW_LENGTH,U1+U_POINTS-ROW_LENGTH-1                     
*ELSE                                                                   
        DO I=1,U_POINTS                                                 
*ENDIF                                                                  
          U10M(I) = (U_1(I) + (DU_1(I) - CQ_CM_1(I)*TAUX_1(I)) -        
     &                      U_0(I))*CDR10M_UV(I) + U_0(I)               
        ENDDO                                                           
      ENDIF                                                             
                                                                        
! V component of 10m wind                                               
      IF (SV10)THEN                                                     
*IF -DEF,SCMA                                                           
        DO I=U1+ROW_LENGTH,U1+U_POINTS-ROW_LENGTH-1                     
*ELSE                                                                   
        DO I=1,U_POINTS                                                 
*ENDIF                                                                  
          V10M(I) = (V_1(I) + (DV_1(I) - CQ_CM_1(I)*TAUY_1(I)) -        
     &                      V_0(I))*CDR10M_UV(I) + V_0(I)               
        ENDDO                                                           
      ENDIF                                                             
                                                                        
!-----------------------------------------------------------------------
!! 9.  Calculate surface latent heat flux.                              
!-----------------------------------------------------------------------
                                                                        
      IF (SLH) THEN                                                     
        DO I=P1,P1+P_POINTS-1                                           
          LATENT_HEAT(I) = LC*FQW_1(I)                              
     &     + LF*(FLANDG(I)*EI_LAND(I)+(1.-FLANDG(I))*EI_SICE(I))
        ENDDO                                                           
      ENDIF                                                             
                                                                        

      DO I=P1,P1+P_POINTS-1                                           
        TSTAR(I)=FLANDG(I)*TSTAR_LAND(I)                      
     &    +(1.-FLANDG(I))*TSTAR_SSI(I)                          
                                                                        
        EI(I)=FLANDG(I)*EI_LAND(I)                            
     &    +(1.-FLANDG(I))*EI_SICE(I)                            
                                                                        
        SURF_HT_FLUX(I)=FLANDG(I)*SURF_HT_FLUX_LAND(I)        
     &    +(1.-FLANDG(I))*SURF_HT_FLUX_SICE(I)                  
      ENDDO                                                             


      IF (LTIMER) THEN                                                  
        CALL TIMER('SF_IMPL ',4)                                        
      ENDIF                                                             
                                                                        
      RETURN                                                            
      END                                                               
*ENDIF 
